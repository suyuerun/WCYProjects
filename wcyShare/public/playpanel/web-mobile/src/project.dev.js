require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"Activity":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'bd7b7Vk6ANJbZPJOuRtmYXs', 'Activity');
// Scripts/GameData/config/Activity.js

"use strict";

var data = [];
data["1001"] = {
		PID: "1001",
		Channel: "0",
		Type: "2",
		StartType: "3",
		Continuous: "-1",
		Start: "",
		Finish: "",
		Travel: "6",
		Title: "15亿大奖赛",
		Desc: "【时间】每晚20:00【规则】总奖池15亿，报名费1100万游戏币",
		Pic: "4003",
		Url: ""
};
data["1002"] = {
		PID: "1002",
		Channel: "1",
		Type: "3",
		StartType: "4",
		Continuous: "0",
		Start: "",
		Finish: "",
		Travel: "6",
		Title: "5000万游戏币快速赛",
		Desc: "【时间】每天14:00/16:00/18:00【规则】总奖池5000万，报名费50万",
		Pic: "4004",
		Url: ""
};
data["1003"] = {
		PID: "1003",
		Channel: "2",
		Type: "4",
		StartType: "5",
		Continuous: "1",
		Start: "",
		Finish: "",
		Travel: "6",
		Title: "日常免费赛",
		Desc: "【时间】每日整点【规则】总奖池奖池50万",
		Pic: "4005",
		Url: ""
};
module.exports = data;

cc._RF.pop();
},{}],"AnimationManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, '63f1dCD61hI0pKZzuQ4xedw', 'AnimationManager');
// Scripts/Manager/AnimationManager.js

'use strict';

/**
 * Created by PC on 2017/5/31.
 */
var UITools = require('UITools');
var AnimationManager = cc.Class({

    properties: {
        _pool: []
    },
    // _isAutoRecycle的意思是是否播完自动回收动画
    playAnimation: function playAnimation(_url, _parent, _callback, _pos, _isAutoRecycle) {
        var animation;
        var self = this;
        var curNode = null;
        if (self._pool.hasOwnProperty(_url) == true) {
            animation = self._pool[_url].pop();
            if (!!animation) {
                self.onCreateObj(_url, _parent, _callback, animation, _pos, _isAutoRecycle);
            } else {
                Global.resourceManager.loadRes(_url, function (_res) {
                    animation = cc.instantiate(_res);
                    self.onCreateObj(_url, _parent, _callback, animation, _pos, _isAutoRecycle, _res.name);
                });
            }
        } else {
            Global.resourceManager.loadRes(_url, function (_res) {
                animation = cc.instantiate(_res);
                self.onCreateObj(_url, _parent, _callback, animation, _pos, _isAutoRecycle, _res.name);
            });
        }
    },

    // 创建预制
    onCreateObj: function onCreateObj(_url, _parent, _callback, _animation, _pos, _isAutoRecycle, resName) {
        var self = this;
        _parent.addChild(_animation);
        if (!!_pos) UITools.onSetNodePosition(_animation, _pos);
        var compontent = _animation.getComponent("cc.Animation");
        if (compontent != null) {
            if (CC_EDITOR) compontent.play(resName);else compontent.play();

            if (!!_isAutoRecycle) {
                var callBack = function callBack() {
                    self.stopAnimation(_url, _animation);
                    compontent.off('finished', callBack);
                };
                compontent.on('finished', callBack);
            }
        }
        if (_callback != null) _callback(_animation);
    },

    stopAnimation: function stopAnimation(_url, _animation) {
        if (_animation == null) return;
        var compontent = _animation.getComponent("cc.Animation");
        if (compontent != null) {
            compontent.stop();
        }
        if (_animation.parent) {
            _animation.parent.removeChild(_animation);
        }
        if (this._pool.hasOwnProperty(_url) == false) this._pool[_url] = [];
        this._pool[_url].push(_animation);
    }

});

module.exports = AnimationManager;

cc._RF.pop();
},{"UITools":"UITools"}],"AnimationPlayControl":[function(require,module,exports){
"use strict";
cc._RF.push(module, '46d7fuZGvBM2aQ6x92wuiiS', 'AnimationPlayControl');
// Scripts/Other/AnimationPlayControl.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        animation: [cc.Node]
    },

    // 注释index为0表示播放成功动画0表示成功
    PlayAnimation: function PlayAnimation(midex) {
        var curAni = this.animation[midex];
        curAni.active = true;
        var anim = curAni.getComponent(cc.Animation);
        anim.play();
    },

    StopAllAnimation: function StopAllAnimation() {
        for (var i = 0; i < this.animation.length; ++i) {
            var curAni = this.animation[i];
            curAni.active = false;
            var anim = curAni.getComponent(cc.Animation);
            anim.stop();
        }
    }

});

cc._RF.pop();
},{}],"Ante210":[function(require,module,exports){
"use strict";
cc._RF.push(module, '0db3dWXkYVCKKnceAgtY5s7', 'Ante210');
// Scripts/GameData/config/Ante210.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		upTime: "10",
		smallBlind: "50",
		bigBlind: "100",
		ante: "0",
		rebuyCost: "11000000",
		rebuyValue: "20000",
		restTime: "0"
};
data["2"] = {
		PID: "2",
		upTime: "10",
		smallBlind: "150",
		bigBlind: "300",
		ante: "0",
		rebuyCost: "11000000",
		rebuyValue: "20000",
		restTime: "0"
};
data["3"] = {
		PID: "3",
		upTime: "10",
		smallBlind: "200",
		bigBlind: "400",
		ante: "0",
		rebuyCost: "11000000",
		rebuyValue: "20000",
		restTime: "0"
};
data["4"] = {
		PID: "4",
		upTime: "10",
		smallBlind: "250",
		bigBlind: "500",
		ante: "50",
		rebuyCost: "11000000",
		rebuyValue: "20000",
		restTime: "1"
};
data["5"] = {
		PID: "5",
		upTime: "10",
		smallBlind: "350",
		bigBlind: "700",
		ante: "70",
		rebuyCost: "11000000",
		rebuyValue: "20000",
		restTime: "0"
};
data["6"] = {
		PID: "6",
		upTime: "10",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "100",
		rebuyCost: "11000000",
		rebuyValue: "40000",
		restTime: "0"
};
data["7"] = {
		PID: "7",
		upTime: "10",
		smallBlind: "750",
		bigBlind: "1500",
		ante: "150",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["8"] = {
		PID: "8",
		upTime: "10",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "200",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["9"] = {
		PID: "9",
		upTime: "10",
		smallBlind: "1500",
		bigBlind: "3000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["10"] = {
		PID: "10",
		upTime: "10",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "400",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["11"] = {
		PID: "11",
		upTime: "10",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "500",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["12"] = {
		PID: "12",
		upTime: "10",
		smallBlind: "3000",
		bigBlind: "6000",
		ante: "600",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["13"] = {
		PID: "13",
		upTime: "10",
		smallBlind: "4000",
		bigBlind: "8000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["14"] = {
		PID: "14",
		upTime: "10",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["15"] = {
		PID: "15",
		upTime: "10",
		smallBlind: "6000",
		bigBlind: "12000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["16"] = {
		PID: "16",
		upTime: "10",
		smallBlind: "8000",
		bigBlind: "16000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["17"] = {
		PID: "17",
		upTime: "10",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["18"] = {
		PID: "18",
		upTime: "10",
		smallBlind: "12000",
		bigBlind: "24000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["19"] = {
		PID: "19",
		upTime: "10",
		smallBlind: "15000",
		bigBlind: "30000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["20"] = {
		PID: "20",
		upTime: "10",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["21"] = {
		PID: "21",
		upTime: "10",
		smallBlind: "25000",
		bigBlind: "50000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["22"] = {
		PID: "22",
		upTime: "10",
		smallBlind: "30000",
		bigBlind: "60000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["23"] = {
		PID: "23",
		upTime: "10",
		smallBlind: "40000",
		bigBlind: "80000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["24"] = {
		PID: "24",
		upTime: "10",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["25"] = {
		PID: "25",
		upTime: "10",
		smallBlind: "60000",
		bigBlind: "120000",
		ante: "12000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["26"] = {
		PID: "26",
		upTime: "10",
		smallBlind: "80000",
		bigBlind: "160000",
		ante: "16000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["27"] = {
		PID: "27",
		upTime: "10",
		smallBlind: "100000",
		bigBlind: "200000",
		ante: "20000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["28"] = {
		PID: "28",
		upTime: "10",
		smallBlind: "120000",
		bigBlind: "240000",
		ante: "24000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["29"] = {
		PID: "29",
		upTime: "10",
		smallBlind: "150000",
		bigBlind: "300000",
		ante: "30000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["30"] = {
		PID: "30",
		upTime: "10",
		smallBlind: "200000",
		bigBlind: "400000",
		ante: "40000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["31"] = {
		PID: "31",
		upTime: "10",
		smallBlind: "250000",
		bigBlind: "500000",
		ante: "50000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["32"] = {
		PID: "32",
		upTime: "10",
		smallBlind: "300000",
		bigBlind: "600000",
		ante: "60000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["33"] = {
		PID: "33",
		upTime: "10",
		smallBlind: "350000",
		bigBlind: "700000",
		ante: "70000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["34"] = {
		PID: "34",
		upTime: "10",
		smallBlind: "400000",
		bigBlind: "800000",
		ante: "80000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["35"] = {
		PID: "35",
		upTime: "10",
		smallBlind: "500000",
		bigBlind: "1000000",
		ante: "100000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["36"] = {
		PID: "36",
		upTime: "10",
		smallBlind: "600000",
		bigBlind: "1200000",
		ante: "120000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["37"] = {
		PID: "37",
		upTime: "10",
		smallBlind: "700000",
		bigBlind: "1400000",
		ante: "140000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["38"] = {
		PID: "38",
		upTime: "10",
		smallBlind: "800000",
		bigBlind: "1600000",
		ante: "160000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["39"] = {
		PID: "39",
		upTime: "10",
		smallBlind: "1000000",
		bigBlind: "2000000",
		ante: "200000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["40"] = {
		PID: "40",
		upTime: "10",
		smallBlind: "1200000",
		bigBlind: "2400000",
		ante: "240000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["41"] = {
		PID: "41",
		upTime: "10",
		smallBlind: "1500000",
		bigBlind: "3000000",
		ante: "300000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["42"] = {
		PID: "42",
		upTime: "10",
		smallBlind: "2000000",
		bigBlind: "4000000",
		ante: "400000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Ante220":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ff126lp/d1CM6BskIhMtk8r', 'Ante220');
// Scripts/GameData/config/Ante220.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		upTime: "2",
		smallBlind: "25",
		bigBlind: "50",
		ante: "0",
		rebuyCost: "20000",
		rebuyValue: "10000",
		restTime: "0"
};
data["2"] = {
		PID: "2",
		upTime: "2",
		smallBlind: "50",
		bigBlind: "100",
		ante: "0",
		rebuyCost: "20000",
		rebuyValue: "10000",
		restTime: "0"
};
data["3"] = {
		PID: "3",
		upTime: "2",
		smallBlind: "150",
		bigBlind: "300",
		ante: "0",
		rebuyCost: "20000",
		rebuyValue: "10000",
		restTime: "1"
};
data["4"] = {
		PID: "4",
		upTime: "2",
		smallBlind: "200",
		bigBlind: "400",
		ante: "0",
		rebuyCost: "25000",
		rebuyValue: "15000",
		restTime: "0"
};
data["5"] = {
		PID: "5",
		upTime: "2",
		smallBlind: "250",
		bigBlind: "500",
		ante: "50",
		rebuyCost: "25000",
		rebuyValue: "15000",
		restTime: "0"
};
data["6"] = {
		PID: "6",
		upTime: "2",
		smallBlind: "350",
		bigBlind: "700",
		ante: "70",
		rebuyCost: "25000",
		rebuyValue: "15000",
		restTime: "1"
};
data["7"] = {
		PID: "7",
		upTime: "2",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "100",
		rebuyCost: "30000",
		rebuyValue: "20000",
		restTime: "0"
};
data["8"] = {
		PID: "8",
		upTime: "2",
		smallBlind: "750",
		bigBlind: "1500",
		ante: "150",
		rebuyCost: "30000",
		rebuyValue: "20000",
		restTime: "0"
};
data["9"] = {
		PID: "9",
		upTime: "2",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "200",
		rebuyCost: "40000",
		rebuyValue: "50000",
		restTime: "1"
};
data["10"] = {
		PID: "10",
		upTime: "2",
		smallBlind: "1500",
		bigBlind: "3000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["11"] = {
		PID: "11",
		upTime: "2",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "400",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["12"] = {
		PID: "12",
		upTime: "2",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "500",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["13"] = {
		PID: "13",
		upTime: "2",
		smallBlind: "3000",
		bigBlind: "6000",
		ante: "600",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Ante221":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'bc02bDqLbRDZqXN6xUXJYh+', 'Ante221');
// Scripts/GameData/config/Ante221.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		upTime: "5",
		smallBlind: "50",
		bigBlind: "100",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["2"] = {
		PID: "2",
		upTime: "5",
		smallBlind: "75",
		bigBlind: "150",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["3"] = {
		PID: "3",
		upTime: "5",
		smallBlind: "100",
		bigBlind: "200",
		ante: "25",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["4"] = {
		PID: "4",
		upTime: "5",
		smallBlind: "150",
		bigBlind: "300",
		ante: "25",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["5"] = {
		PID: "5",
		upTime: "5",
		smallBlind: "200",
		bigBlind: "400",
		ante: "50",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["6"] = {
		PID: "6",
		upTime: "5",
		smallBlind: "300",
		bigBlind: "600",
		ante: "75",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["7"] = {
		PID: "7",
		upTime: "5",
		smallBlind: "400",
		bigBlind: "800",
		ante: "100",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["8"] = {
		PID: "8",
		upTime: "5",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "100",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["9"] = {
		PID: "9",
		upTime: "5",
		smallBlind: "600",
		bigBlind: "1200",
		ante: "200",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["10"] = {
		PID: "10",
		upTime: "5",
		smallBlind: "800",
		bigBlind: "1600",
		ante: "200",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["11"] = {
		PID: "11",
		upTime: "5",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["12"] = {
		PID: "12",
		upTime: "5",
		smallBlind: "1200",
		bigBlind: "2400",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["13"] = {
		PID: "13",
		upTime: "5",
		smallBlind: "1500",
		bigBlind: "3000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["14"] = {
		PID: "14",
		upTime: "5",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "400",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["15"] = {
		PID: "15",
		upTime: "5",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "500",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["16"] = {
		PID: "16",
		upTime: "5",
		smallBlind: "3000",
		bigBlind: "6000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["17"] = {
		PID: "17",
		upTime: "5",
		smallBlind: "4000",
		bigBlind: "8000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["18"] = {
		PID: "18",
		upTime: "5",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["19"] = {
		PID: "19",
		upTime: "5",
		smallBlind: "6000",
		bigBlind: "12000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["20"] = {
		PID: "20",
		upTime: "5",
		smallBlind: "8000",
		bigBlind: "16000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["21"] = {
		PID: "21",
		upTime: "5",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["22"] = {
		PID: "22",
		upTime: "5",
		smallBlind: "12000",
		bigBlind: "24000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["23"] = {
		PID: "23",
		upTime: "5",
		smallBlind: "15000",
		bigBlind: "30000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["24"] = {
		PID: "24",
		upTime: "5",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["25"] = {
		PID: "25",
		upTime: "5",
		smallBlind: "25000",
		bigBlind: "50000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["26"] = {
		PID: "26",
		upTime: "5",
		smallBlind: "30000",
		bigBlind: "60000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["27"] = {
		PID: "27",
		upTime: "5",
		smallBlind: "40000",
		bigBlind: "80000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["28"] = {
		PID: "28",
		upTime: "5",
		smallBlind: "50000",
		bigBlind: "10000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Ante222":[function(require,module,exports){
"use strict";
cc._RF.push(module, '24ec7mht4tLo6NEg1ub7hz6', 'Ante222');
// Scripts/GameData/config/Ante222.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		upTime: "5",
		smallBlind: "50",
		bigBlind: "100",
		ante: "0",
		rebuyCost: "50000",
		rebuyValue: "10000",
		restTime: "0"
};
data["2"] = {
		PID: "2",
		upTime: "5",
		smallBlind: "75",
		bigBlind: "150",
		ante: "0",
		rebuyCost: "50000",
		rebuyValue: "10000",
		restTime: "0"
};
data["3"] = {
		PID: "3",
		upTime: "5",
		smallBlind: "100",
		bigBlind: "200",
		ante: "25",
		rebuyCost: "50000",
		rebuyValue: "10000",
		restTime: "1"
};
data["4"] = {
		PID: "4",
		upTime: "5",
		smallBlind: "150",
		bigBlind: "300",
		ante: "25",
		rebuyCost: "50000",
		rebuyValue: "10000",
		restTime: "0"
};
data["5"] = {
		PID: "5",
		upTime: "5",
		smallBlind: "200",
		bigBlind: "400",
		ante: "50",
		rebuyCost: "50000",
		rebuyValue: "10000",
		restTime: "1"
};
data["6"] = {
		PID: "6",
		upTime: "5",
		smallBlind: "300",
		bigBlind: "600",
		ante: "75",
		rebuyCost: "50000",
		rebuyValue: "10000",
		restTime: "0"
};
data["7"] = {
		PID: "7",
		upTime: "5",
		smallBlind: "400",
		bigBlind: "800",
		ante: "100",
		rebuyCost: "50000",
		rebuyValue: "20000",
		restTime: "1"
};
data["8"] = {
		PID: "8",
		upTime: "5",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "100",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["9"] = {
		PID: "9",
		upTime: "5",
		smallBlind: "600",
		bigBlind: "1200",
		ante: "200",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["10"] = {
		PID: "10",
		upTime: "5",
		smallBlind: "800",
		bigBlind: "1600",
		ante: "200",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["11"] = {
		PID: "11",
		upTime: "5",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["12"] = {
		PID: "12",
		upTime: "5",
		smallBlind: "1200",
		bigBlind: "2400",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["13"] = {
		PID: "13",
		upTime: "5",
		smallBlind: "1500",
		bigBlind: "3000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["14"] = {
		PID: "14",
		upTime: "5",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "400",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["15"] = {
		PID: "15",
		upTime: "5",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "500",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["16"] = {
		PID: "16",
		upTime: "5",
		smallBlind: "3000",
		bigBlind: "6000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["17"] = {
		PID: "17",
		upTime: "5",
		smallBlind: "4000",
		bigBlind: "8000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["18"] = {
		PID: "18",
		upTime: "5",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["19"] = {
		PID: "19",
		upTime: "5",
		smallBlind: "6000",
		bigBlind: "12000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["20"] = {
		PID: "20",
		upTime: "5",
		smallBlind: "8000",
		bigBlind: "16000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["21"] = {
		PID: "21",
		upTime: "5",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["22"] = {
		PID: "22",
		upTime: "5",
		smallBlind: "12000",
		bigBlind: "24000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["23"] = {
		PID: "23",
		upTime: "5",
		smallBlind: "15000",
		bigBlind: "30000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["24"] = {
		PID: "24",
		upTime: "5",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["25"] = {
		PID: "25",
		upTime: "5",
		smallBlind: "25000",
		bigBlind: "50000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["26"] = {
		PID: "26",
		upTime: "5",
		smallBlind: "30000",
		bigBlind: "60000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["27"] = {
		PID: "27",
		upTime: "5",
		smallBlind: "40000",
		bigBlind: "80000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["28"] = {
		PID: "28",
		upTime: "5",
		smallBlind: "50000",
		bigBlind: "10000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Ante223":[function(require,module,exports){
"use strict";
cc._RF.push(module, '640abw31JpMc5u9wac7GsOL', 'Ante223');
// Scripts/GameData/config/Ante223.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		upTime: "5",
		smallBlind: "50",
		bigBlind: "100",
		ante: "0",
		rebuyCost: "300000",
		rebuyValue: "15000",
		restTime: "0"
};
data["2"] = {
		PID: "2",
		upTime: "5",
		smallBlind: "75",
		bigBlind: "150",
		ante: "0",
		rebuyCost: "300000",
		rebuyValue: "15000",
		restTime: "0"
};
data["3"] = {
		PID: "3",
		upTime: "5",
		smallBlind: "100",
		bigBlind: "200",
		ante: "25",
		rebuyCost: "300000",
		rebuyValue: "15000",
		restTime: "1"
};
data["4"] = {
		PID: "4",
		upTime: "5",
		smallBlind: "150",
		bigBlind: "300",
		ante: "25",
		rebuyCost: "300000",
		rebuyValue: "15000",
		restTime: "0"
};
data["5"] = {
		PID: "5",
		upTime: "5",
		smallBlind: "200",
		bigBlind: "400",
		ante: "50",
		rebuyCost: "300000",
		rebuyValue: "15000",
		restTime: "1"
};
data["6"] = {
		PID: "6",
		upTime: "5",
		smallBlind: "300",
		bigBlind: "600",
		ante: "75",
		rebuyCost: "300000",
		rebuyValue: "15000",
		restTime: "0"
};
data["7"] = {
		PID: "7",
		upTime: "5",
		smallBlind: "400",
		bigBlind: "800",
		ante: "100",
		rebuyCost: "300000",
		rebuyValue: "30000",
		restTime: "1"
};
data["8"] = {
		PID: "8",
		upTime: "5",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "100",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["9"] = {
		PID: "9",
		upTime: "5",
		smallBlind: "600",
		bigBlind: "1200",
		ante: "200",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["10"] = {
		PID: "10",
		upTime: "5",
		smallBlind: "800",
		bigBlind: "1600",
		ante: "200",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["11"] = {
		PID: "11",
		upTime: "5",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["12"] = {
		PID: "12",
		upTime: "5",
		smallBlind: "1200",
		bigBlind: "2400",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["13"] = {
		PID: "13",
		upTime: "5",
		smallBlind: "1500",
		bigBlind: "3000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["14"] = {
		PID: "14",
		upTime: "5",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "400",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["15"] = {
		PID: "15",
		upTime: "5",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "500",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["16"] = {
		PID: "16",
		upTime: "5",
		smallBlind: "3000",
		bigBlind: "6000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["17"] = {
		PID: "17",
		upTime: "5",
		smallBlind: "4000",
		bigBlind: "8000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["18"] = {
		PID: "18",
		upTime: "5",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["19"] = {
		PID: "19",
		upTime: "5",
		smallBlind: "6000",
		bigBlind: "12000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["20"] = {
		PID: "20",
		upTime: "5",
		smallBlind: "8000",
		bigBlind: "16000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["21"] = {
		PID: "21",
		upTime: "5",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["22"] = {
		PID: "22",
		upTime: "5",
		smallBlind: "12000",
		bigBlind: "24000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["23"] = {
		PID: "23",
		upTime: "5",
		smallBlind: "15000",
		bigBlind: "30000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["24"] = {
		PID: "24",
		upTime: "5",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["25"] = {
		PID: "25",
		upTime: "5",
		smallBlind: "25000",
		bigBlind: "50000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["26"] = {
		PID: "26",
		upTime: "5",
		smallBlind: "30000",
		bigBlind: "60000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["27"] = {
		PID: "27",
		upTime: "5",
		smallBlind: "40000",
		bigBlind: "80000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["28"] = {
		PID: "28",
		upTime: "5",
		smallBlind: "50000",
		bigBlind: "10000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Ante230":[function(require,module,exports){
"use strict";
cc._RF.push(module, '02311Dfu31Fz64EmgxJm3B0', 'Ante230');
// Scripts/GameData/config/Ante230.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		upTime: "3",
		smallBlind: "25",
		bigBlind: "50",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["2"] = {
		PID: "2",
		upTime: "3",
		smallBlind: "50",
		bigBlind: "100",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["3"] = {
		PID: "3",
		upTime: "3",
		smallBlind: "150",
		bigBlind: "300",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["4"] = {
		PID: "4",
		upTime: "3",
		smallBlind: "200",
		bigBlind: "400",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["5"] = {
		PID: "5",
		upTime: "3",
		smallBlind: "250",
		bigBlind: "500",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["6"] = {
		PID: "6",
		upTime: "3",
		smallBlind: "350",
		bigBlind: "700",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["7"] = {
		PID: "7",
		upTime: "3",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["8"] = {
		PID: "8",
		upTime: "3",
		smallBlind: "750",
		bigBlind: "1500",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["9"] = {
		PID: "9",
		upTime: "3",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "5000",
		restTime: "0"
};
data["10"] = {
		PID: "10",
		upTime: "3",
		smallBlind: "1500",
		bigBlind: "3000",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "10000",
		restTime: "0"
};
data["11"] = {
		PID: "11",
		upTime: "3",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["12"] = {
		PID: "12",
		upTime: "3",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["13"] = {
		PID: "13",
		upTime: "3",
		smallBlind: "3000",
		bigBlind: "6000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["14"] = {
		PID: "14",
		upTime: "3",
		smallBlind: "4000",
		bigBlind: "8000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["15"] = {
		PID: "15",
		upTime: "3",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["16"] = {
		PID: "16",
		upTime: "3",
		smallBlind: "6000",
		bigBlind: "12000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["17"] = {
		PID: "17",
		upTime: "3",
		smallBlind: "8000",
		bigBlind: "16000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["18"] = {
		PID: "18",
		upTime: "3",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["19"] = {
		PID: "19",
		upTime: "3",
		smallBlind: "12000",
		bigBlind: "24000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["20"] = {
		PID: "20",
		upTime: "3",
		smallBlind: "15000",
		bigBlind: "30000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["21"] = {
		PID: "21",
		upTime: "3",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["22"] = {
		PID: "22",
		upTime: "3",
		smallBlind: "25000",
		bigBlind: "50000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["23"] = {
		PID: "23",
		upTime: "3",
		smallBlind: "30000",
		bigBlind: "60000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["24"] = {
		PID: "24",
		upTime: "3",
		smallBlind: "40000",
		bigBlind: "80000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["25"] = {
		PID: "25",
		upTime: "3",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "0",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Ante250":[function(require,module,exports){
"use strict";
cc._RF.push(module, '24433VliytI8L4bcAOtU4/4', 'Ante250');
// Scripts/GameData/config/Ante250.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		upTime: "5",
		smallBlind: "25",
		bigBlind: "50",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "10000",
		restTime: "0"
};
data["2"] = {
		PID: "2",
		upTime: "5",
		smallBlind: "50",
		bigBlind: "100",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "10000",
		restTime: "0"
};
data["3"] = {
		PID: "3",
		upTime: "5",
		smallBlind: "150",
		bigBlind: "300",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "10000",
		restTime: "0"
};
data["4"] = {
		PID: "4",
		upTime: "5",
		smallBlind: "200",
		bigBlind: "400",
		ante: "0",
		rebuyCost: "10000",
		rebuyValue: "10000",
		restTime: "0"
};
data["5"] = {
		PID: "5",
		upTime: "5",
		smallBlind: "250",
		bigBlind: "500",
		ante: "50",
		rebuyCost: "10000",
		rebuyValue: "10000",
		restTime: "0"
};
data["6"] = {
		PID: "6",
		upTime: "5",
		smallBlind: "350",
		bigBlind: "700",
		ante: "70",
		rebuyCost: "10000",
		rebuyValue: "20000",
		restTime: "0"
};
data["7"] = {
		PID: "7",
		upTime: "5",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "100",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["8"] = {
		PID: "8",
		upTime: "5",
		smallBlind: "750",
		bigBlind: "1500",
		ante: "150",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["9"] = {
		PID: "9",
		upTime: "5",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "200",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["10"] = {
		PID: "10",
		upTime: "5",
		smallBlind: "1500",
		bigBlind: "3000",
		ante: "300",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["11"] = {
		PID: "11",
		upTime: "5",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "400",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["12"] = {
		PID: "12",
		upTime: "5",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "500",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["13"] = {
		PID: "13",
		upTime: "5",
		smallBlind: "3000",
		bigBlind: "6000",
		ante: "600",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["14"] = {
		PID: "14",
		upTime: "5",
		smallBlind: "4000",
		bigBlind: "8000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["15"] = {
		PID: "15",
		upTime: "5",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "1000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["16"] = {
		PID: "16",
		upTime: "5",
		smallBlind: "6000",
		bigBlind: "12000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["17"] = {
		PID: "17",
		upTime: "5",
		smallBlind: "8000",
		bigBlind: "16000",
		ante: "2000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["18"] = {
		PID: "18",
		upTime: "5",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["19"] = {
		PID: "19",
		upTime: "5",
		smallBlind: "12000",
		bigBlind: "24000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["20"] = {
		PID: "20",
		upTime: "5",
		smallBlind: "15000",
		bigBlind: "30000",
		ante: "3000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["21"] = {
		PID: "21",
		upTime: "5",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["22"] = {
		PID: "22",
		upTime: "5",
		smallBlind: "25000",
		bigBlind: "50000",
		ante: "5000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["23"] = {
		PID: "23",
		upTime: "5",
		smallBlind: "30000",
		bigBlind: "60000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["24"] = {
		PID: "24",
		upTime: "5",
		smallBlind: "40000",
		bigBlind: "80000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["25"] = {
		PID: "25",
		upTime: "5",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "10000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["26"] = {
		PID: "26",
		upTime: "5",
		smallBlind: "60000",
		bigBlind: "120000",
		ante: "12000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["27"] = {
		PID: "27",
		upTime: "5",
		smallBlind: "80000",
		bigBlind: "160000",
		ante: "16000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["28"] = {
		PID: "28",
		upTime: "5",
		smallBlind: "100000",
		bigBlind: "200000",
		ante: "20000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["29"] = {
		PID: "29",
		upTime: "5",
		smallBlind: "120000",
		bigBlind: "240000",
		ante: "24000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["30"] = {
		PID: "30",
		upTime: "5",
		smallBlind: "150000",
		bigBlind: "300000",
		ante: "30000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["31"] = {
		PID: "31",
		upTime: "5",
		smallBlind: "200000",
		bigBlind: "400000",
		ante: "40000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["32"] = {
		PID: "32",
		upTime: "5",
		smallBlind: "250000",
		bigBlind: "500000",
		ante: "50000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["33"] = {
		PID: "33",
		upTime: "5",
		smallBlind: "300000",
		bigBlind: "600000",
		ante: "60000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["34"] = {
		PID: "34",
		upTime: "5",
		smallBlind: "350000",
		bigBlind: "700000",
		ante: "70000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["35"] = {
		PID: "35",
		upTime: "5",
		smallBlind: "400000",
		bigBlind: "800000",
		ante: "80000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["36"] = {
		PID: "36",
		upTime: "5",
		smallBlind: "500000",
		bigBlind: "1000000",
		ante: "100000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["37"] = {
		PID: "37",
		upTime: "5",
		smallBlind: "600000",
		bigBlind: "1200000",
		ante: "120000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
data["38"] = {
		PID: "38",
		upTime: "5",
		smallBlind: "700000",
		bigBlind: "1400000",
		ante: "140000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["39"] = {
		PID: "39",
		upTime: "5",
		smallBlind: "800000",
		bigBlind: "1600000",
		ante: "160000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["40"] = {
		PID: "40",
		upTime: "5",
		smallBlind: "1000000",
		bigBlind: "2000000",
		ante: "200000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["41"] = {
		PID: "41",
		upTime: "5",
		smallBlind: "1200000",
		bigBlind: "2400000",
		ante: "240000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["42"] = {
		PID: "42",
		upTime: "5",
		smallBlind: "1500000",
		bigBlind: "3000000",
		ante: "300000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "0"
};
data["43"] = {
		PID: "43",
		upTime: "5",
		smallBlind: "2000000",
		bigBlind: "4000000",
		ante: "400000",
		rebuyCost: "0",
		rebuyValue: "0",
		restTime: "1"
};
module.exports = data;

cc._RF.pop();
},{}],"BaseUIPanel":[function(require,module,exports){
"use strict";
cc._RF.push(module, '3216eX56PpAm4FVYOpymsIc', 'BaseUIPanel');
// Scripts/UI/BaseUIPanel.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {},

    onEnable: function onEnable() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.stopPropagationEvent, this.node);
        this.node.on(cc.Node.EventType.TOUCH_END, this.stopPropagationEvent, this.node);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.stopPropagationEvent, this.node);

        this.onOpenHandler();

        this.node.setPosition(0, 0);
    },

    onOpenHandler: function onOpenHandler() {},

    onDisable: function onDisable() {
        this.node.off(cc.Node.EventType.TOUCH_START, this.stopPropagationEvent, this.node);
        this.node.off(cc.Node.EventType.TOUCH_END, this.stopPropagationEvent, this.node);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.stopPropagationEvent, this.node);

        this.onDisableHandler();
    },

    onDisableHandler: function onDisableHandler() {},

    stopPropagationEvent: function stopPropagationEvent(_event) {
        _event.stopPropagation();
    }
});

cc._RF.pop();
},{}],"Betpokerrecord":[function(require,module,exports){
"use strict";
cc._RF.push(module, '88918419h1IKrOe7aoGNa3f', 'Betpokerrecord');
// Scripts/GameData/config/Betpokerrecord.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Number: "100",
		Money: "0"
};
data["2"] = {
		PID: "2",
		Number: "110",
		Money: "100000"
};
data["3"] = {
		PID: "3",
		Number: "120",
		Money: "100000"
};
data["4"] = {
		PID: "4",
		Number: "130",
		Money: "100000"
};
data["5"] = {
		PID: "5",
		Number: "140",
		Money: "100000"
};
data["6"] = {
		PID: "6",
		Number: "150",
		Money: "100000"
};
data["7"] = {
		PID: "7",
		Number: "160",
		Money: "100000"
};
data["8"] = {
		PID: "8",
		Number: "170",
		Money: "100000"
};
data["9"] = {
		PID: "9",
		Number: "180",
		Money: "100000"
};
data["10"] = {
		PID: "10",
		Number: "190",
		Money: "100000"
};
data["11"] = {
		PID: "11",
		Number: "200",
		Money: "100000"
};
module.exports = data;

cc._RF.pop();
},{}],"BtnResetState":[function(require,module,exports){
"use strict";
cc._RF.push(module, '4ab23zc8l5JS40IHpWnKC6D', 'BtnResetState');
// Scripts/Other/BtnResetState.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        curTarget: cc.Sprite,
        normalSprite: cc.SpriteFrame
    },

    // use this for initialization
    onLoad: function onLoad() {},

    onResetNormalState: function onResetNormalState() {
        if (!this.curTarget.node.active) return;
        var sprite = this.curTarget.getComponent("cc.Sprite");
        sprite.spriteFrame = this.normalSprite;
    }

});

cc._RF.pop();
},{}],"ButtonTouchEffect":[function(require,module,exports){
"use strict";
cc._RF.push(module, '24280w9GnBFNJdu7i7cixOt', 'ButtonTouchEffect');
// Scripts/UI/ButtonTouchEffect.js

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var UITools = require("UITools");
var CALLBACKMAXDEEP = 10;
var JS = cc.js;
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        transDuration: 0.1,
        pressedOpicity: 128,
        initOpacity: 255,
        configDeep: 5,
        eventTarget: cc.Node, //指定事件响应的节点 默认为脚本关联的节点
        effectTarget: cc.Node, //效果作用的节点(其子节点)
        effectTargetSelf: false, //是否作用于该节点
        replaceNodeWithOutButton: true, //如果字段为true 则关联组件未获取到button组件时 向该组件节点绑定触碰事件 实现效果(该节点的子节点为吞噬点击、触碰事件时有效)
        enableEffect: true

    },

    // use this for initialization
    onLoad: function onLoad() {
        this.initOpacity = this.node.opacity;
        if (this.enableEffect) {
            this.registerTouchEvent();
        }
    },
    onStart: function onStart() {},
    // called every frame, uncomment this function to activate update callback
    update: function update(dt) {
        if (this.node.parent) {
            var a = 2;
        }
    },
    onEnable: function onEnable() {
        if (this.enableEffect) {
            this.registerTouchEvent();
        }
    },

    onDisable: function onDisable() {
        if (this.enableEffect) {
            if (this.effectTarget) {
                this.setNodeOpacity(this.effectTarget, this.initOpacity, this.transDuration, this.configDeep);
            } else {
                this.setNodeOpacity(this.node, this.initOpacity, this.transDuration, this.configDeep);
            }
            this.unregisterTouchEvent();
        }
    },
    registerTouchEvent: function registerTouchEvent() {
        var self = this;
        if (self.node) {
            var button = null;
            if (UITools.UICheckValueIsValid(self.eventTarget)) {
                button = self.eventTarget.getComponent(cc.Button);
            } else {
                var button = self.getComponent(cc.Button);
            }
            if (button) {
                button.node.on(cc.Node.EventType.TOUCH_START, self.onTouchDown, self);
                button.node.on(cc.Node.EventType.TOUCH_END, self.onTouchUp, self);
                button.node.on(cc.Node.EventType.TOUCH_CANCEL, self.onTouchUp, self);
            } else {
                if (self.replaceNodeWithOutButton) {
                    self.node.on(cc.Node.EventType.TOUCH_START, self.onTouchDown, self);
                    self.node.on(cc.Node.EventType.TOUCH_END, self.onTouchUp, self);
                    self.node.on(cc.Node.EventType.TOUCH_CANCEL, self.onTouchUp, self);
                }
            }
        }
    },
    unregisterTouchEvent: function unregisterTouchEvent() {
        var self = this;
        if (self.node) {
            var button = self.getComponent(cc.Button);
            //如果目标组件含有button
            if (button) {
                button.node.off(cc.Node.EventType.TOUCH_START, self.onTouchDown, self);
                button.node.off(cc.Node.EventType.TOUCH_END, self.onTouchUp, self);
                button.node.off(cc.Node.EventType.TOUCH_CANCEL, self.onTouchUp, self);
            } else {
                if (self.replaceNodeWithOutButton) {
                    self.node.off(cc.Node.EventType.TOUCH_START, self.onTouchDown, self);
                    self.node.off(cc.Node.EventType.TOUCH_END, self.onTouchUp, self);
                    self.node.off(cc.Node.EventType.TOUCH_CANCEL, self.onTouchUp, self);
                }
            }
        }
    },
    onTouchDown: function onTouchDown(event) {
        this.setNodeOpacity(this.effectTarget ? this.effectTarget : event.target, this.pressedOpicity, this.transDuration, this.configDeep);
    },
    onTouchUp: function onTouchUp(event) {
        this.setNodeOpacity(this.effectTarget ? this.effectTarget : event.target, this.initOpacity, this.transDuration, this.configDeep);
    },
    setNodeOpacity: function setNodeOpacity(it, opacity, duration, max_deep, deep) {
        //参数无效 纠正
        if (!UITools.UICheckValueIsValid(deep)) {
            deep = 1;
        }
        if (!UITools.UICheckValueIsValid(opacity)) {
            opacity = 255;
        }
        if (!UITools.UICheckValueIsValid(duration)) {
            duration = 0;
        }
        if (!UITools.UICheckValueIsValid(max_deep)) {
            max_deep = 5;
        }
        //递归深度检查 如果递归深度大于最大递归深度 则不再递归 
        if (deep >= CALLBACKMAXDEEP || deep >= max_deep) {
            return null;
        }
        var node = null;
        //类型检查
        if (it && (typeof it === "undefined" ? "undefined" : _typeof(it)) == "object" && JS.isNumber(opacity) && JS.isNumber(duration) && JS.isNumber(max_deep)) {
            //获取操作节点
            if (it && it.getChildren) {
                node = it;
            } else {
                if (it.node) {
                    node = it.node;
                }
            }
        }
        //节点不为空 则执行逻辑
        if (node) {
            // var action = cc.fadeTo(duration, opacity)
            // if(node.stopAllActions && node.runAction)
            // {
            //     node.stopAllActions();
            //     node.runAction(action); 
            // }
            if (this.effectTargetSelf == true) {
                var action = cc.fadeTo(duration, opacity);
                if (node.stopAllActions && node.runAction) ;
                {
                    node.stopAllActions();
                    node.runAction(action);
                }
            } else {
                var children = node.getChildren();
                if (children && children.length > 0) {
                    for (var key in children) {
                        var child = children[key];
                        //暂时放弃动画
                        if (!child.active || UITools.UICheckValueIsValid(node.enabled) && !node.enabled) {
                            child.opacity = opacity;
                        } else {
                            var action = cc.fadeTo(duration, opacity);
                            if (child.stopAllActions && child.runAction) ;
                            {
                                child.stopAllActions();
                                child.runAction(action);
                            }
                        }
                        this.setNodeOpacity(children[key], opacity, duration, max_deep, deep + 1);
                    }
                } else {
                    return null;
                }
            }
        }
    }
});

cc._RF.pop();
},{"UITools":"UITools"}],"Calculator":[function(require,module,exports){
"use strict";
cc._RF.push(module, '46d7a1DdeJITJls17j8GFj4', 'Calculator');
// Scripts/UI/Component/Calculator.js

"use strict";

var UITools = require("UITools");

cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        amount_txt: cc.Label,
        parentAmount_txt: cc.Label,
        parentNode: cc.Node,
        initNum: true,
        addBtn: cc.Button, //reInteractable the add & reduce if u have
        reduceBtn: cc.Button
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.stopPropagationHandler, this);
        this.node.on(cc.Node.EventType.MOUSE_WHEEL, this.stopPropagationHandler, this);
        this.errorMsg = UITools.GetGameErrorCodeByID(10701);
        this.errotMsg_2 = UITools.GetGameErrorCodeByID(11001);
    },

    stopPropagationHandler: function stopPropagationHandler(_event) {
        _event.stopPropagation();
    },

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },

    onCalculating: function onCalculating(_event, _amount) {
        Global.musicManager.PlayClickSound();

        if (this.initNum == true && _amount == 0) {
            UITools.GamePublicTipsLabel("输入中不能以零开头");
            return;
        }

        var isOutOfRang = false;
        if (_amount >= 0 && _amount < 10) {
            //0----9
            if (this.initNum == true) {
                this.amount_txt.string = "" + _amount;
                this.initNum = false;
            } else {
                this.amount_txt.string += "" + _amount;
            }

            //错误#3037变为#3228
            //The callback used by filter the count defined outside where it's parent's class
            if (this.filterCountCallback != null) {
                var needFilterCount = parseInt(this.amount_txt.string);
                var resultAmount = this.filterCountCallback(needFilterCount, this.parentNode);
                if (resultAmount != -1) {
                    if (resultAmount <= 999) UITools.GamePublicTipsLabel(this.errorMsg.tip);
                    if (resultAmount <= 0) resultAmount = 1;
                    this.amount_txt.string = "" + resultAmount;
                    isOutOfRang = true;
                }
            }

            var amount = +this.amount_txt.string;
            if (amount > 999) {
                this.amount_txt.string = "999";
                UITools.GamePublicTipsLabel("超出最大数量");
            }
        } else if (_amount > 10) {
            //确定按钮
            this.hidePanel();
            this.parentAmount_txt.string = this.amount_txt.string;
            Global.gameEventManager.onDispatchEvent(this.node, 'calculator-changeAmount', { amount: +this.amount_txt.string });
        } else {
            //撤销按钮
            this.amount_txt.string = this.amount_txt.string.substr(0, this.amount_txt.string.length - 1);
            if (this.amount_txt.string.length <= 0) {
                this.amount_txt.string = "1";
                this.initNum = true;
                UITools.GamePublicTipsLabel(this.errotMsg_2.tip);
            }
        }
    },

    showPanel: function showPanel(_amount, _filterCountCallback) {
        this.node.active = true;
        this.amount_txt.string = _amount;
        this.initNum = true;

        this.filterCountCallback = _filterCountCallback;
    },

    hidePanel: function hidePanel() {
        this.node.active = false;
        if (this.addBtn == null) return;
        this.addBtn.interactable = this.reduceBtn.interactable = true;
    }
});

cc._RF.pop();
},{"UITools":"UITools"}],"CardItemControl":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e23bfzA5EZCVq7AVYLNzl77', 'CardItemControl');
// Scripts/UI/GameFrightRoom/CardItemControl.js

'use strict';

/*
    zjh
 */
var UITools = require('UITools');
var Config = require("Config");

cc.Class({
    extends: cc.Component,

    properties: {
        ItemIcon: cc.Sprite,
        Itembright: cc.Sprite,
        ItemMask: cc.Sprite,
        ItemBg: cc.Sprite,
        BgAniPos: cc.p(0, 0), //背景动画播放的开始位置
        BgIsPlay: false, //背景是否播放发牌动画
        CardNum: 0, //牌数据
        IsPlayBg1Ani: false, //是否播放背景1动画
        ItemBg1: cc.Sprite, //背景1资源
        ItemBgStarPos: cc.p(0, 0), //开始位置
        ItemBgEndPos: cc.p(0, 0) },

    // use this for initialization
    onLoad: function onLoad() {},

    start: function start() {
        this.curNodeStartPos = cc.p(this.node.x, this.node.y);
        this.curNodeEndPos = cc.p(this.node.x, this.node.y + 20);
        this._onInit();
        this.onSetBgIcon();
    },
    // 设置起始和结束坐标
    setAnimationPos: function setAnimationPos(starPos, endPos) {
        this.ItemBgStarPos = starPos;
        this.ItemBgEndPos = endPos;
    },

    // 清理所有牌的显示
    allClearCardData: function allClearCardData() {
        if (this.CardNum > 0) {
            // cc.log("清理卡牌显示this.CardNum："+this.CardNum);
        }
        this.ItemIcon.node.stopAllActions();
        this.ItemBg.node.stopAllActions();
        this.node.stopAllActions();
        if (this.ItemBg1) {
            this.ItemBg1.node.stopAllActions();
        }
        this.onClearData();
    },

    // 隐藏所有的卡牌显示
    onClearData: function onClearData() {
        this.CardNum = 0;
        this.ItemIcon.node.setScale(1, 1);
        this.ItemBg.node.setScale(0, 1);
        if (this.ItemBg1) {
            UITools.onSetNodePosition(this.ItemBg1.node, this.ItemBgStarPos);
        }
        UITools.onSetNodeVisible(this.ItemMask.node, false);
        UITools.onSetNodeVisible(this.Itembright.node, false);
        UITools.onSetNodeVisible(this.ItemBg.node, false);
        UITools.onSetNodeVisible(this.ItemIcon.node, false);
        if (this.ItemBg1) {
            UITools.onSetNodeVisible(this.ItemBg1.node, false);
        }
        if (this.curNodeStartPos) {
            UITools.onSetNodePosition(this.node, this.curNodeStartPos);
        }
    },

    // 设置牌桌数据
    onSetData: function onSetData(cardNum, isPlay, isSound) {
        // this.node.scale = 0.85;
        this.onSetMaskShow(false);
        this.onSetIconData(cardNum);
        if (true == isPlay && true == this.BgIsPlay) {
            if (isSound) Global.musicManager.PlayNameSound('ggpai');
            this.onPlayBgMoveAni();
        } else {
            this.onPlayOpenAnimation(isPlay);
        }
    },

    // 只为牌局回顾的地方使用
    onSetCardDataBgShow: function onSetCardDataBgShow(cardNum) {
        var self = this;

        this.CardNum = cardNum;

        if (cardNum == 0) {
            UITools.onSetNodeVisible(this.ItemBg.node, true);
            UITools.onSetNodeVisible(this.ItemIcon.node, false);
            UITools.onSetNodeVisible(this.ItemMask.node, false);
            return;
        }

        this.setIconData(cardNum);
        UITools.onSetNodeVisible(this.ItemMask.node, false);
        UITools.onSetNodeVisible(this.Itembright.node, false);
        if (this.ItemBg1) {
            UITools.onSetNodeVisible(this.ItemBg1.node, false);
        }

        UITools.onSetNodeVisible(this.ItemBg.node, false);
    },

    onSetIconData: function onSetIconData(cardNum) {
        this._isOpenCard = false;
        if (cardNum <= 0) {
            if (this.resetPos) {
                UITools.onSetNodePosition(this.node, this.resetPos);
            }
            this.setCardBgIsShow(true);
            return;
        }
        if (this.CardNum == cardNum) {
            UITools.onSetNodeVisible(this.ItemIcon.node, true);
            this.ItemIcon.node.setScale(1, 1);
            return;
        }
        if (this.resetPos) {
            UITools.onSetNodePosition(this.node, this.resetPos);
        }
        this.CardNum = cardNum;
        this.setIconData(cardNum);
    },

    setIconData: function setIconData(cardNum) {
        if (!cardNum) {
            cc.log("卡牌数据错误 不加载 cardNum " + cardNum);
            return;
        }
        var self = this;
        var path = 'Textures/Cards/card';
        Global.resourceManager.loadRes(path + cardNum, function (resData) {
            // cc.log("加载卡牌资源成功 cardNum " + cardNum)
            UITools.onSetNodeVisible(self.ItemIcon.node, true);
            var spf = new cc.SpriteFrame(resData);
            self.ItemIcon.spriteFrame = spf;
        });
    },

    //获取牌数据
    GetCardNum: function GetCardNum() {
        return this.CardNum;
    },

    // 卡牌初始化
    _onInit: function _onInit() {
        // 是否向上移动
        this._isUp = false;
        this.resetPos = cc.p(this.node.x, this.node.y);
        // this.CardNum = 0;
    },

    // 更新卡牌数据
    onUpdateCard: function onUpdateCard() {},

    // 开牌
    onOpenCard: function onOpenCard(cardNum) {
        // this.setCardBgIsShow(false);
        // this.allClearCardData();
        UITools.onSetNodeVisible(this.ItemMask.node, false);
        UITools.onSetNodeVisible(this.ItemBg.node, false);
        if (this.ItemBg1) {
            UITools.onSetNodeVisible(this.ItemBg1.node, false);
        }
        if (cardNum > 0) {
            if (this.CardNum == cardNum) {
                UITools.onSetNodeVisible(this.ItemMask.node, false);
                UITools.onSetNodeVisible(this.ItemIcon.node, true);
                this.ItemIcon.node.setScale(1, 1);
                this.ItemBg.node.setScale(0, 1);
            }
            // console.log("this._isOpenCard ::: ",this._isOpenCard);
            this.CardNum = cardNum;
            if (false == this._isOpenCard) {
                this._isOpenCard = true;
                this.setIconData(cardNum);
                this.onPlayOpenAnimation(true);
            } else {
                this.setIconData(cardNum);
                UITools.onSetNodeVisible(this.ItemIcon.node, true);
                UITools.onSetNodeVisible(this.ItemBg.node, false);
            }
        } else {
            UITools.onSetNodeVisible(this.ItemIcon.node, false);
            UITools.onSetNodeVisible(this.ItemBg.node, true);
            this.ItemBg.node.setScale(1, 1);
        }
    },

    // 播放开牌动画
    onPlayOpenAnimation: function onPlayOpenAnimation(isPlay) {
        UITools.onSetNodeVisible(this.ItemMask.node, false);
        UITools.onSetNodeVisible(this.ItemIcon.node, true);
        this.ItemIcon.node.setScale(1, 1);
        this.ItemBg.node.setScale(0, 1);
        if (true == isPlay) {
            this.ItemBg.node.setScale(1, 1);
            this.ItemIcon.node.setScale(0, 1);
            UITools.onSetNodeVisible(this.ItemBg.node, true);
            this.onPlayCreateAni();
            return;
        }
    },

    // 播放创建动画
    onPlayCreateAni: function onPlayCreateAni() {
        this.ItemBg.node.stopAllActions();
        var self = this;
        var finished = cc.callFunc(function (target) {
            UITools.onSetNodeVisible(self.ItemIcon.node, true);
            var action = cc.scaleTo(0.1, 1, 1);
            self.ItemIcon.node.runAction(action);
        }, self);
        var action = cc.sequence(cc.scaleTo(0.2, 0, 1), finished);
        this.ItemBg.node.runAction(action);
    },

    // 播放向上滑动动画
    onPlayerAni: function onPlayerAni() {
        if (false == this.ItemIcon.node.active) return;
        if (this.curNodeStartPos) {
            UITools.onSetNodePosition(this.node, this.curNodeStartPos);
        }
        var action = cc.moveTo(0.2, this.curNodeEndPos);
        if (true == this._isUp) {
            UITools.onSetNodeVisible(this.Itembright.node, false);
            action = cc.moveTo(0.2, this.curNodeStartPos);
        } else {
            UITools.onSetNodeVisible(this.Itembright.node, true);
        }
        this.node.runAction(action);
        this._isUp = !this._isUp;
    },

    //重置牌位置
    ResetCrdPos: function ResetCrdPos() {
        if (true == this._isUp) {
            UITools.onSetNodeVisible(this.Itembright.node, false);
            // var action = cc.moveTo(0.2,cc.p(this.node.x, this.node.y + moveValue));
            // this.node.runAction(action);
            this._isUp = !this._isUp;
        }
        if (this.curNodeStartPos) {
            UITools.onSetNodePosition(this.node, this.curNodeStartPos);
        }
        this.CardNum = 0;
        this.ItemBg.node.setScale(0, 1);
        this.ItemIcon.node.setScale(1, 1);

        if (this.ItemBg1) {
            UITools.onSetNodePosition(this.ItemBg1.node, this.ItemBgStarPos);
        }
        this.onSetMaskShow(false);
        this._isOpenCard = false;
    },

    // 设置mask的显示
    onSetMaskShow: function onSetMaskShow(bShow) {
        // if(false == this.ItemIcon.node.active)return;
        UITools.onSetNodeVisible(this.ItemMask.node, bShow);
    },

    // 播放背景移动动画
    onPlayBgMoveAni: function onPlayBgMoveAni() {
        // console.log("onPlayBgMoveAni === ");
        this.ItemBg.node.stopAllActions();
        UITools.onSetNodeVisible(this.ItemBg.node, true);
        this.ItemIcon.node.setScale(0, 1);
        this.ItemBg.node.setScale(0, 0);
        UITools.onSetNodeVisible(this.ItemIcon.node, false);
        UITools.onSetNodePosition(this.ItemBg.node, this.BgAniPos);
        var self = this;
        var finished = cc.callFunc(function (target) {
            self.onPlayCreateAni();
        }, self);
        var sequece = cc.sequence(cc.spawn(cc.moveTo(0.2, cc.p(0, 0)), cc.scaleTo(0.2, 1, 1)), finished);
        this.ItemBg.node.runAction(sequece);
    },

    // 设置背景2资源是否显示 播放发牌动画
    setCardBgIsShow: function setCardBgIsShow(isShow) {
        // 跳到此处
        if (this.ItemBg1) {
            if (true == isShow) {
                this.onClearData();
                this.onPlayDealAni();
            } else {
                UITools.onSetNodeVisible(this.ItemBg1.node, isShow);
            }
        }
    },
    // 设置
    onSetBgResPositionState: function onSetBgResPositionState(isShow) {
        if (this.ItemBg1) {
            UITools.onSetNodeVisible(this.ItemBg1.node, isShow);
            UITools.onSetNodePosition(this.ItemBg1.node, this.ItemBgEndPos);
        }
    },

    // 发牌动画
    onPlayDealAni: function onPlayDealAni() {
        var self = this;
        // console.log("onPlayDealAni == ",this.ItemBg1.node);
        this.ItemBg1.node.stopAllActions();
        UITools.onSetNodeVisible(this.ItemBg1.node, true);
        // console.log("ItemBgStarPos = , = ItemBgEndPos == ",this.ItemBgStarPos,this.ItemBgEndPos);
        UITools.onSetNodePosition(this.ItemBg1.node, this.ItemBgStarPos);
        var finished = cc.callFunc(function (target) {
            UITools.onSetNodePosition(self.ItemBg1.node, self.ItemBgEndPos);
        }, self);
        var sequece = cc.sequence(cc.moveTo(0.1, this.ItemBgEndPos), finished);
        this.ItemBg1.node.runAction(sequece);
    },
    // 播放发牌的声音
    playCardSound: function playCardSound() {
        Global.musicManager.PlayNameSound('fapai');
    },

    // 获取是否向上亮牌的状态
    getIsUpState: function getIsUpState() {
        return this._isUp;
    },

    // 玩家自己的播放卡牌动画
    onPlayerSelfPlayCard: function onPlayerSelfPlayCard(cardNum) {
        this.onSetIconData(cardNum);
        this.onPlayBgMoveAni();
    },

    // 设置图标的显示
    onSetIconStateShow: function onSetIconStateShow(isShow) {
        if (isShow) {
            this.ItemIcon.node.setScale(1, 1);
        }
        UITools.onSetNodeVisible(this.ItemIcon.node, isShow);
    },

    //设置背景资源
    onSetBgIcon: function onSetBgIcon() {
        var self = this;
        if (self.ItemBg) {
            var path = 'Textures/Cards/cards_back';
            Global.resourceManager.loadRes(path, function (resData) {
                var spf = new cc.SpriteFrame(resData);
                self.ItemBg.spriteFrame = spf;
            });
        }
    }

});

cc._RF.pop();
},{"Config":"Config","UITools":"UITools"}],"CardTypePanel":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'b1569cyf4tGAakb8Q/ARNV8', 'CardTypePanel');
// Scripts/UI/GameFrightRoom/CardTypePanel.js

"use strict";

var UITools = require("UITools");
cc.Class({
    extends: cc.Component,

    properties: {},

    // use this for initialization
    onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.stopPropagationHandler, this); //阻止鼠标穿透
    },

    stopPropagationHandler: function stopPropagationHandler(_event) {
        _event.stopPropagation();
    },

    onClickBack: function onClickBack(evn) {
        Global.uiManager.closePanel(Global.uiManager.CARDTYPE_PANEL);
    }

});

cc._RF.pop();
},{"UITools":"UITools"}],"CardTypeSelectJS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '768a3JPRRFNVKHrA4q9NJUx', 'CardTypeSelectJS');
// Scripts/Tools/CardTypeSelectJS.js

'use strict';

var UITools = require('UITools');

var ImageResConfig = require('ImgRes');
cc.Class({
    extends: cc.Component,

    properties: {
        selectIcon: cc.Sprite,
        maskIcon: cc.Sprite,
        lodkIcon: cc.Sprite,
        itemType: 0
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.touchClickEnd, this);
    },

    // 设置父对象和控制器类型
    onSetParentCtrl: function onSetParentCtrl(parent) {
        this.parentControl = parent;

        //默认选中每行的第一个
        if (this.itemType == 1) {
            this.touchEnd();
        } else if (this.itemType == 5) {
            this.touchEnd();
        }
    },

    //读表，设置纸牌封面
    setContent: function setContent(IconsData) {

        //从服务器更新高亮位置
        if (this.itemType <= 4) {
            if (Global.playerInfo.settings.cardFace != null) {
                if (Global.playerInfo.settings.cardFace == IconsData.PID) {
                    this.touchEnd();
                }
            }
        } else {
            if (Global.playerInfo.settings.cardBack != null) {
                if (Global.playerInfo.settings.cardBack == IconsData.PID) {
                    this.touchEnd();
                }
            }
        }

        //Icons.js->ImgRes.js(读表设置)
        this.iconData = IconsData;
        var icon = ImageResConfig[IconsData.Icon].Img;
        if (icon != undefined && icon != null) {
            UITools.SetSpriteImg(this.node.getComponent("cc.Sprite"), "Textures/" + icon);
        }
    },

    touchClickEnd: function touchClickEnd() {

        Global.musicManager.PlayClickSound();
        if (this.parentControl) {
            if (this.itemType <= 4) {
                this.parentControl.onTonchFrontCardSelect(this, this.isLockState, this.iconData);
            } else {
                this.parentControl.onTonchBgCardSelect(this, this.isLockState, this.iconData);
            }
        }
    },

    // 更新是否锁住的状态
    onUpdateLockState: function onUpdateLockState(isLock) {
        this.isLockState = isLock;
        if (true == isLock) {
            if (this.maskIcon && this.lodkIcon) {
                UITools.onSetNodeVisible(this.maskIcon.node, true);
                UITools.onSetNodeVisible(this.lodkIcon.node, true);
            }
        } else {
            if (this.maskIcon && this.lodkIcon) {
                UITools.onSetNodeVisible(this.maskIcon.node, false);
                UITools.onSetNodeVisible(this.lodkIcon.node, false);
            }
        }
    },

    // 点击
    touchEnd: function touchEnd() {

        if (this.parentControl) {
            if (this.itemType <= 4) {
                this.parentControl.onTonchFrontCardSelect(this, this.isLockState, null);
            } else {
                this.parentControl.onTonchBgCardSelect(this, this.isLockState, null);
            }
        }
    },

    //  设置卡牌的选择状态
    onSetSelectState: function onSetSelectState(isShow) {
        if (this.selectIcon) {
            UITools.onSetNodeVisible(this.selectIcon.node, isShow);
        }
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RF.pop();
},{"ImgRes":"ImgRes","UITools":"UITools"}],"Champ":[function(require,module,exports){
"use strict";
cc._RF.push(module, '1bf993KV7dH6rgrXStRSPqP', 'Champ');
// Scripts/GameData/config/Champ.js

"use strict";

var data = [];
data["1001"] = {
		PID: "1001",
		onlineTime: "0 1 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "1",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1002"] = {
		PID: "1002",
		onlineTime: "0 2 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1003"] = {
		PID: "1003",
		onlineTime: "0 3 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1004"] = {
		PID: "1004",
		onlineTime: "0 4 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1005"] = {
		PID: "1005",
		onlineTime: "0 5 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1006"] = {
		PID: "1006",
		onlineTime: "0 6 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1007"] = {
		PID: "1007",
		onlineTime: "0 7 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1008"] = {
		PID: "1008",
		onlineTime: "0 8 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1009"] = {
		PID: "1009",
		onlineTime: "0 9 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1010"] = {
		PID: "1010",
		onlineTime: "0 10 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1011"] = {
		PID: "1011",
		onlineTime: "0 11 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1012"] = {
		PID: "1012",
		onlineTime: "0 12 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1013"] = {
		PID: "1013",
		onlineTime: "0 13 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1014"] = {
		PID: "1014",
		onlineTime: "0 14 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1015"] = {
		PID: "1015",
		onlineTime: "0 15 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1016"] = {
		PID: "1016",
		onlineTime: "0 16 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1017"] = {
		PID: "1017",
		onlineTime: "0 17 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1018"] = {
		PID: "1018",
		onlineTime: "0 18 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1019"] = {
		PID: "1019",
		onlineTime: "0 19 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1020"] = {
		PID: "1020",
		onlineTime: "0 20 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1021"] = {
		PID: "1021",
		onlineTime: "0 21 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1022"] = {
		PID: "1022",
		onlineTime: "0 22 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1023"] = {
		PID: "1023",
		onlineTime: "0 23 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1024"] = {
		PID: "1024",
		onlineTime: "0 0 * * *",
		applyTime: "1,days",
		applyDelay: "0",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "",
		beanCost: "",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "5000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "201",
		dynamicScheme: "",
		blindScheme: "230",
		rebuyNum: "2",
		icon: "8005",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE日常免费赛",
		desc: "ACE日常免费赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1025"] = {
		PID: "1025",
		onlineTime: "0 14 * * *",
		applyTime: "1,days",
		applyDelay: "30",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "500000",
		beanCost: "400000",
		rewardCost: "",
		serviceCost: "",
		ticketId: "1906|11906",
		ticketNum: "1",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "10000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "202",
		dynamicScheme: "",
		blindScheme: "250",
		rebuyNum: "2",
		icon: "8006",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "5000万游戏币快速赛",
		desc: "5000万游戏币快速赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1026"] = {
		PID: "1026",
		onlineTime: "0 16 * * *",
		applyTime: "1,days",
		applyDelay: "30",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "500000",
		beanCost: "400000",
		rewardCost: "",
		serviceCost: "",
		ticketId: "1906|11906",
		ticketNum: "1",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "10000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "202",
		dynamicScheme: "",
		blindScheme: "250",
		rebuyNum: "2",
		icon: "8006",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "5000万游戏币快速赛",
		desc: "5000万游戏币快速赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1027"] = {
		PID: "1027",
		onlineTime: "0 18 * * *",
		applyTime: "1,days",
		applyDelay: "30",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "500000",
		beanCost: "400000",
		rewardCost: "",
		serviceCost: "",
		ticketId: "1906|11906",
		ticketNum: "1",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "10000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "202",
		dynamicScheme: "",
		blindScheme: "250",
		rebuyNum: "2",
		icon: "8006",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "5000万游戏币快速赛",
		desc: "5000万游戏币快速赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1028"] = {
		PID: "1028",
		onlineTime: "0 20 * * *",
		applyTime: "1,days",
		applyDelay: "60",
		startTime: "1,days",
		hideType: "2",
		offlineTime: "2,days",
		minApply: "6",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "11000000",
		beanCost: "8800000",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "20000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "203",
		dynamicScheme: "",
		blindScheme: "210",
		rebuyNum: "2",
		icon: "8007",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "ACE大奖赛",
		desc: "ACE大奖赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
data["1029"] = {
		PID: "1029",
		onlineTime: "*/5 * * * *",
		applyTime: "5,minutes",
		applyDelay: "0",
		startTime: "5,minutes",
		hideType: "2",
		offlineTime: "30,minutes",
		minApply: "2",
		maxApply: "1000",
		tablePlayerNum: "9",
		goldCost: "11000000",
		beanCost: "8800000",
		rewardCost: "",
		serviceCost: "",
		ticketId: "",
		ticketNum: "",
		prevId: "",
		nextId: "",
		groupId: "",
		qualifyNum: "",
		qualifyBlind: "",
		initBet: "20000",
		goldReward: "",
		rewardType: "0",
		rewardScheme: "203",
		dynamicScheme: "",
		blindScheme: "210",
		rebuyNum: "2",
		icon: "8007",
		type: "2",
		channel: "",
		titileRes: "5004",
		title: "5分钟一场循环赛",
		desc: "5分钟一场循环赛",
		serverId: "match-1",
		TMGrow: "",
		sSNG: ""
};
module.exports = data;

cc._RF.pop();
},{}],"Config":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'df59b4tcjxLC4mLIBoS1qSO', 'Config');
// Scripts/Tools/Config.js

"use strict";

var TableFlags = cc.Enum({
    TABLE_FLAG_NONE: 0, // 占位
    TABLE_FLAG_INIT: 1 << 0, // 牌桌初始化[进桌]
    TABLE_FLAG_SEAT: 1 << 1, // 刷新座位[新加入/离桌]
    TABLE_FLAG_PLAY: 1 << 2, // 刷新座位玩家数据
    TABLE_FLAG_PUB: 1 << 3, // 刷新公共牌
    TABLE_FLAG_POT: 1 << 4, // 刷新主池/边池
    TABLE_FLAG_TSTATUS: 1 << 5, // 牌桌当前状态变化
    TABLE_FLAG_TRND: 1 << 6, // 牌桌新轮开始
    TABLE_FLAG_BRND: 1 << 7, // 新投注轮开始
    TABLE_FLAG_OVER: 1 << 8, // 牌桌结算
    TABLE_FLAG_ACTION: 1 << 9, // 执行Action的位置变化了
    TABLE_FLAG_INTERVAL: 1 << 10, // 执行计时器的变化
    // TABLE_FLAG_BLIND:1<<11,         //牌桌盲注变化
    TABLE_FLAG_DEALER: 1 << 12 });

// 玩家细节变化更新
var PlayerFlags = cc.Enum({
    PLAYER_FLAG_NONE: 0, // 占位
    PLAYER_FLAG_PLAYER_JETTON: 1 << 0, // 玩家的筹码值是否变化
    PLAYER_FLAG_MY_CARD: 1 << 1, // 我自己的牌数据变化了
    PLAYER_FLAG_INIT: 1 << 2, // 座位初始化[进桌]
    PLAYER_FLAG_WAIT_OTHER: 1 << 3, //等待其他玩家
    PLAYER_FLAG_FOLD_CRD: 1 << 4, //执行弃牌动作（有此标记播放弃牌动画）
    PLAYER_FLAG_ACTION_CHANGE: 1 << 5, //操作行为变化
    PLAYER_UPDATE_STATE: 1 << 6, //玩家自己的数据是否更新
    PLAYER_FLAG_ACTION_TIME: 1 << 7, //玩家的行动时间
    PLAYER_FLAG_CURRENT_STATES: 1 << 8, //玩家的当前状态
    PLAYER_FLAG_IS_NEW: 1 << 9 });

// 牌局状态，枚举
var RoundStatusEnum = cc.Enum({
    IDLE: 0, //不满足开始条件
    START: 1, //本局开始
    ACTION: 2, //玩家行动中
    NEXT: 3, //等待进入下一轮
    SETTLE: 4 //结算中
});

//按钮类型
var BtnIndexConfig = cc.Enum({
    NONE: 0,
    BTN_JY_ROOM: 1, //精英房
    BTN_GB_ROOM: 2, //贵宾房
    BTN_JS_ROOM: 3, //极速房
    BTN_ANTE_ROOM: 4, //ANTE房
    BTN_CHAMP_PROFESSIONAL: 5, //职业联赛
    BTN_CHAMP_MTT: 6, //MTT
    BTN_CHAMP_SNG: 7, //SNG
    BTN_CHAMP_MY: 8, //我的比赛
    BTN_LITTLE_GAME: 9
});

var GamerStatus = cc.Enum({
    NONE: 0, //不在此牌桌
    JOIN: 1, //进入
    LOOK: 2, //旁观
    SIT: 3, //留座
    WAIT: 4, //等待开局
    PLAY: 5, //打牌
    LEAVE: 6 });

//比赛详情按钮类型
var BtnChampInfCfg = cc.Enum({
    NONE: 0,
    CHAMP_INF_SUM_BTN: 1, //概述
    CHAMP_INF_RANK_BTN: 2, //排行
    CHAMP_INF_BLIND_BTN: 3, //盲注
    CHAMP_INF_BONUS_BTN: 4, //奖励
    CHAMP_INF_TABLE: 5, //牌桌
    CHAMP_INF_STRUCT_BTN: 6 //奖圈结构
});

// 牌桌界面类型
var GmRoomType = cc.Enum({
    ROOM_NONE: 0,
    ROOM_TEXAS: 1, // Texas德州扑克
    ROOM_BOLU: 2, // Bolu 菠萝
    ROOM_BAC: 3 });

// 游戏状态
var GameStateType = cc.Enum({
    GAME_NONE: 0, //为登陆状态
    GAME_LOGIN_STATE: 1, //登陆状态
    GAME_LOBBY_STATE: 2, //游戏大厅
    GAME_PLAY_CARDS_STATE: 3, //打牌场景
    GAME_TRANS_SCENE: 4 });
// 游戏自动操作的状态
var GameMethodType = cc.Enum({
    NONE: 0,
    CHECK_OR_FOLD: 1, // 让牌或弃牌
    CHECK: 2, //让牌
    CALL: 3, //跟任何注
    CALL_TO: 4, //跟指定的注
    CANCEL: 5 // 取消自动行动 **
});

//玩家行动
var GameActionType = cc.Enum({
    NONE: 0,
    FOLD: 1, //弃牌
    CALL: 2, //跟注
    CHECK: 3, //让牌
    RAISE: 4, //加注
    ALLIN: 5 //全下
});

// 场景配置
var SceneConfig = cc.Enum({
    GAME_LOADING: "Loading", //loading场景
    GAME_GAMELOBBY: "GameLobby", //大厅场景
    GAME_LOGOSCENE: "LogoScene", //logoscene场景
    GAME_LOGINSCENE: "LoginScene", //登陆场景
    GAME_ROOM_SCENE: "matchScene",
    TRANS_SCENE: "tranScene"
});

//process the special code from the server
var blockCode = cc.Enum({
    PLAYINGCARD_CANNOTLEAVE: 1229,
    NOTTO_SITDOWN: 1223,
    ANTI_ADDICTION: 1233,
    ROOM_ING: 1227, //正在坐下或者正在进入的时候
    VALID_MATCH: 1502
});

var tableType = cc.Enum({
    NONE: 0, //非法类型
    CASH: 1, //现金桌
    MATCH: 2 });

module.exports = {
    SceneConfig: SceneConfig,
    GameMethodType: GameMethodType,
    RoundStatusEnum: RoundStatusEnum, //牌桌状态枚举
    GameStateType: GameStateType, //游戏状态
    GamerStatus: GamerStatus, //玩家状态
    BtnIndexConfig: BtnIndexConfig,
    BtnChampInfCfg: BtnChampInfCfg,
    GameActionType: GameActionType, //玩家行动
    GmRoomType: GmRoomType, // 游戏牌桌界面类型
    blockCode: blockCode,
    tableType: tableType,
    TableFlags: TableFlags,
    PlayerFlags: PlayerFlags
};

cc._RF.pop();
},{}],"ConfirmPanel":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'f7262Dqg4FDbrbmqKx+meBw', 'ConfirmPanel');
// Scripts/UI/Component/ConfirmPanel.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        content: cc.Label
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.stopPropagationHandler, this);
        this.node.on(cc.Node.EventType.MOUSE_WHEEL, this.stopPropagationHandler, this);
    },

    stopPropagationHandler: function stopPropagationHandler(_event) {
        _event.stopPropagation();
    },

    setContent: function setContent(_content, _confirmCallback, _cancleCallback) {
        this.cancleCallback = _cancleCallback;
        this.confirmCallback = _confirmCallback;
        this.content.string = _content;
    },

    onClickConfirm: function onClickConfirm() {
        Global.musicManager.PlayClickSound();
        if (this.confirmCallback != null) this.confirmCallback();
        this.node.active = false;
    },

    onClickCancle: function onClickCancle() {
        Global.musicManager.PlayClickSound();
        if (this.cancleCallback != null) this.cancleCallback();
        this.node.active = false;
    },

    onClickClose: function onClickClose() {
        Global.musicManager.PlayCloseSound();
        this.node.active = false;
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RF.pop();
},{}],1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":1,"ieee754":5,"isarray":3}],3:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],4:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],5:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],6:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],7:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],8:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],9:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":8,"_process":6,"inherits":7}],"DynaScheme1":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'b42edx94hFEq5WbmBHQ4Woy', 'DynaScheme1');
// Scripts/GameData/config/DynaScheme1.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		minApply: "1",
		maxApply: "10",
		schemeId: "1"
};
data["2"] = {
		PID: "2",
		minApply: "11",
		maxApply: "20",
		schemeId: "2"
};
data["3"] = {
		PID: "3",
		minApply: "21",
		maxApply: "30",
		schemeId: "3"
};
data["4"] = {
		PID: "4",
		minApply: "31",
		maxApply: "40",
		schemeId: "4"
};
data["5"] = {
		PID: "5",
		minApply: "41",
		maxApply: "50",
		schemeId: "5"
};
data["6"] = {
		PID: "6",
		minApply: "51",
		maxApply: "60",
		schemeId: "6"
};
data["7"] = {
		PID: "7",
		minApply: "61",
		maxApply: "87",
		schemeId: "9"
};
data["8"] = {
		PID: "8",
		minApply: "88",
		maxApply: "112",
		schemeId: "12"
};
data["9"] = {
		PID: "9",
		minApply: "113",
		maxApply: "137",
		schemeId: "15"
};
data["10"] = {
		PID: "10",
		minApply: "138",
		maxApply: "162",
		schemeId: "18"
};
data["11"] = {
		PID: "11",
		minApply: "163",
		maxApply: "187",
		schemeId: "21"
};
data["12"] = {
		PID: "12",
		minApply: "188",
		maxApply: "212",
		schemeId: "24"
};
data["13"] = {
		PID: "13",
		minApply: "213",
		maxApply: "262",
		schemeId: "27"
};
data["14"] = {
		PID: "14",
		minApply: "263",
		maxApply: "337",
		schemeId: "36"
};
data["15"] = {
		PID: "15",
		minApply: "338",
		maxApply: "412",
		schemeId: "45"
};
data["16"] = {
		PID: "16",
		minApply: "413",
		maxApply: "487",
		schemeId: "54"
};
data["17"] = {
		PID: "17",
		minApply: "488",
		maxApply: "562",
		schemeId: "63"
};
data["18"] = {
		PID: "18",
		minApply: "563",
		maxApply: "637",
		schemeId: "72"
};
data["19"] = {
		PID: "19",
		minApply: "638",
		maxApply: "712",
		schemeId: "81"
};
data["20"] = {
		PID: "20",
		minApply: "713",
		maxApply: "787",
		schemeId: "90"
};
data["21"] = {
		PID: "21",
		minApply: "788",
		maxApply: "862",
		schemeId: "99"
};
data["22"] = {
		PID: "22",
		minApply: "863",
		maxApply: "937",
		schemeId: "108"
};
data["23"] = {
		PID: "23",
		minApply: "938",
		maxApply: "1012",
		schemeId: "117"
};
data["24"] = {
		PID: "24",
		minApply: "1013",
		maxApply: "1087",
		schemeId: "126"
};
data["25"] = {
		PID: "25",
		minApply: "1088",
		maxApply: "1162",
		schemeId: "135"
};
data["26"] = {
		PID: "26",
		minApply: "1163",
		maxApply: "1237",
		schemeId: "144"
};
data["27"] = {
		PID: "27",
		minApply: "1238",
		maxApply: "99999",
		schemeId: "153"
};
module.exports = data;

cc._RF.pop();
},{}],10:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],11:[function(require,module,exports){
var Util = require('util');

function checkCocos2dJsb() {
	if (typeof cc !== 'undefined' && cc && cc.sys && cc.sys.isNative) {
		return true;
	}

	return false;
}

var Root;
(function() {
	Root = this;
}());

if (checkCocos2dJsb()) {
	var console = cc;
	Root.console = console;
	cc.formatStr = Util.format;
}

var EventEmitter = require('events').EventEmitter;
Root.EventEmitter = EventEmitter;
var protobuf = require('pomelo-protobuf');
Root.protobuf = protobuf;
var Protocol = require('pomelo-protocol');
Root.Protocol = Protocol;
var pomelo = require('pomelo-jsclient-websocket');
Root.pomelo = pomelo;
},{"events":4,"pomelo-jsclient-websocket":12,"pomelo-protobuf":18,"pomelo-protocol":20,"util":9}],12:[function(require,module,exports){
(function() {
  var JS_WS_CLIENT_TYPE = 'js-websocket';
  var JS_WS_CLIENT_VERSION = '0.0.1';

  var Protocol = window.Protocol;
  var protobuf = window.protobuf;
  var decodeIO_protobuf = window.decodeIO_protobuf;
  var decodeIO_encoder = null;
  var decodeIO_decoder = null;
  var Package = Protocol.Package;
  var Message = Protocol.Message;
  var EventEmitter = window.EventEmitter;
  var rsa = window.rsa;

  if(typeof(window) != "undefined" && typeof(sys) != 'undefined' && sys.localStorage) {
    window.localStorage = sys.localStorage;
  }
  
  var RES_OK = 200;
  var RES_FAIL = 500;
  var RES_OLD_CLIENT = 501;

  if (typeof Object.create !== 'function') {
    Object.create = function (o) {
      function F() {}
      F.prototype = o;
      return new F();
    };
  }

  var root = window;
  var pomelo = Object.create(EventEmitter.prototype); // object extend from object
  root.pomelo = pomelo;
  var socket = null;
  var reqId = 0;
  var callbacks = {};
  var handlers = {};
  //Map from request id to route
  var routeMap = {};
  var dict = {};    // route string to code
  var abbrs = {};   // code to route string
  var serverProtos = {};
  var clientProtos = {};
  var protoVersion = 0;

  var heartbeatInterval = 0;
  var heartbeatTimeout = 0;
  var nextHeartbeatTimeout = 0;
  var gapThreshold = 100;   // heartbeat gap threashold
  var heartbeatId = null;
  var heartbeatTimeoutId = null;
  var handshakeCallback = null;

  var decode = null;
  var encode = null;

  var reconnect = false;
  var reconncetTimer = null;
  var reconnectUrl = null;
  var reconnectAttempts = 0;
  var reconnectionDelay = 5000;
  var DEFAULT_MAX_RECONNECT_ATTEMPTS = 10;

  var useCrypto;

  var handshakeBuffer = {
    'sys': {
      type: JS_WS_CLIENT_TYPE,
      version: JS_WS_CLIENT_VERSION,
      rsa: {}
    },
    'user': {
    }
  };

  var initCallback = null;

  pomelo.init = function(params, cb) {
    initCallback = cb;
    var host = params.host;
    var port = params.port;

    encode = params.encode || defaultEncode;
    decode = params.decode || defaultDecode;

    var url = 'ws://' + host;
    if(port) {
      url +=  ':' + port;
    }

    handshakeBuffer.user = params.user;
    if(params.encrypt) {
      useCrypto = true;
      rsa.generate(1024, "10001");
      var data = {
        rsa_n: rsa.n.toString(16),
        rsa_e: rsa.e
      }
      handshakeBuffer.sys.rsa = data;
    }
    handshakeCallback = params.handshakeCallback;
    connect(params, url, cb);
  };

  var defaultDecode = pomelo.decode = function(data) {
    //probuff decode
    var msg = Message.decode(data);

    if(msg.id > 0){
      msg.route = routeMap[msg.id];
      delete routeMap[msg.id];
      if(!msg.route){
        return;
      }
    }

    msg.body = deCompose(msg);
    return msg;
  };

  var defaultEncode = pomelo.encode = function(reqId, route, msg) {
    var type = reqId ? Message.TYPE_REQUEST : Message.TYPE_NOTIFY;

    //compress message by protobuf
    if(protobuf && clientProtos[route]) {
      msg = protobuf.encode(route, msg);
    } else if(decodeIO_encoder && decodeIO_encoder.lookup(route)) {
      var Builder = decodeIO_encoder.build(route);
      msg = new Builder(msg).encodeNB();
    } else {
      msg = Protocol.strencode(JSON.stringify(msg));
    }

    var compressRoute = 0;
    if(dict && dict[route]) {
      route = dict[route];
      compressRoute = 1;
    }

    return Message.encode(reqId, type, compressRoute, route, msg);
  };

  var connect = function(params, url, cb) {
    console.log('connect to ' + url);

    var params = params || {};
    var maxReconnectAttempts = params.maxReconnectAttempts || DEFAULT_MAX_RECONNECT_ATTEMPTS;
    reconnectUrl = url;
    //Add protobuf version
    if(window.localStorage && window.localStorage.getItem('protos') && protoVersion === 0) {
      var protos = JSON.parse(window.localStorage.getItem('protos'));

      protoVersion = protos.version || 0;
      serverProtos = protos.server || {};
      clientProtos = protos.client || {};

      if(!!protobuf) {
        protobuf.init({encoderProtos: clientProtos, decoderProtos: serverProtos});
      } 
      if(!!decodeIO_protobuf) {
        decodeIO_encoder = decodeIO_protobuf.loadJson(clientProtos);
        decodeIO_decoder = decodeIO_protobuf.loadJson(serverProtos);
      }
    }
    //Set protoversion
    handshakeBuffer.sys.protoVersion = protoVersion;

    var onopen = function(event) {
      if(!!reconnect) {
        pomelo.emit('reconnect');
      }
      reset();
      var obj = Package.encode(Package.TYPE_HANDSHAKE, Protocol.strencode(JSON.stringify(handshakeBuffer)));
      send(obj);
    };
    var onmessage = function(event) {
      processPackage(Package.decode(event.data), cb);
      // new package arrived, update the heartbeat timeout
      if(heartbeatTimeout) {
        nextHeartbeatTimeout = Date.now() + heartbeatTimeout;
      }
    };
    var onerror = function(event) {
      pomelo.emit('io-error', event);
      console.error('socket error: ', event);
    };
    var onclose = function(event) {
      pomelo.emit('close',event);
      pomelo.emit('disconnect', event);
      console.error('socket close: ', event);
      if(!!params.reconnect && reconnectAttempts < maxReconnectAttempts) {
        reconnect = true;
        reconnectAttempts++;
        reconncetTimer = setTimeout(function() {
          connect(params, reconnectUrl, cb);
        }, reconnectionDelay);
        reconnectionDelay *= 2;
      }
    };
    socket = new WebSocket(url);
    socket.binaryType = 'arraybuffer';
    socket.onopen = onopen;
    socket.onmessage = onmessage;
    socket.onerror = onerror;
    socket.onclose = onclose;
  };

  pomelo.disconnect = function() {
    if(socket) {
      if(socket.disconnect) socket.disconnect();
      if(socket.close) socket.close();
      console.log('disconnect');
      socket = null;
    }

    if(heartbeatId) {
      clearTimeout(heartbeatId);
      heartbeatId = null;
    }
    if(heartbeatTimeoutId) {
      clearTimeout(heartbeatTimeoutId);
      heartbeatTimeoutId = null;
    }
  };

  var reset = function() {
    reconnect = false;
    reconnectionDelay = 1000 * 5;
    reconnectAttempts = 0;
    clearTimeout(reconncetTimer);
  };

  pomelo.request = function(route, msg, cb) {
    if(arguments.length === 2 && typeof msg === 'function') {
      cb = msg;
      msg = {};
    } else {
      msg = msg || {};
    }
    route = route || msg.route;
    if(!route) {
      return;
    }

    reqId++;
    sendMessage(reqId, route, msg);

    callbacks[reqId] = cb;
    routeMap[reqId] = route;
  };

  pomelo.notify = function(route, msg) {
    msg = msg || {};
    sendMessage(0, route, msg);
  };

  var sendMessage = function(reqId, route, msg) {
    if(useCrypto) {
      msg = JSON.stringify(msg);
      var sig = rsa.signString(msg, "sha256");
      msg = JSON.parse(msg);
      msg['__crypto__'] = sig;
    }

    if(encode) {
      msg = encode(reqId, route, msg);
    }

    var packet = Package.encode(Package.TYPE_DATA, msg);
    send(packet);
  };

  var send = function(packet) {
    if(socket)
      socket.send(packet.buffer);
  };

  var handler = {};

  var heartbeat = function(data) {
    if(!heartbeatInterval) {
      // no heartbeat
      return;
    }

    var obj = Package.encode(Package.TYPE_HEARTBEAT);
    if(heartbeatTimeoutId) {
      clearTimeout(heartbeatTimeoutId);
      heartbeatTimeoutId = null;
    }

    if(heartbeatId) {
      // already in a heartbeat interval
      return;
    }
    heartbeatId = setTimeout(function() {
      heartbeatId = null;
      send(obj);

      nextHeartbeatTimeout = Date.now() + heartbeatTimeout;
      heartbeatTimeoutId = setTimeout(heartbeatTimeoutCb, heartbeatTimeout);
    }, heartbeatInterval);
  };

  var heartbeatTimeoutCb = function() {
    var gap = nextHeartbeatTimeout - Date.now();
    if(gap > gapThreshold) {
      heartbeatTimeoutId = setTimeout(heartbeatTimeoutCb, gap);
    } else {
      console.error('server heartbeat timeout');
      pomelo.emit('heartbeat timeout');
      pomelo.disconnect();
    }
  };

  var handshake = function(data) {
    data = JSON.parse(Protocol.strdecode(data));
    if(data.code === RES_OLD_CLIENT) {
      pomelo.emit('error', 'client version not fullfill');
      return;
    }

    if(data.code !== RES_OK) {
      pomelo.emit('error', 'handshake fail');
      return;
    }

    handshakeInit(data);

    var obj = Package.encode(Package.TYPE_HANDSHAKE_ACK);
    send(obj);
    if(initCallback) {
      initCallback(socket);
    }
  };

  var onData = function(data) {
    var msg = data;
    if(decode) {
      msg = decode(msg);
    }
    processMessage(pomelo, msg);
  };

  var onKick = function(data) {
    data = JSON.parse(Protocol.strdecode(data));
    pomelo.emit('onKick', data);
  };

  handlers[Package.TYPE_HANDSHAKE] = handshake;
  handlers[Package.TYPE_HEARTBEAT] = heartbeat;
  handlers[Package.TYPE_DATA] = onData;
  handlers[Package.TYPE_KICK] = onKick;

  var processPackage = function(msgs) {
    if(Array.isArray(msgs)) {
      for(var i=0; i<msgs.length; i++) {
        var msg = msgs[i];
        handlers[msg.type](msg.body);
      }
    } else {
      handlers[msgs.type](msgs.body);
    }
  };

  var processMessage = function(pomelo, msg) {
	if(!msg){
		return;
	}
    if(!msg.id) {
      // server push message
      pomelo.emit(msg.route, msg.body);
      return;
    }

    //if have a id then find the callback function with the request
    var cb = callbacks[msg.id];

    delete callbacks[msg.id];
    if(typeof cb !== 'function') {
      return;
    }

    cb(msg.body);
    return;
  };

  var processMessageBatch = function(pomelo, msgs) {
    for(var i=0, l=msgs.length; i<l; i++) {
      processMessage(pomelo, msgs[i]);
    }
  };

  var deCompose = function(msg) {
    var route = msg.route;

    //Decompose route from dict
    if(msg.compressRoute) {
      if(!abbrs[route]){
        return {};
      }

      route = msg.route = abbrs[route];
    }
    if(protobuf && serverProtos[route]) {
      return protobuf.decodeStr(route, msg.body);
    } else if(decodeIO_decoder && decodeIO_decoder.lookup(route)) {
      return decodeIO_decoder.build(route).decode(msg.body);
    } else {
      return JSON.parse(Protocol.strdecode(msg.body));
    }

    return msg;
  };

  var handshakeInit = function(data) {
    if(data.sys && data.sys.heartbeat) {
      heartbeatInterval = data.sys.heartbeat * 1000;   // heartbeat interval
      heartbeatTimeout = heartbeatInterval * 2;        // max heartbeat timeout
    } else {
      heartbeatInterval = 0;
      heartbeatTimeout = 0;
    }

    initData(data);

    if(typeof handshakeCallback === 'function') {
      handshakeCallback(data.user);
    }
  };

  //Initilize data used in pomelo client
  var initData = function(data) {
    if(!data || !data.sys) {
      return;
    }
    dict = data.sys.dict;
    var protos = data.sys.protos;

    //Init compress dict
    if(dict) {
      dict = dict;
      abbrs = {};

      for(var route in dict) {
        abbrs[dict[route]] = route;
      }
    }

    //Init protobuf protos
    if(protos) {
      protoVersion = protos.version || 0;
      serverProtos = protos.server || {};
      clientProtos = protos.client || {};

        //Save protobuf protos to localStorage
        window.localStorage.setItem('protos', JSON.stringify(protos));

        if(!!protobuf) {
          protobuf.init({encoderProtos: protos.client, decoderProtos: protos.server});
        }
        if(!!decodeIO_protobuf) {
          decodeIO_encoder = decodeIO_protobuf.loadJson(clientProtos);
          decodeIO_decoder = decodeIO_protobuf.loadJson(serverProtos);
        }
      }
    };

    module.exports = pomelo;
  })();

},{}],13:[function(require,module,exports){
var Encoder = module.exports;

/**
 * [encode an uInt32, return a array of bytes]
 * @param  {[integer]} num
 * @return {[array]}
 */
Encoder.encodeUInt32 = function(num){
	var n = parseInt(num);
	if(isNaN(n) || n < 0){
		console.log(n);
		return null;
	}

	var result = [];
	do{
		var tmp = n % 128;
		var next = Math.floor(n/128);

		if(next !== 0){
			tmp = tmp + 128;
		}
		result.push(tmp);
		n = next;
	} while(n !== 0);

	return result;
};

/**
 * [encode a sInt32, return a byte array]
 * @param  {[sInt32]} num  The sInt32 need to encode
 * @return {[array]} A byte array represent the integer
 */
Encoder.encodeSInt32 = function(num){
	var n = parseInt(num);
	if(isNaN(n)){
		return null;
	}
	n = n<0?(Math.abs(n)*2-1):n*2;

	return Encoder.encodeUInt32(n);
};

Encoder.decodeUInt32 = function(bytes){
	var n = 0;

	for(var i = 0; i < bytes.length; i++){
		var m = parseInt(bytes[i]);
		n = n + ((m & 0x7f) * Math.pow(2,(7*i)));
		if(m < 128){
			return n;
		}
	}

	return n;
};


Encoder.decodeSInt32 = function(bytes){
	var n = this.decodeUInt32(bytes);
	var flag = ((n%2) === 1)?-1:1;

	n = ((n%2 + n)/2)*flag;

	return n;
};

},{}],14:[function(require,module,exports){
module.exports = {
	TYPES : {
		uInt32 : 0,
		sInt32 : 0,
		int32 : 0,
		double : 1,
		string : 2,
		message : 2,
		float : 5
	}
}
},{}],15:[function(require,module,exports){
var codec = require('./codec');
var util = require('./util');

var Decoder = module.exports;

var buffer;
var offset = 0;

Decoder.init = function(protos){
	this.protos = protos || {};
};

Decoder.setProtos = function(protos){
	if(!!protos){
		this.protos = protos;
	}
};

Decoder.decode = function(route, buf){
	var protos = this.protos[route];

	buffer = buf;
	offset = 0;

	if(!!protos){
		return decodeMsg({}, protos, buffer.length);
	}

	return null;
};

function decodeMsg(msg, protos, length){
	while(offset<length){
		var head = getHead();
		var type = head.type;
		var tag = head.tag;
		var name = protos.__tags[tag];

		switch(protos[name].option){
			case 'optional' :
			case 'required' :
				msg[name] = decodeProp(protos[name].type, protos);
			break;
			case 'repeated' :
				if(!msg[name]){
					msg[name] = [];
				}
				decodeArray(msg[name], protos[name].type, protos);
			break;
		}
	}

	return msg;
}

/**
 * Test if the given msg is finished
 */
function isFinish(msg, protos){
	return (!protos.__tags[peekHead().tag]);
}
/**
 * Get property head from protobuf
 */
function getHead(){
	var tag = codec.decodeUInt32(getBytes());

	return {
		type : tag&0x7,
		tag	: tag>>3
	};
}

/**
 * Get tag head without move the offset
 */
function peekHead(){
	var tag = codec.decodeUInt32(peekBytes());

	return {
		type : tag&0x7,
		tag	: tag>>3
	};
}

function decodeProp(type, protos){
	switch(type){
		case 'uInt32':
			return codec.decodeUInt32(getBytes());
		case 'int32' :
		case 'sInt32' :
			return codec.decodeSInt32(getBytes());
		case 'float' :
			var float = buffer.readFloatLE(offset);
			offset += 4;
			return float;
		case 'double' :
			var double = buffer.readDoubleLE(offset);
			offset += 8;
			return double;
		case 'string' :
			var length = codec.decodeUInt32(getBytes());

			var str =  buffer.toString('utf8', offset, offset+length);
			offset += length;

			return str;
		default :
			var message = protos && (protos.__messages[type] || Decoder.protos['message ' + type]);
			if(message){
				var length = codec.decodeUInt32(getBytes());
				var msg = {};
				decodeMsg(msg, message, offset+length);
				return msg;
			}
		break;
	}
}

function decodeArray(array, type, protos){
	if(util.isSimpleType(type)){
		var length = codec.decodeUInt32(getBytes());

		for(var i = 0; i < length; i++){
			array.push(decodeProp(type));
		}
	}else{
		array.push(decodeProp(type, protos));
	}
}

function getBytes(flag){
	var bytes = [];
	var pos = offset;
	flag = flag || false;

	var b;
	do{
		var b = buffer.readUInt8(pos);
		bytes.push(b);
		pos++;
	}while(b >= 128);

	if(!flag){
		offset = pos;
	}
	return bytes;
}

function peekBytes(){
	return getBytes(true);
}
},{"./codec":13,"./util":19}],16:[function(require,module,exports){
(function (Buffer){
var codec = require('./codec');
var constant = require('./constant');
var util = require('./util');

var Encoder = module.exports;

Encoder.init = function(protos){
	this.protos = protos || {};
};

Encoder.encode = function(route, msg){
	if(!route || !msg){
		console.warn('Route or msg can not be null! route : %j, msg %j', route, msg);
		return null;
	}

	//Get protos from protos map use the route as key
	var protos = this.protos[route];

	//Check msg
	if(!checkMsg(msg, protos)){
		console.warn('check msg failed! msg : %j, proto : %j', msg, protos);
		return null;
	}

	//Set the length of the buffer 2 times bigger to prevent overflow
	var length = Buffer.byteLength(JSON.stringify(msg))*2;

	//Init buffer and offset
	var buffer = new Buffer(length);
	var offset = 0;

	if(!!protos){
		offset = encodeMsg(buffer, offset, protos, msg);
		if(offset > 0){
			return buffer.slice(0, offset);
		}
	}

	return null;
};

/**
 * Check if the msg follow the defination in the protos
 */
function checkMsg(msg, protos){
	if(!protos || !msg){
		console.warn('no protos or msg exist! msg : %j, protos : %j', msg, protos);
		return false;
	}

	for(var name in protos){
		var proto = protos[name];

		//All required element must exist
		switch(proto.option){
			case 'required' :
				if(typeof(msg[name]) === 'undefined'){
					console.warn('no property exist for required! name: %j, proto: %j, msg: %j', name, proto, msg);
					return false;
				}
			case 'optional' :
				if(typeof(msg[name]) !== 'undefined'){
					var message = protos.__messages[proto.type] || Encoder.protos['message ' + proto.type];
					if(!!message && !checkMsg(msg[name], message)){
						console.warn('inner proto error! name: %j, proto: %j, msg: %j', name, proto, msg);
						return false;
					}
				}
			break;
			case 'repeated' :
				//Check nest message in repeated elements
				var message = protos.__messages[proto.type] || Encoder.protos['message ' + proto.type];
				if(!!msg[name] && !!message){
					for(var i = 0; i < msg[name].length; i++){
						if(!checkMsg(msg[name][i], message)){
							return false;
						}
					}
				}
			break;
		}
	}

	return true;
}

function encodeMsg(buffer, offset, protos, msg){
	for(var name in msg){
		if(!!protos[name]){
			var proto = protos[name];

			switch(proto.option){
				case 'required' :
				case 'optional' :
					offset = writeBytes(buffer, offset, encodeTag(proto.type, proto.tag));
					offset = encodeProp(msg[name], proto.type, offset, buffer, protos);
				break;
				case 'repeated' :
					if(!!msg[name] && msg[name].length > 0){
						offset = encodeArray(msg[name], proto, offset, buffer, protos);
					}
				break;
			}
		}
	}

	return offset;
}

function encodeProp(value, type, offset, buffer, protos){
	var length = 0;

	switch(type){
		case 'uInt32':
			offset = writeBytes(buffer, offset, codec.encodeUInt32(value));
		break;
		case 'int32' :
		case 'sInt32':
			offset = writeBytes(buffer, offset, codec.encodeSInt32(value));
		break;
		case 'float':
			buffer.writeFloatLE(value, offset);
			offset += 4;
		break;
		case 'double':
			buffer.writeDoubleLE(value, offset);
			offset += 8;
		break;
		case 'string':
			length = Buffer.byteLength(value);

			//Encode length
			offset = writeBytes(buffer, offset, codec.encodeUInt32(length));
			//write string
			buffer.write(value, offset, length);
			offset += length;
		break;
		default :
			var message = protos.__messages[type] || Encoder.protos['message ' + type];
			if(!!message){
				//Use a tmp buffer to build an internal msg
				var tmpBuffer = new Buffer(Buffer.byteLength(JSON.stringify(value))*2);
				length = 0;

				length = encodeMsg(tmpBuffer, length, message, value);
				//Encode length
				offset = writeBytes(buffer, offset, codec.encodeUInt32(length));
				//contact the object
				tmpBuffer.copy(buffer, offset, 0, length);

				offset += length;
			}
		break;
	}

	return offset;
}

/**
 * Encode reapeated properties, simple msg and object are decode differented
 */
function encodeArray(array, proto, offset, buffer, protos){
	var i = 0;
	if(util.isSimpleType(proto.type)){
		offset = writeBytes(buffer, offset, encodeTag(proto.type, proto.tag));
		offset = writeBytes(buffer, offset, codec.encodeUInt32(array.length));
		for(i = 0; i < array.length; i++){
			offset = encodeProp(array[i], proto.type, offset, buffer);
		}
	}else{
		for(i = 0; i < array.length; i++){
			offset = writeBytes(buffer, offset, encodeTag(proto.type, proto.tag));
			offset = encodeProp(array[i], proto.type, offset, buffer, protos);
		}
	}

	return offset;
}

function writeBytes(buffer, offset, bytes){
	for(var i = 0; i < bytes.length; i++){
		buffer.writeUInt8(bytes[i], offset);
		offset++;
	}

	return offset;
}

function encodeTag(type, tag){
	var value = constant.TYPES[type];

	if(value === undefined) value = 2;

	return codec.encodeUInt32((tag<<3)|value);
}

}).call(this,require("buffer").Buffer)
},{"./codec":13,"./constant":14,"./util":19,"buffer":2}],17:[function(require,module,exports){
var Parser = module.exports;

/**
 * [parse the original protos, give the paresed result can be used by protobuf encode/decode.]
 * @param  {[Object]} protos Original protos, in a js map.
 * @return {[Object]} The presed result, a js object represent all the meta data of the given protos.
 */
Parser.parse = function(protos){
	var maps = {};
	for(var key in protos){
		maps[key] = parseObject(protos[key]);
	}

	return maps;
};

/**
 * [parse a single protos, return a object represent the result. The method can be invocked recursively.]
 * @param  {[Object]} obj The origin proto need to parse.
 * @return {[Object]} The parsed result, a js object.
 */
function parseObject(obj){
	var proto = {};
	var nestProtos = {};
	var tags = {};

	for(var name in obj){
		var tag = obj[name];
		var params = name.split(' ');

		switch(params[0]){
			case 'message':
				if(params.length !== 2){
					continue;
				}
				nestProtos[params[1]] = parseObject(tag);
				continue;
			case 'required':
			case 'optional':
			case 'repeated':{
				//params length should be 3 and tag can't be duplicated
				if(params.length !== 3 || !!tags[tag]){
					continue;
				}
				proto[params[2]] = {
					option : params[0],
					type : params[1],
					tag : tag
				};
				tags[tag] = params[2];
			}
		}
	}

	proto.__messages = nestProtos;
	proto.__tags = tags;
	return proto;
}
},{}],18:[function(require,module,exports){
(function (Buffer){
var encoder = require('./encoder');
var decoder = require('./decoder');
var parser = require('./parser');

var Protobuf = module.exports;

/**
 * [encode the given message, return a Buffer represent the message encoded by protobuf]
 * @param  {[type]} key The key to identify the message type.
 * @param  {[type]} msg The message body, a js object.
 * @return {[type]} The binary encode result in a Buffer.
 */
Protobuf.encode = function(key, msg){
	return encoder.encode(key, msg);
};

Protobuf.encode2Bytes = function(key, msg){
	var buffer = this.encode(key, msg);
	if(!buffer || !buffer.length){
		console.warn('encode msg failed! key : %j, msg : %j', key, msg);
		return null;
	}
	var bytes = new Uint8Array(buffer.length);
	for(var offset = 0; offset < buffer.length; offset++){
		bytes[offset] = buffer.readUInt8(offset);
	}

	return bytes;
};

Protobuf.encodeStr = function(key, msg, code){
	code = code || 'base64';
	var buffer = Protobuf.encode(key, msg);
	return !!buffer?buffer.toString(code):buffer;
};

Protobuf.decode = function(key, msg){
	return decoder.decode(key, msg);
};

Protobuf.decodeStr = function(key, str, code){
	code = code || 'base64';
	var buffer = new Buffer(str, code);

	return !!buffer?Protobuf.decode(key, buffer):buffer;
};

Protobuf.parse = function(json){
	return parser.parse(json);
};

Protobuf.setEncoderProtos = function(protos){
	encoder.init(protos);
};

Protobuf.setDecoderProtos = function(protos){
	decoder.init(protos);
};

Protobuf.init = function(opts){
	//On the serverside, use serverProtos to encode messages send to client
	encoder.init(opts.encoderProtos);

	//On the serverside, user clientProtos to decode messages receive from clients
	decoder.init(opts.decoderProtos);

};
}).call(this,require("buffer").Buffer)
},{"./decoder":15,"./encoder":16,"./parser":17,"buffer":2}],19:[function(require,module,exports){
var util = module.exports;

util.isSimpleType = function(type){
	return ( type === 'uInt32' ||
					 type === 'sInt32' ||
					 type === 'int32'  ||
					 type === 'uInt64' ||
					 type === 'sInt64' ||
					 type === 'float'  ||
					 type === 'double');
};

util.equal = function(obj0, obj1){
	for(var key in obj0){
		var m = obj0[key];
		var n = obj1[key];

		if(typeof(m) === 'object'){
			if(!util.equal(m, n)){
				return false;
			}
		}else if(m !== n){
			return false;
		}
	}

	return true;
};
},{}],20:[function(require,module,exports){
module.exports = require('./lib/protocol');
},{"./lib/protocol":21}],21:[function(require,module,exports){
(function (Buffer){
(function (exports, ByteArray, global) {
  var Protocol = exports;

  var PKG_HEAD_BYTES = 4;
  var MSG_FLAG_BYTES = 1;
  var MSG_ROUTE_CODE_BYTES = 2;
  var MSG_ID_MAX_BYTES = 5;
  var MSG_ROUTE_LEN_BYTES = 1;

  var MSG_ROUTE_CODE_MAX = 0xffff;

  var MSG_COMPRESS_ROUTE_MASK = 0x1;
  var MSG_TYPE_MASK = 0x7;

  var Package = Protocol.Package = {};
  var Message = Protocol.Message = {};

  Package.TYPE_HANDSHAKE = 1;
  Package.TYPE_HANDSHAKE_ACK = 2;
  Package.TYPE_HEARTBEAT = 3;
  Package.TYPE_DATA = 4;
  Package.TYPE_KICK = 5;

  Message.TYPE_REQUEST = 0;
  Message.TYPE_NOTIFY = 1;
  Message.TYPE_RESPONSE = 2;
  Message.TYPE_PUSH = 3;

  /**
   * pomele client encode
   * id message id;
   * route message route
   * msg message body
   * socketio current support string
   */
  Protocol.strencode = function(str) {
    if(typeof Buffer !== "undefined" && ByteArray === Buffer) {
      // encoding defaults to 'utf8'
      return (new Buffer(str));
    } else {
      var byteArray = new ByteArray(str.length * 3);
      var offset = 0;
      for(var i = 0; i < str.length; i++){
        var charCode = str.charCodeAt(i);
        var codes = null;
        if(charCode <= 0x7f){
          codes = [charCode];
        }else if(charCode <= 0x7ff){
          codes = [0xc0|(charCode>>6), 0x80|(charCode & 0x3f)];
        }else{
          codes = [0xe0|(charCode>>12), 0x80|((charCode & 0xfc0)>>6), 0x80|(charCode & 0x3f)];
        }
        for(var j = 0; j < codes.length; j++){
          byteArray[offset] = codes[j];
          ++offset;
        }
      }
      var _buffer = new ByteArray(offset);
      copyArray(_buffer, 0, byteArray, 0, offset);
      return _buffer;
    }
  };

  /**
   * client decode
   * msg String data
   * return Message Object
   */
  Protocol.strdecode = function(buffer) {
    if(typeof Buffer !== "undefined" && ByteArray === Buffer) {
      // encoding defaults to 'utf8'
      return buffer.toString();
    } else {
      var bytes = new ByteArray(buffer);
      var array = [];
      var offset = 0;
      var charCode = 0;
      var end = bytes.length;
      while(offset < end){
        if(bytes[offset] < 128){
          charCode = bytes[offset];
          offset += 1;
        }else if(bytes[offset] < 224){
          charCode = ((bytes[offset] & 0x1f)<<6) + (bytes[offset+1] & 0x3f);
          offset += 2;
        }else{
          charCode = ((bytes[offset] & 0x0f)<<12) + ((bytes[offset+1] & 0x3f)<<6) + (bytes[offset+2] & 0x3f);
          offset += 3;
        }
        array.push(charCode);
      }
      return String.fromCharCode.apply(null, array);
    }
  };

  /**
   * Package protocol encode.
   *
   * Pomelo package format:
   * +------+-------------+------------------+
   * | type | body length |       body       |
   * +------+-------------+------------------+
   *
   * Head: 4bytes
   *   0: package type,
   *      1 - handshake,
   *      2 - handshake ack,
   *      3 - heartbeat,
   *      4 - data
   *      5 - kick
   *   1 - 3: big-endian body length
   * Body: body length bytes
   *
   * @param  {Number}    type   package type
   * @param  {ByteArray} body   body content in bytes
   * @return {ByteArray}        new byte array that contains encode result
   */
  Package.encode = function(type, body){
    var length = body ? body.length : 0;
    var buffer = new ByteArray(PKG_HEAD_BYTES + length);
    var index = 0;
    buffer[index++] = type & 0xff;
    buffer[index++] = (length >> 16) & 0xff;
    buffer[index++] = (length >> 8) & 0xff;
    buffer[index++] = length & 0xff;
    if(body) {
      copyArray(buffer, index, body, 0, length);
    }
    return buffer;
  };

  /**
   * Package protocol decode.
   * See encode for package format.
   *
   * @param  {ByteArray} buffer byte array containing package content
   * @return {Object}           {type: package type, buffer: body byte array}
   */
  Package.decode = function(buffer){
    var offset = 0;
    var bytes = new ByteArray(buffer);
    var length = 0;
    var rs = [];
    while(offset < bytes.length) {
      var type = bytes[offset++];
      length = ((bytes[offset++]) << 16 | (bytes[offset++]) << 8 | bytes[offset++]) >>> 0;
      var body = length ? new ByteArray(length) : null;
      if(body) {
        copyArray(body, 0, bytes, offset, length);
      }
      offset += length;
      rs.push({'type': type, 'body': body});
    }
    return rs.length === 1 ? rs[0]: rs;
  };

  /**
   * Message protocol encode.
   *
   * @param  {Number} id            message id
   * @param  {Number} type          message type
   * @param  {Number} compressRoute whether compress route
   * @param  {Number|String} route  route code or route string
   * @param  {Buffer} msg           message body bytes
   * @return {Buffer}               encode result
   */
  Message.encode = function(id, type, compressRoute, route, msg){
    // caculate message max length
    var idBytes = msgHasId(type) ? caculateMsgIdBytes(id) : 0;
    var msgLen = MSG_FLAG_BYTES + idBytes;

    if(msgHasRoute(type)) {
      if(compressRoute) {
        if(typeof route !== 'number'){
          throw new Error('error flag for number route!');
        }
        msgLen += MSG_ROUTE_CODE_BYTES;
      } else {
        msgLen += MSG_ROUTE_LEN_BYTES;
        if(route) {
          route = Protocol.strencode(route);
          if(route.length>255) {
            throw new Error('route maxlength is overflow');
          }
          msgLen += route.length;
        }
      }
    }

    if(msg) {
      msgLen += msg.length;
    }

    var buffer = new ByteArray(msgLen);
    var offset = 0;

    // add flag
    offset = encodeMsgFlag(type, compressRoute, buffer, offset);

    // add message id
    if(msgHasId(type)) {
      offset = encodeMsgId(id, buffer, offset);
    }

    // add route
    if(msgHasRoute(type)) {
      offset = encodeMsgRoute(compressRoute, route, buffer, offset);
    }

    // add body
    if(msg) {
      offset = encodeMsgBody(msg, buffer, offset);
    }

    return buffer;
  };

  /**
   * Message protocol decode.
   *
   * @param  {Buffer|Uint8Array} buffer message bytes
   * @return {Object}            message object
   */
  Message.decode = function(buffer) {
    var bytes =  new ByteArray(buffer);
    var bytesLen = bytes.length || bytes.byteLength;
    var offset = 0;
    var id = 0;
    var route = null;

    // parse flag
    var flag = bytes[offset++];
    var compressRoute = flag & MSG_COMPRESS_ROUTE_MASK;
    var type = (flag >> 1) & MSG_TYPE_MASK;

    // parse id
    if(msgHasId(type)) {
      var m = 0;
      var i = 0;
      do{
        m = parseInt(bytes[offset]);
        id += (m & 0x7f) << (7 * i);
        offset++;
        i++;
      }while(m >= 128);
    }

    // parse route
    if(msgHasRoute(type)) {
      if(compressRoute) {
        route = (bytes[offset++]) << 8 | bytes[offset++];
      } else {
        var routeLen = bytes[offset++];
        if(routeLen) {
          route = new ByteArray(routeLen);
          copyArray(route, 0, bytes, offset, routeLen);
          route = Protocol.strdecode(route);
        } else {
          route = '';
        }
        offset += routeLen;
      }
    }

    // parse body
    var bodyLen = bytesLen - offset;
    var body = new ByteArray(bodyLen);

    copyArray(body, 0, bytes, offset, bodyLen);

    return {'id': id, 'type': type, 'compressRoute': compressRoute,
            'route': route, 'body': body};
  };

  var copyArray = function(dest, doffset, src, soffset, length) {
    if('function' === typeof src.copy) {
      // Buffer
      src.copy(dest, doffset, soffset, soffset + length);
    } else {
      // Uint8Array
      for(var index=0; index<length; index++){
        dest[doffset++] = src[soffset++];
      }
    }
  };

  var msgHasId = function(type) {
    return type === Message.TYPE_REQUEST || type === Message.TYPE_RESPONSE;
  };

  var msgHasRoute = function(type) {
    return type === Message.TYPE_REQUEST || type === Message.TYPE_NOTIFY ||
           type === Message.TYPE_PUSH;
  };

  var caculateMsgIdBytes = function(id) {
    var len = 0;
    do {
      len += 1;
      id >>= 7;
    } while(id > 0);
    return len;
  };

  var encodeMsgFlag = function(type, compressRoute, buffer, offset) {
    if(type !== Message.TYPE_REQUEST && type !== Message.TYPE_NOTIFY &&
       type !== Message.TYPE_RESPONSE && type !== Message.TYPE_PUSH) {
      throw new Error('unkonw message type: ' + type);
    }

    buffer[offset] = (type << 1) | (compressRoute ? 1 : 0);

    return offset + MSG_FLAG_BYTES;
  };

  var encodeMsgId = function(id, buffer, offset) {
    do{
      var tmp = id % 128;
      var next = Math.floor(id/128);

      if(next !== 0){
        tmp = tmp + 128;
      }
      buffer[offset++] = tmp;

      id = next;
    } while(id !== 0);

    return offset;
  };

  var encodeMsgRoute = function(compressRoute, route, buffer, offset) {
    if (compressRoute) {
      if(route > MSG_ROUTE_CODE_MAX){
        throw new Error('route number is overflow');
      }

      buffer[offset++] = (route >> 8) & 0xff;
      buffer[offset++] = route & 0xff;
    } else {
      if(route) {
        buffer[offset++] = route.length & 0xff;
        copyArray(buffer, offset, route, 0, route.length);
        offset += route.length;
      } else {
        buffer[offset++] = 0;
      }
    }

    return offset;
  };

  var encodeMsgBody = function(msg, buffer, offset) {
    copyArray(buffer, offset, msg, 0, msg.length);
    return offset + msg.length;
  };

  module.exports = Protocol;
  if(typeof(window) != "undefined") {
    window.Protocol = Protocol;
  }
})(typeof(window)=="undefined" ? module.exports : (this.Protocol = {}),typeof(window)=="undefined"  ? Buffer : Uint8Array, this);

}).call(this,require("buffer").Buffer)
},{"buffer":2}],22:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"dup":13}],23:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"dup":14}],24:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"./codec":22,"./util":28,"dup":15}],25:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"./codec":22,"./constant":23,"./util":28,"buffer":2,"dup":16}],26:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"dup":17}],27:[function(require,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"./decoder":24,"./encoder":25,"./parser":26,"buffer":2,"dup":18}],28:[function(require,module,exports){
arguments[4][19][0].apply(exports,arguments)
},{"dup":19}],29:[function(require,module,exports){
/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = require('component-emitter');
var RequestBase = require('./request-base');
var isObject = require('./is-object');
var isFunction = require('./is-function');
var ResponseBase = require('./response-base');
var shouldRetry = require('./should-retry');

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
}

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only verison of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'application/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  return /[\/+]json\b/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
      status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str){
  var parse = request.parse[this.type];
  if(this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
        new_err.original = err;
        new_err.response = res;
        new_err.status = res.status;
      }
    } catch(e) {
      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can substitute for options
    options = pass;
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    }
  }

  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + btoa(user + ':' + pass));
    break;

    case 'auto':
      this.username = user;
      this.password = pass;
    break;
      
    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
    break;  
  }
  return this;
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  // console.log(this._retries, this._maxRetries)
  if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */

Request.prototype._appendQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if (isFunction(this._sort)) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
}

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._appendQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = this.xhr = request.getXHR();
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  }
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;

    if (this.header.hasOwnProperty(field))
      xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn){
  var req = request('OPTIONS', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn){
  var req = request('DELETE', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

},{"./is-function":30,"./is-object":31,"./request-base":32,"./response-base":33,"./should-retry":34,"component-emitter":10}],30:[function(require,module,exports){
/**
 * Check if `fn` is a function.
 *
 * @param {Function} fn
 * @return {Boolean}
 * @api private
 */
var isObject = require('./is-object');

function isFunction(fn) {
  var tag = isObject(fn) ? Object.prototype.toString.call(fn) : '';
  return tag === '[object Function]';
}

module.exports = isFunction;

},{"./is-object":31}],31:[function(require,module,exports){
/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;

},{}],32:[function(require,module,exports){
/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = require('./is-object');

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, read, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  return this;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {
  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
      self.end(function(err, res){
        if (err) innerReject(err); else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
}

RequestBase.prototype.catch = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
}

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};


/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {

  // name should be either a string or an object.
  if (null === name ||  undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on){
  // This is browser-only functionality. Node side is no-op.
  if(on==undefined) on = true;
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function(){
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header
  };
};


/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) this.type('json');
  return this;
};


/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
}

},{"./is-object":31}],33:[function(require,module,exports){

/**
 * Module dependencies.
 */

var utils = require('./utils');

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field){
    return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) this[key] = params[key];

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
};

},{"./utils":35}],34:[function(require,module,exports){
var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
module.exports = function shouldRetry(err, res) {
  if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;
  if (res && res.status && res.status >= 500) return true;
  // Superagent timeout
  if (err && 'timeout' in err && err.code == 'ECONNABORTED') return true;
  if (err && 'crossDomain' in err) return true;
  return false;
};

},{}],35:[function(require,module,exports){

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, shouldStripCookie){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  if (shouldStripCookie) {
    delete header['cookie'];
  }
  return header;
};
},{}],"ErrorCode":[function(require,module,exports){
"use strict";
cc._RF.push(module, '74e25BddjZLaLhqdzc7XPkg', 'ErrorCode');
// Scripts/GameData/config/ErrorCode.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		tip: "参数错误",
		module: "GLOBAL ",
		key: "BADPARAM"
};
data["500"] = {
		PID: "500",
		tip: "服务器正在维护中",
		module: "GLOBAL ",
		key: "FAIL"
};
data["2"] = {
		PID: "2",
		tip: "未登录",
		module: "GLOBAL ",
		key: "FA_NO_LOGIN"
};
data["3"] = {
		PID: "3",
		tip: "服务器启动中",
		module: "GLOBAL ",
		key: "FA_STARTING"
};
data["4"] = {
		PID: "4",
		tip: "该服务器没找到此player",
		module: "GLOBAL ",
		key: "FA_NO_PLAYER"
};
data["5"] = {
		PID: "5",
		tip: "uid非法",
		module: "GLOBAL ",
		key: "FA_INVAILD_UID"
};
data["6"] = {
		PID: "6",
		tip: "服务器未启动",
		module: "GLOBAL ",
		key: "FA_NO_SERVER"
};
data["1001"] = {
		PID: "1001",
		tip: "您的帐号或密码错误",
		module: "LOGIN ",
		key: "FA_USER_OR_PASSWORD_INCORRECT"
};
data["1002"] = {
		PID: "1002",
		tip: "帐号不能为空",
		module: "LOGIN ",
		key: "FA_USERNAME_EMPTY"
};
data["1003"] = {
		PID: "1003",
		tip: "密码不能为空",
		module: "LOGIN ",
		key: "FA_PASSWORD_EMPTY"
};
data["1004"] = {
		PID: "1004",
		tip: "无可用游戏服务器",
		module: "LOGIN ",
		key: "FA_NO_SERVER_AVAILABLE"
};
data["1020"] = {
		PID: "1020",
		tip: "帐号格式错误",
		module: "LOGIN ",
		key: "FA_USERNAME_FORMAT_INCORRECT"
};
data["1021"] = {
		PID: "1021",
		tip: "该帐号已经存在，请勿重复注册",
		module: "LOGIN ",
		key: "FA_USERNAME_EXIST"
};
data["1022"] = {
		PID: "1022",
		tip: "该帐号不存在，获取验证码失败",
		module: "LOGIN ",
		key: "FA_USERNAME_NOT_EXIST"
};
data["1024"] = {
		PID: "1024",
		tip: "请输入正确的验证码",
		module: "LOGIN ",
		key: "FA_VERIFY_CODE_INCORRECT"
};
data["1025"] = {
		PID: "1025",
		tip: "请输入正确的验证码",
		module: "LOGIN ",
		key: "FA_VERIFY_CODE_EMPTY"
};
data["1026"] = {
		PID: "1026",
		tip: "亲，操作太频繁，请您稍后再试",
		module: "LOGIN ",
		key: "FA_VERIFY_CODE_RESEND_TIME_INCORRECT"
};
data["1027"] = {
		PID: "1027",
		tip: "您的验证码已过期",
		module: "LOGIN ",
		key: "FA_VERIFY_CODE_EXPIRED"
};
data["1028"] = {
		PID: "1028",
		tip: "新密码不能与原密码一样",
		module: "LOGIN ",
		key: "FA_UPDATE_PASSWORD_DUPLICATE"
};
data["1040"] = {
		PID: "1040",
		tip: "亲，您已经在该牌桌内",
		module: "ROOM ",
		key: "FA_ENTRY_ROOM_DUPLICATE"
};
data["1041"] = {
		PID: "1041",
		tip: "亲，该牌桌无效",
		module: "ROOM ",
		key: "FA_INVAILD_ROOMID"
};
data["1060"] = {
		PID: "1060",
		tip: "错误的金额",
		module: "GOLD ",
		key: "FA_NUMBER"
};
data["1061"] = {
		PID: "1061",
		tip: "游戏币不足了，是时候充值了。",
		module: "GOLD ",
		key: "FA_LACK"
};
data["1101"] = {
		PID: "1101",
		tip: "登入验证失败",
		module: "ENTRY ",
		key: "FA_TOKEN_INVALID"
};
data["1102"] = {
		PID: "1102",
		tip: "已登录，请勿重复登录",
		module: "ENTRY ",
		key: "FA_HAS_LOGIN"
};
data["1103"] = {
		PID: "1103",
		tip: "正在登陆中，请勿重复登录",
		module: "ENTRY ",
		key: "FA_IN_LOGIN"
};
data["1104"] = {
		PID: "1104",
		tip: "角色已存在",
		module: "ENTRY ",
		key: "FA_ROLE_EXIST"
};
data["1200"] = {
		PID: "1200",
		tip: "亲，该牌桌可能已解散哦",
		module: "TABLE ",
		key: "FA_INVAILD_TID"
};
data["1201"] = {
		PID: "1201",
		tip: "玩家未在桌里",
		module: "TABLE ",
		key: "FA_PLAYER_INVALID"
};
data["1202"] = {
		PID: "1202",
		tip: "亲，您已弃牌，操作无效",
		module: "TABLE ",
		key: "FA_ACTION_FORBID"
};
data["1203"] = {
		PID: "1203",
		tip: "亲，该操作无效哦",
		module: "TABLE ",
		key: "FA_ACTION_ERROR"
};
data["1204"] = {
		PID: "1204",
		tip: "亲，还未轮到您操作哦",
		module: "TABLE ",
		key: "FA_ACTION_TURN_ERROR"
};
data["1205"] = {
		PID: "1205",
		tip: "加注金额最少需要一个大盲哦",
		module: "TABLE ",
		key: "FA_ACTION_BET_LESS"
};
data["1206"] = {
		PID: "1206",
		tip: "亲比赛桌不允许此操作哦！",
		module: "TABLE",
		key: "FA_MATCH_TABLE"
};
data["1220"] = {
		PID: "1220",
		tip: "玩家不再牌桌内",
		module: "TABLE ",
		key: "FA_PLAYER_NOT_IN_TABLE"
};
data["1222"] = {
		PID: "1222",
		tip: "牌桌无空座",
		module: "TABLE ",
		key: "FA_NO_EMPTY_SEAT"
};
data["1221"] = {
		PID: "1221",
		tip: "玩家已在牌桌内坐下",
		module: "TABLE ",
		key: "FA_PLAYER_IS_IN_SEAT"
};
data["1223"] = {
		PID: "1223",
		tip: "玩家未在牌桌内坐下",
		module: "TABLE ",
		key: "FA_PLAYER_NOT_IN_SEAT"
};
data["1224"] = {
		PID: "1224",
		tip: "亲，您带入的筹码数量不符哦",
		module: "TABLE ",
		key: "FA_BRINGNUM_INCORRECT"
};
data["1225"] = {
		PID: "1225",
		tip: "亲，玩家已经坐满，请您等待",
		module: "TABLE ",
		key: "FA_TABLE_FULL"
};
data["1226"] = {
		PID: "1226",
		tip: "亲，玩家已经坐满，请您等待",
		module: "TABLE ",
		key: "FA_SEAT_FULL"
};
data["1227"] = {
		PID: "1227",
		tip: "亲正在进入或坐下，请不要重复发请求",
		module: "TABLE ",
		key: "FA_IS_JOINING"
};
data["1228"] = {
		PID: "1228",
		tip: "亲，手动最多只能开3桌哦！",
		module: "TABLE ",
		key: "FA_MAX_TABLE"
};
data["1229"] = {
		PID: "1229",
		tip: "您正在打牌中，下局才可离桌",
		module: "TABLE ",
		key: "FA_IS_PLAYING"
};
data["1230"] = {
		PID: "1230",
		tip: "您的筹码不够了，不能继续牌局",
		module: "TABLE ",
		key: "FA_NO_BET"
};
data["1231"] = {
		PID: "1231",
		tip: "留座中，不能参与新牌局",
		module: "TABLE ",
		key: "FA_IS_RETAIN"
};
data["1232"] = {
		PID: "1232",
		tip: "该座位已被其他玩家抢占",
		module: "TABLE ",
		key: "FA_SEAT_IS_TAKE"
};
data["1233"] = {
		PID: "1233",
		tip: "您的游戏时间已超过防沉迷限制",
		module: "TABLE ",
		key: "FA_MAX_ONLINETIME"
};
data["1234"] = {
		PID: "1234",
		tip: "亲，该操作无效哦",
		module: "TABLE ",
		key: "FA_SHOWCARD_WRONG"
};
data["1235"] = {
		PID: "1235",
		tip: "您的每日输赢已经超过了限制，不能继续打牌",
		module: "TABLE ",
		key: "FA_MAX_PROFIT"
};
data["1236"] = {
		PID: "1236",
		tip: "正在旁观，请不要重复发送请求加入牌桌",
		module: "TABLE ",
		key: "FA_IS_LOOKING"
};
data["1237"] = {
		PID: "1237",
		tip: "如前无需带入",
		module: "TABLE ",
		key: "FA_WITHOUT_BRING"
};
data["1300"] = {
		PID: "1300",
		tip: "该邮件不存在",
		module: " MAIL ",
		key: "FA_MAIL_NOT_EXIST"
};
data["1301"] = {
		PID: "1301",
		tip: "附件已提取",
		module: " MAIL ",
		key: "FA_MAIL_EXTRACT_DUPLICATE"
};
data["1302"] = {
		PID: "1302",
		tip: "该邮件附件未提取还不能删除哦",
		module: " MAIL ",
		key: "FA_MAIL_NOT_EXTRACT"
};
data["1303"] = {
		PID: "1303",
		tip: "无附件",
		module: " MAIL ",
		key: "FA_MAIL_ITEM_NOTHING"
};
data["1400"] = {
		PID: "1400",
		tip: "不能重复申请",
		module: "GODDESS ",
		key: "FA_APPLY_GODDESS_DUPLICATE"
};
data["1401"] = {
		PID: "1401",
		tip: "女神认证正在审核中",
		module: "GODDESS ",
		key: "FA_GODDESS_IN_AUDITING"
};
data["1402"] = {
		PID: "1402",
		tip: "该玩家还不是女神，不能献花哦",
		module: "GODDESS ",
		key: "FA_PLAYER_IS_NOT_GODDESS"
};
data["1403"] = {
		PID: "1403",
		tip: "女神们不能给自己献花哦",
		module: "GODDESS ",
		key: "FA_CAN_NOT_PRESENT_TO_SELF"
};
data["1404"] = {
		PID: "1404",
		tip: "您的请求太过频繁，请稍候再试",
		module: "GODDESS ",
		key: "FA_APPLY_TOO_FREQUENTLY"
};
data["1420"] = {
		PID: "1420",
		tip: "亲，签到已过期",
		module: "SIGNIN ",
		key: "FA_OVER_DUE"
};
data["1421"] = {
		PID: "1421",
		tip: "亲，不能重复签到哦",
		module: "SIGNIN ",
		key: "FA_DUPLICATE"
};
data["1440"] = {
		PID: "1440",
		tip: "已达到背包上限",
		module: "BAG ",
		key: "FA_ITEM_MAX"
};
data["1441"] = {
		PID: "1441",
		tip: "道具数量不足",
		module: "BAG ",
		key: "FA_ITEM_LACK"
};
data["1442"] = {
		PID: "1442",
		tip: "请填写正确的收货信息哦",
		module: "BAG ",
		key: "FA_ADDITION_INVALID"
};
data["1443"] = {
		PID: "1443",
		tip: "无效道具",
		module: "BAG ",
		key: "FA_ITEM_INVALID"
};
data["1500"] = {
		PID: "1500",
		tip: "已报名",
		module: "Match ",
		key: "AlreadyApply"
};
data["1501"] = {
		PID: "1501",
		tip: "报名中，请勿重复点击",
		module: "Match ",
		key: "Applying"
};
data["1502"] = {
		PID: "1502",
		tip: "比赛不存在",
		module: "Match ",
		key: "NoMatch"
};
data["1503"] = {
		PID: "1503",
		tip: "亲，该比赛报名人数已满",
		module: "Match ",
		key: "ApplyMax"
};
data["1504"] = {
		PID: "1504",
		tip: "亲，没有报名可用的花费",
		module: "Match ",
		key: "NoMoney"
};
data["1505"] = {
		PID: "1505",
		tip: "您的门票不足，不能报名哦",
		module: "Match ",
		key: "CostType"
};
data["1506"] = {
		PID: "1506",
		tip: "亲，未到报名时间，不能报名哦",
		module: "Match ",
		key: "Time"
};
data["1507"] = {
		PID: "1507",
		tip: "亲，您未报名哦",
		module: "Match ",
		key: "NoApply"
};
data["1508"] = {
		PID: "1508",
		tip: "比赛未开始或已结束",
		module: "Match ",
		key: "NoGaming"
};
data["1509"] = {
		PID: "1509",
		tip: "rebuy的参数不正确",
		module: "Match ",
		key: "RebuyParam"
};
data["1510"] = {
		PID: "1510",
		tip: "亲，Rebuy次数已用尽。",
		module: "Match ",
		key: "RebuyMax"
};
data["1511"] = {
		PID: "1511",
		tip: "亲，已错过addon时机，无法继续addon了。",
		module: "Match ",
		key: "AddonTimeout"
};
data["1512"] = {
		PID: "1512",
		tip: "亲，addon次数已用尽。",
		module: "Match ",
		key: "AddonMax"
};
data["1513"] = {
		PID: "1513",
		tip: "亲，比赛即将开始，无法退赛",
		module: "Match ",
		key: "QuitExpire"
};
data["1514"] = {
		PID: "1514",
		tip: "该比赛禁止报名",
		module: "Match ",
		key: "ApplyForbid"
};
data["1515"] = {
		PID: "1515",
		tip: "亲，同一阶段比赛不能重复报名哦",
		module: "Match ",
		key: "ApplyGroup"
};
data["1601"] = {
		PID: "1601",
		tip: "用户不存在",
		module: "AntiAddiction",
		key: "FA_USER_NOT_EXIST"
};
data["1602"] = {
		PID: "1602",
		tip: "您的身份证或真实姓名错误",
		module: "AntiAddiction",
		key: "FA_REALNAME"
};
data["1603"] = {
		PID: "1603",
		tip: "您的身份证或真实姓名错误",
		module: "AntiAddiction",
		key: "FA_ID_CODE"
};
data["1604"] = {
		PID: "1604",
		tip: "您已经通过认证",
		module: "AntiAddiction",
		key: "FA_ALREADY_AUTH"
};
data["1650"] = {
		PID: "1650",
		tip: "您与该玩家已经是好友",
		module: "Friend",
		key: "FA_ALREADY_FRIENDS"
};
data["1651"] = {
		PID: "1651",
		tip: "好友申请提交太频繁请稍后再试",
		module: "Friend",
		key: "FA_APPLY_TOO_FREQUENTLY"
};
data["1652"] = {
		PID: "1652",
		tip: "您的好友已达到上限",
		module: "Friend",
		key: "FA_FRIEND_MAX"
};
data["1653"] = {
		PID: "1653",
		tip: "好友申请已过期",
		module: "Friend",
		key: "FA_APPLY_NOT_EXIST"
};
data["1654"] = {
		PID: "1654",
		tip: "您与该玩家还不是好友关系",
		module: "Friend",
		key: "FA_NOT_FRIENDS"
};
data["1655"] = {
		PID: "1655",
		tip: "该玩家好友上限已满",
		module: "Friend",
		key: "FA_OTHER_SIDE_FRIEND_MA"
};
data["1656"] = {
		PID: "1656",
		tip: "对方已屏蔽好友申请",
		module: "Friend",
		key: "FA_SHIELD_FRIEND_APPLY"
};
data["1700"] = {
		PID: "1700",
		tip: "请输入正确的昵称",
		module: "Role",
		key: "FA_NICK_FORMAT_ERROR"
};
data["1701"] = {
		PID: "1701",
		tip: "昵称已经存在",
		module: "Role",
		key: "FA_NICK_EXIST"
};
data["1702"] = {
		PID: "1702",
		tip: "请选择性别",
		module: "Role",
		key: "FA_SEX_ERROR"
};
data["1750"] = {
		PID: "1750",
		tip: "牌局不存在",
		module: "GameHistory",
		key: "FA_NOT_EXIST"
};
data["1751"] = {
		PID: "1751",
		tip: "您的牌谱已达上限",
		module: "GameHistory",
		key: "FA_FAVORITE_MAX"
};
data["1752"] = {
		PID: "1752",
		tip: "亲，牌谱上限已扩充到最大",
		module: "GameHistory",
		key: "FA_FAVORITE_ENLARGE_MAX"
};
data["1753"] = {
		PID: "1753",
		tip: "亲，该牌局您已经收藏过了哦",
		module: "GameHistory",
		key: "FA_FAVORITE_DUPLICATE"
};
data["1800"] = {
		PID: "1800",
		tip: "图标尚未解锁",
		module: "Icon",
		key: "FA_IS_LOCKED"
};
data["1801"] = {
		PID: "1801",
		tip: "图标重复购买",
		module: "Icon",
		key: "FA_BUY_DUPLICATE"
};
data["1802"] = {
		PID: "1802",
		tip: "图标不存在",
		module: "Icon",
		key: "FA_ICON_INVALID"
};
data["1850"] = {
		PID: "1850",
		tip: "亲，您已领取过新手引导初始资金哦",
		module: "NewbieGuide",
		key: "FA_IS_DONE"
};
data["10001"] = {
		PID: "10001",
		tip: "请输入要喊话的内容",
		module: "",
		key: ""
};
data["10101"] = {
		PID: "10101",
		tip: "请输入正确的微信号",
		module: "",
		key: ""
};
data["10102"] = {
		PID: "10102",
		tip: "认证提交成功，请等待客服确认",
		module: "",
		key: ""
};
data["10103"] = {
		PID: "10103",
		tip: "女神认证正在审核中，请10分钟内不要重复提交",
		module: "",
		key: ""
};
data["10201"] = {
		PID: "10201",
		tip: "实物兑换成功，请等待客服确认",
		module: "",
		key: ""
};
data["10202"] = {
		PID: "10202",
		tip: "改头换面成功",
		module: "",
		key: ""
};
data["10301"] = {
		PID: "10301",
		tip: "十分钟内请勿重复认证",
		module: "",
		key: ""
};
data["10401"] = {
		PID: "10401",
		tip: "该玩家已离线，不能旁观",
		module: "",
		key: ""
};
data["10402"] = {
		PID: "10402",
		tip: "请先加为好友，才能聊天",
		module: "",
		key: ""
};
data["10403"] = {
		PID: "10403",
		tip: "好友申请发送成功",
		module: "",
		key: ""
};
data["10404"] = {
		PID: "10404",
		tip: "你已成功与该玩家断绝好友关系",
		module: "",
		key: ""
};
data["10405"] = {
		PID: "10405",
		tip: "添加好友成功，快与好友开始互动吧",
		module: "",
		key: ""
};
data["10406"] = {
		PID: "10406",
		tip: "对不起，无法查找到该玩家，请重新查找",
		module: "",
		key: ""
};
data["10407"] = {
		PID: "10407",
		tip: "对不起，无法查找自己",
		module: "",
		key: ""
};
data["10408"] = {
		PID: "10408",
		tip: "请输入要搜索玩家的ID或名称",
		module: "",
		key: ""
};
data["10409"] = {
		PID: "10409",
		tip: "请输入要聊天的内容",
		module: "",
		key: ""
};
data["10410"] = {
		PID: "10410",
		tip: "该好友不在牌桌中，无法旁观",
		module: "",
		key: ""
};
data["10411"] = {
		PID: "10411",
		tip: "不可输入特殊字符",
		module: "",
		key: ""
};
data["10502"] = {
		PID: "10502",
		tip: "您输入的昵称有非法字符",
		module: "",
		key: ""
};
data["10601"] = {
		PID: "10601",
		tip: "亲，昵称不能为空",
		module: "",
		key: ""
};
data["10701"] = {
		PID: "10701",
		tip: "亲，您的ACE币不足，只能购买这么多",
		module: "",
		key: ""
};
data["10801"] = {
		PID: "10801",
		tip: "加购成功。",
		module: "",
		key: ""
};
data["10802"] = {
		PID: "10802",
		tip: "增购成功。",
		module: "",
		key: ""
};
data["10901"] = {
		PID: "10901",
		tip: "恭喜您已进入奖圈，真是可喜可贺！",
		module: "",
		key: ""
};
data["10902"] = {
		PID: "10902",
		tip: "恭喜您已进入决赛，真是可喜可贺！",
		module: "",
		key: ""
};
data["11001"] = {
		PID: "11001",
		tip: "最少也要购买1个哦！",
		module: "",
		key: ""
};
module.exports = data;

cc._RF.pop();
},{}],"FoldCrdsAnimaJS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '14c5eq9WvFEM6Y5Rk2F+bCi', 'FoldCrdsAnimaJS');
// Scripts/Other/FoldCrdsAnimaJS.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        CrdsNd: cc.Node },

    // use this for initialization
    onLoad: function onLoad() {},

    // 新的 播放弃牌动画 用于历史牌局，历史牌局做完了在改牌桌
    playFoldAnimation: function playFoldAnimation(endPos) {
        var self = this;
        var curTiem = 0.3;
        self.CrdsNd.stopAllActions();
        self.CrdsNd.active = true;
        self.CrdsNd.setPosition(cc.p(0, 0));
        self.CrdsNd.setOpacity(255);
        var TgtPos = cc.p(0, 0);
        var finish = cc.callFunc(function () {
            self.CrdsNd.setPosition(cc.p(0, 0));
            self.CrdsNd.active = false;
        });
        var action = cc.sequence(cc.spawn(cc.fadeOut(curTiem), cc.moveTo(curTiem, endPos)), finish);
        self.CrdsNd.runAction(action);
    },

    onResetFoldAnimation: function onResetFoldAnimation() {
        this.CrdsNd.setPosition(cc.p(0, 0));
        this.CrdsNd.active = false;
    }

});

cc._RF.pop();
},{}],"Globals":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'a4dc8EEkaJCTIfsjaJ+zndh', 'Globals');
// Scripts/Tools/Globals.js

"use strict";

/**
 *
 * playerInfo's properties
 * avatar,bag,bean,flower,gameCount,gold,idCode,inFlopAnteBet,inFlopAnteNoBet,inFlopFold,inFlopRaise,isGoddess,isVip,
 * matchs,maxWinBet,nick,postFlopCall,postFlopRaise,preFlopCall,preFlopCallRaise,preFlopNoRaise,preFlopRaise,sex,
 * signInEnable,signInTimes,uid,winCount
 *
 */

var getTimer = function getTimer() {
    var timer = Date.now() - Global.diffTimer;
    return timer;
};

window.Global = {
    statgeWidth: 1920,
    statgeHeight: 1080,

    gameManager: null,
    preloadManager: null,
    networkManager: null,
    musicManager: null,
    resourceManager: null,
    animationManager: null,
    gameEventManager: null,
    messageManager: null,
    tableDataManager: null,
    roomDataManager: null,
    champDataManager: null,
    cellphoneInfoManager: null,
    paymentManager: null,
    historyPlayCardsManager: null, //历史记录
    simulateFightManager: null, //前端模拟打牌管理器
    worldSpeakDataManager: null, //喊话数 据
    anySdkManager: null,
    playerInfoCacheManager: null,
    voiceManager: null,

    playerInfo: null,
    pid: null,
    serverId: 30001,
    // 是否是切后台返回的请求消息
    isReturnBackstageRequest: false,
    // game is close;
    isGameClose: false,
    isRuningInBackGround: false,
    //set the flag true or not when the scene is loading
    loadingSceneName: "",
    versionsNumber: "",

    //we are not allow playing cards when the text snippets is coming,fuck u ~lol
    allowPlayCards: true,
    //switch the login with userCenter
    isDebug: true,
    allowHotUpdate: true,
    //show the serverList whether or not where at login's scene
    showServerList: true,
    //iosReview'version what need to hide some function,like player's sex ,ranking,some unopen func,and shop(temporary).
    iosReview: false,
    //Whether open voice chat
    isPlayVoice: true,
    isOpenLog: true,

    getTimer: getTimer,
    offsetTimer: null,
    startTimer: null,
    diffTimer: null

};

cc._RF.pop();
},{}],"HexSha1JS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '27849CJWKVJFKnia70kCmwN', 'HexSha1JS');
// Scripts/Tools/HexSha1JS.js

"use strict";

/*
*
* A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
* in FIPS PUB 180-1
*
* By lizq
*
* 2006-11-11
*
*/
/*
 *
 * Configurable variables.
 *
 */
var hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase */
var chrsz = 8; /* bits per input character. 8 - ASCII; 16 - Unicode */
/*
 *
 * The main function to calculate message digest
 *
 */
function hex_sha1(s) {

  return binb2hex(core_sha1(AlignSHA1(s)));
}

/*
 *
 * Perform a simple self-test to see if the VM is working
 *
 */
function sha1_vm_test() {

  return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";
}

/*
 *
 * Calculate the SHA-1 of an array of big-endian words, and a bit length
 *
 */
function core_sha1(blockArray) {

  var x = blockArray; // append padding
  var w = Array(80);

  var a = 1732584193;

  var b = -271733879;

  var c = -1732584194;

  var d = 271733878;

  var e = -1009589776;

  for (var i = 0; i < x.length; i += 16) // 每次处理512位 16*32
  {

    var olda = a;

    var oldb = b;

    var oldc = c;

    var oldd = d;

    var olde = e;

    for (var j = 0; j < 80; j++) // 对每个512位进行80步操作
    {

      if (j < 16) w[j] = x[i + j];else w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);

      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));

      e = d;

      d = c;

      c = rol(b, 30);

      b = a;

      a = t;
    }

    a = safe_add(a, olda);

    b = safe_add(b, oldb);

    c = safe_add(c, oldc);

    d = safe_add(d, oldd);

    e = safe_add(e, olde);
  }

  return new Array(a, b, c, d, e);
}

/*
 *
 * Perform the appropriate triplet combination function for the current
 * iteration
 *
 * 返回对应F函数的值
 *
 */
function sha1_ft(t, b, c, d) {

  if (t < 20) return b & c | ~b & d;

  if (t < 40) return b ^ c ^ d;

  if (t < 60) return b & c | b & d | c & d;

  return b ^ c ^ d; // t<80
}

/*
 *
 * Determine the appropriate additive constant for the current iteration
 *
 * 返回对应的Kt值
 *
 */
function sha1_kt(t) {

  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
}

/*
 *
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 *
 * to work around bugs in some JS interpreters.
 *
 * 将32位数拆成高16位和低16位分别进行相加，从而实现 MOD 2^32 的加法
 *
 */
function safe_add(x, y) {

  var lsw = (x & 0xFFFF) + (y & 0xFFFF);

  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);

  return msw << 16 | lsw & 0xFFFF;
}

/*
 *
 * Bitwise rotate a 32-bit number to the left.
 *
 * 32位二进制数循环左移
 *
 */
function rol(num, cnt) {

  return num << cnt | num >>> 32 - cnt;
}

/*
 *
 * The standard SHA1 needs the input string to fit into a block
 *
 * This function align the input string to meet the requirement
 *
 */
function AlignSHA1(str) {

  var nblk = (str.length + 8 >> 6) + 1,
      blks = new Array(nblk * 16);

  for (var i = 0; i < nblk * 16; i++) {
    blks[i] = 0;
  }for (i = 0; i < str.length; i++) {

    blks[i >> 2] |= str.charCodeAt(i) << 24 - (i & 3) * 8;
  }blks[i >> 2] |= 0x80 << 24 - (i & 3) * 8;

  blks[nblk * 16 - 1] = str.length * 8;

  return blks;
}

/*
 *
 * Convert an array of big-endian words to a hex string.
 *
 */
function binb2hex(binarray) {

  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";

  var str = "";

  for (var i = 0; i < binarray.length * 4; i++) {

    str += hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 & 0xF);
  }

  return str;
}

/*
 *
 * calculate MessageDigest accord to source message that inputted
 *
 */
// function calcDigest(){
//
//     var digestM = hex_sha1(document.SHAForm.SourceMessage.value);
//
//     document.SHAForm.MessageDigest.value = digestM;
//
// }


module.exports = {
  hex_sha1: hex_sha1

};

cc._RF.pop();
},{}],"HistoryPlayCardsManager":[function(require,module,exports){
(function (Buffer){
"use strict";
cc._RF.push(module, '218f6UEOPdI1Zk6eBchExu+', 'HistoryPlayCardsManager');
// Scripts/Manager/HistoryPlayCardsManager.js

"use strict";

var Config = require("Config");
var UITools = require("UITools");
var HistoryPlayCardsManager = cc.Class({

    onInit: function onInit() {
        this.curGameData = {
            "gameData": {
                "message Action": {
                    "required sInt32 seat": 1,
                    "required sInt32 action": 2,
                    "optional sInt32 num": 3
                },
                "message Gamer": {
                    "required sInt32 uid": 1,
                    "required sInt32 seat": 2,
                    "required sInt32 startChip": 3,
                    "required sInt32 endChip": 4,
                    "repeated sInt32 selfCard": 5,
                    "optional sInt32 ante": 6,
                    "optional sInt32 newBlind": 7,
                    "optional sInt32 smallBlind": 8,
                    "optional sInt32 bigBlind": 9,
                    "repeated sInt32 showCard": 10,
                    "required string nick": 11,
                    "required string avatar": 12
                },
                "repeated Gamer gamers": 1,
                "repeated sInt32 rounds": 2,
                "repeated Action actions": 3,
                "repeated sInt32 showCard": 4,
                "required sInt32 dealerSeat": 5,
                "required sInt32 smallBlindSeat": 6,
                "required sInt32 bigBlindSeat": 7,
                "required sInt32 pid": 8,
                "required sInt32 bigBlind": 9,
                "required sInt32 smallBlind": 10,
                "required sInt32 ante": 11,
                "required sInt32 seatMax": 12,
                "required sInt32 createAt": 13,
                "optional sInt32 matchPid": 14
            }
        };
        this.onClearHistoryData();
    },

    // 切换到登陆界面的时候清理数据
    onClearHistoryData: function onClearHistoryData() {
        this.RecentSelectList = []; //选择列表
        this.RecentList = []; //时间列表
        this.WrinnigList = []; //输赢列表
        this.ConllectionList = []; //收藏列表
        // cc.sys.localStorage.clear(); 
        this.RecentPageDict = {};
        this.WrinningPageDict = {};
        this.CollectionPageDict = {};
        this.RecentDict = {}; //最近时间列表对象
        this.ConllectionDict = {}; //收藏对象
    },

    // 初始化最近100局
    initRecentGames: function initRecentGames(curList) {
        // console.log("::initRecentGames::;",curList);
        for (var key in curList) {
            var curListObj = curList[key];
            if (null == curListObj) {
                this.removeRecentData(key);
            } else {
                var obj = { curId: key, cachePlayCardData: null, winBet: curListObj.winBet, createTime: 0,
                    curTimeIndex: 0, curWrinIndex: 0, curCollectionIndex: 0, isCollectionState: true };
                this.RecentDict[key] = obj;
            }
        }
        // 时间排序
        this.udpateRecentListData();
        // 输赢排序
        this.udpateWrinningListData();
    },

    // 是否在收藏列表
    isExistCollectList: function isExistCollectList(curKey) {
        for (var key in this.ConllectionDict) {
            if (curKey == key) {
                return true;
            }
        }
        return false;
    },

    // 初始化收藏列表
    initCollectionGames: function initCollectionGames(curList) {
        // console.log("::initCollectionGames::;",curList);
        for (var key in curList) {
            var curListObj = curList[key];
            if (null == curListObj) {
                this.removedConllectData(key);
            } else {
                var obj = { curId: key, cachePlayCardData: null, winBet: curListObj.winBet, createTime: 0,
                    curTimeIndex: 0, curWrinIndex: 0, curCollectionIndex: 0, isCollectionState: true };
                this.ConllectionDict[key] = obj;
            }
        }
        this.udpateCollectListData();
    },

    // --------------------History time------------------
    // 移除缓存数据
    removeRecentData: function removeRecentData(curKey) {
        for (var key in this.RecentDict) {
            if (curKey == key) {
                delete this.RecentDict[key];
                break;
            }
        }
    },

    // 获取时间和输赢的历史记录
    getRecentListData: function getRecentListData() {
        this.udpateRecentListData();
        return this.RecentList;
    },

    // 时间排序
    udpateRecentListData: function udpateRecentListData() {
        this.RecentList = [];
        this.RecentPageDict = [];
        for (var key in this.RecentDict) {
            this.RecentList.push(this.RecentDict[key]);
        }

        this.RecentList.sort(function (a, b) {
            var timeA = a.curId;
            var timeB = b.curId;
            return timeB - timeA;
        });
        var data;
        var count = this.RecentList.length;
        for (var i = 0; i < this.RecentList.length; i++) {
            data = this.RecentList[i];
            data.curTimeIndex = count;
            count--;
        }
        var num = Math.ceil(this.RecentList.length / 5);
        var count = 0;
        for (var i = 0; i < num; i++) {
            var list = [];
            for (var j = 0; j < 5; j++) {
                list.push(this.RecentList[count]);
                count++;
                if (count >= this.RecentList.length) {
                    break;
                }
            }
            this.RecentPageDict[i] = list;
        }
        // console.log("::::::num:::::::",num,":::",this.RecentPageDict);
    },

    getWrinningListData: function getWrinningListData() {
        this.udpateWrinningListData();
        return this.WrinnigList;
    },

    // 输赢排序
    udpateWrinningListData: function udpateWrinningListData() {
        this.WrinnigList = [];
        this.WrinningPageDict = [];
        for (var key in this.RecentDict) {
            this.WrinnigList.push(this.RecentDict[key]);
        }

        this.WrinnigList.sort(function (a, b) {
            var timeA = a.winBet;
            var timeB = b.winBet;
            return timeB - timeA;
        });
        var data;
        var count = this.WrinnigList.length;
        for (var i = 0; i < this.WrinnigList.length; i++) {
            data = this.WrinnigList[i];
            data.curWrinIndex = count;
            count--;
        }
        var num = Math.ceil(this.WrinnigList.length / 5);
        var count = 0;
        for (var i = 0; i < num; i++) {
            var list = [];
            for (var j = 0; j < 5; j++) {
                list.push(this.WrinnigList[count]);
                count++;
                if (count >= this.WrinnigList.length) {
                    break;
                }
            }
            this.WrinningPageDict[i] = list;
        }
        // console.log("::::::num:::::::",num,":::",this.WrinningPageDict);
    },
    // 收藏
    udpateCollectListData: function udpateCollectListData() {
        this.ConllectionList = [];
        this.CollectionPageDict = [];
        for (var key in this.ConllectionDict) {
            // console.log("::this.ConllectionDict[key]::",this.ConllectionDict[key]);
            this.ConllectionList.push(this.ConllectionDict[key]);
        }

        this.ConllectionList.sort(function (a, b) {
            var timeA = a.curId;
            var timeB = b.curId;
            return timeB - timeA;
        });
        var data;
        var count = this.ConllectionList.length;
        for (var i = 0; i < this.ConllectionList.length; i++) {
            data = this.ConllectionList[i];
            data.curCollectionIndex = count;
            count--;
        }
        var num = Math.ceil(this.ConllectionList.length / 5);
        var count = 0;
        for (var i = 0; i < num; i++) {
            var list = [];
            for (var j = 0; j < 5; j++) {
                list.push(this.ConllectionList[count]);
                count++;
                if (count >= this.ConllectionList.length) {
                    break;
                }
            }
            this.CollectionPageDict[i] = list;
        }
    },

    // 获取第X页的数据
    getRecentPageData: function getRecentPageData(data, RecentCallBack) {
        var curPage = data.page;
        this.curType = data.type;
        this.RecentCallBack = null;
        if (this.curType == 1) {
            this.CurrentUserList = this.RecentPageDict;
        } else if (this.curType == 2) {
            this.CurrentUserList = this.WrinningPageDict;
        }
        this.RecentSelectList = this.CurrentUserList[curPage];
        if (!this.RecentSelectList) {
            RecentCallBack(false, null);
            return;
        }
        // console.log("::this.RecentSelectList:::",this.RecentSelectList);
        for (var i = 0; i < this.RecentSelectList.length; i++) {
            var curObj = this.RecentSelectList[i];
            if (curObj) {
                curObj.isCollectionState = this.isExistCollectList(curObj.curId);
            }
        }

        var isRequest = false;
        for (var j = 0; j < this.RecentSelectList.length; j++) {
            var curObj = this.RecentSelectList[j];
            if (curObj.cachePlayCardData == null) {
                var bufdata = this.getLocalStorage(curObj.curId);
                if (!!bufdata) {
                    var curData = this.decodeGameData(new Buffer(bufdata));
                    curObj.createTime = curData.createAt;
                    curObj.cachePlayCardData = curData;
                    this.RecentDict[curObj.curId] = curObj;
                } else {
                    isRequest = true;
                }
            }
        }
        if (true == isRequest) {
            this.RecentCallBack = RecentCallBack;
            var list = [];
            for (var j = 0; j < this.RecentSelectList.length; j++) {
                var curObj = this.RecentSelectList[j];
                list.push(curObj.curId);
            }
            var obj = { ids: list };
            Global.messageManager.onGetRecentGames(obj, this.getRecentList.bind(this));
        } else {
            RecentCallBack(true, this.RecentSelectList);
        }
    },

    // 获取列表回调
    getRecentList: function getRecentList(_data) {
        // console.log(":::;_data::1111::",_data);
        if (_data.code != 0 || _data.data == undefined) {
            if (this.RecentCallBack) {
                this.RecentCallBack(false, null);
            }
            Global.uiManager.hideLoading();
            return false;
        }
        var data;
        for (var i = 0; i < _data.data.length; i++) {
            data = _data.data[i];
            var obj = this.RecentDict[data.id];
            this.setLocalStorage(data);
            var curData = this.decodeGameData(new Buffer(data.gameData));
            obj.createTime = curData.createAt;
            obj.cachePlayCardData = curData;
            this.RecentDict[data.id] = obj;
        }
        if (this.RecentCallBack) {
            this.RecentCallBack(true, this.RecentSelectList);
        }
    },

    // --------------------History collection收藏------------------
    // 获取第X页的数据
    getConllectPageData: function getConllectPageData(data, RecentCallBack) {
        var curPage = data.page;
        this.RecentCallBack = null;
        this.RecentSelectList = this.CollectionPageDict[curPage];
        if (!this.RecentSelectList) {
            RecentCallBack(false, null);
            return;
        }
        // console.log(":getConllectPageData:::",this.RecentSelectList);
        var isRequest = false;
        for (var j = 0; j < this.RecentSelectList.length; j++) {
            var curObj = this.RecentSelectList[j];
            if (curObj.cachePlayCardData == null) {
                var bufdata = this.getLocalStorage(curObj.curId);
                if (!!bufdata) {
                    var curData = this.decodeGameData(new Buffer(bufdata));
                    curObj.createTime = curData.createAt;
                    curObj.cachePlayCardData = curData;
                    this.ConllectionDict[curObj.curId] = curObj;
                } else {
                    isRequest = true;
                }
            }
        }
        if (true == isRequest) {
            this.RecentCallBack = RecentCallBack;
            var list = [];
            for (var j = 0; j < this.RecentSelectList.length; j++) {
                var curObj = this.RecentSelectList[j];
                list.push(curObj.curId);
            }
            var obj = { ids: list };
            Global.messageManager.onGetCollectionGames(obj, this.getConllectList.bind(this));
        } else {
            RecentCallBack(true, this.RecentSelectList);
        }
    },

    getConllectList: function getConllectList(_data) {
        //console.log(":::;_data2222::::",_data);
        if (_data.code != 0 || _data.data == undefined) {
            if (this.RecentCallBack) {
                this.RecentCallBack(false, null);
            }
            Global.uiManager.hideLoading();
            return false;
        }
        var data;
        for (var i = 0; i < _data.data.length; i++) {
            data = _data.data[i];
            var obj = this.ConllectionDict[data.id];
            this.setLocalStorage(data);
            var curData = this.decodeGameData(new Buffer(data.gameData));
            obj.createTime = curData.createAt;
            obj.cachePlayCardData = curData;
            this.ConllectionDict[data.id] = obj;
        }
        // console.log(":::;_data::::",_data);
        if (this.RecentCallBack) {
            this.RecentCallBack(true, this.RecentSelectList);
        }
    },

    // 移除缓存数据
    removedConllectData: function removedConllectData(key) {
        if (true == this.isExistCollectList(key)) {
            delete this.ConllectionDict[key];
            this.udpateCollectListData();
        }
    },
    // 添加收藏列表
    addConllectData: function addConllectData(curData) {
        if (false == this.isExistCollectList(curData.curId)) {
            this.ConllectionDict[curData.curId] = curData;
            this.udpateCollectListData();
        }
    },

    // 更新收藏状态
    updateConllectState: function updateConllectState(curData) {
        for (var key in this.RecentDict) {
            if (curData.curId == key) {
                this.RecentDict[curData.curId] = curData;
                break;
            }
        }
    },

    // 获取收藏的历史记录
    getConllectListData: function getConllectListData() {
        this.udpateCollectListData();
        return this.ConllectionList;
    },

    // 数据格式化
    decodeGameData: function decodeGameData(curData) {
        var protos = protobuf.parse(this.curGameData);
        // console.log(":::protos:::",protos);
        protobuf.init({ encoderProtos: protos, decoderProtos: protos });
        return protobuf.decode('gameData', curData);
    },

    // 设置存储的数据
    setLocalStorage: function setLocalStorage(data) {
        var buf = new Buffer(data.gameData);
        var localData = buf.toString('base64');
        UITools.GameLocalStorage.set(data.id, localData);
    },

    // 获取存储的数据
    getLocalStorage: function getLocalStorage(curId) {
        var localData = UITools.GameLocalStorage.get(curId);
        if (!!localData) {
            var buf = Buffer.from(localData, 'base64');
            return buf;
        }
        return false;
    }

});

module.exports = HistoryPlayCardsManager;

cc._RF.pop();
}).call(this,require("buffer").Buffer)
},{"Config":"Config","UITools":"UITools","buffer":2}],"HistoryPlayerCtrlJS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '8b14e0tgkJGkJRJoQvu3wI4', 'HistoryPlayerCtrlJS');
// Scripts/UI/HistoryPlayCards/HistoryPlayerCtrlJS.js

'use strict';

var UITools = require('UITools');
var IconsData = require('IconDataJs');
var Config = require("Config");
var GameActionType = Config.GameActionType;
var GamerStatus = Config.GamerStatus;
var PokerJS = require('PokerJS');
var AnimaEnumType = cc.Enum({
    ANIMA_ALLIN: 0, //Allin
    ANIMA_RAISE: 1 });
cc.Class({
    extends: cc.Component,

    properties: {
        PlayerIcon: cc.Sprite, //玩家ICONsetIconCicle
        LabelContent: cc.Sprite, //下注筹码显示
        PlayerName: cc.Label, //玩家名字
        PlayerMoney: cc.Label, //玩家钱
        PlayerCard1: cc.Node, //第一张牌
        PlayerCard2: cc.Node, //第二张牌
        DealerIcon: cc.Sprite, //庄位显示
        HandleIcon: cc.Sprite, //加注显示图标(操作状态)
        ResultNode: cc.Node, //结算金额显示节点
        ProgressBar: cc.ProgressBar, //进度条
        PkrNameLabel: cc.Label, //牌型名
        CardNameIcon: cc.Sprite, //牌型名图片资源
        PkrNameBkg: cc.Sprite, //牌型名背景
        WinPatical: cc.Node, //赢粒子效果
        JettonLayer: cc.Node, //筹码显示层
        JettonProfab: cc.Prefab, //筹码预制
        CircelImg: cc.Sprite, //头像圈
        AnimaNd: cc.Node, //动画节点
        MaskIcon: cc.Sprite, //遮罩Icon
        ShowContent: cc.Node, //显示内容
        FoldCrdAnimaPrefab: cc.Prefab, //弃牌动画预制
        NotPlayerIcon: cc.Sprite },

    // use this for initialization
    onLoad: function onLoad() {
        //筹码文本位置
        this.ConfigPosList = [{ "mIndex": 0, "dealerPos": cc.p(136, -27), "pos": cc.p(90, 64), "anchor": cc.v2(0, 0.5), "isLeft": true }, { "mIndex": 1, "dealerPos": cc.p(118, 3), "pos": cc.p(90, 55), "anchor": cc.v2(0, 0.5), "isLeft": true }, { "mIndex": 2, "dealerPos": cc.p(138, -42), "pos": cc.p(120, -161), "anchor": cc.v2(0, 0.5), "isLeft": true }, { "mIndex": 3, "dealerPos": cc.p(148, -20), "pos": cc.p(145, -109), "anchor": cc.v2(0, 0.5), "isLeft": true }, { "mIndex": 4, "dealerPos": cc.p(-149, -18), "pos": cc.p(-130, -107), "anchor": cc.v2(1, 0.5), "isLeft": false }, { "mIndex": 5, "dealerPos": cc.p(-138, -40), "pos": cc.p(-125, -138), "anchor": cc.v2(1, 0.5), "isLeft": false }, { "mIndex": 6, "dealerPos": cc.p(-110, 46), "pos": cc.p(-110, -3), "anchor": cc.v2(1, 0.5), "isLeft": false }, { "mIndex": 7, "dealerPos": cc.p(-138, -29), "pos": cc.p(-100, 65), "anchor": cc.v2(1, 0.5), "isLeft": false }, { "mIndex": 8, "dealerPos": cc.p(-163, 7), "pos": cc.p(113, 98), "anchor": cc.v2(0, 0.5), "isLeft": true }];

        this.item1CardEndPos = cc.p(173, -133);
        this.item2CardEndPos = cc.p(73, -124);
        this.cardItemPosList = [{ "mIndex": 0, "Star0Pos": cc.p(1681, 1900), "Star1Pos": cc.p(1532, 1900), "flodPos": cc.p(649, 212) }, { "mIndex": 1, "Star0Pos": cc.p(1946, 1333), "Star1Pos": cc.p(1792, 1333), "flodPos": cc.p(768, -43) }, { "mIndex": 2, "Star0Pos": cc.p(1679, 815), "Star1Pos": cc.p(1530, 815), "flodPos": cc.p(649, -276) }, { "mIndex": 3, "Star0Pos": cc.p(903, 735), "Star1Pos": cc.p(754, 735), "flodPos": cc.p(299, -312) }, { "mIndex": 4, "Star0Pos": cc.p(-651, 740), "Star1Pos": cc.p(-1570, 740), "flodPos": cc.p(-401, -310) }, { "mIndex": 5, "Star0Pos": cc.p(-1421, 822), "Star1Pos": cc.p(-1570, 822), "flodPos": cc.p(-746, -273) }, { "mIndex": 6, "Star0Pos": cc.p(-1700, 1355), "Star1Pos": cc.p(-1850, 1355), "flodPos": cc.p(-872, -32) }, { "mIndex": 7, "Star0Pos": cc.p(-1421, 1897), "Star1Pos": cc.p(-1570, 1897), "flodPos": cc.p(-747, 211) }, { "mIndex": 8, "Star0Pos": cc.p(173, 1900), "Star1Pos": cc.p(173, 1900), "flodPos": cc.p(101, 247) }];

        this.inItProperties();
    },

    // 初始化全局变量
    inItProperties: function inItProperties() {
        this.curPlayerData = null;
        this.tipsManager = null;
        this.curLookCard = false;
        this.isMatchState = false;
        this._isPlayingFace = false;
        this.targetPos_jettonsPlay = null;
        this._raiseJettonStartPos = null;
        this.foldCrdControl = null;
        this.foldEndPos = cc.p(0, 0); //弃牌动画结束点位置
    },

    // 获取提示框管理器
    getTipsManager: function getTipsManager() {
        if (!this.tipsManager) {
            this.tipsManager = this.ResultNode.getComponent('TipsLabelContentManager');
        }
        return this.tipsManager;
    },

    // 获取弃牌动画控制器
    getFoldAnimationCtrl: function getFoldAnimationCtrl() {
        if (this.foldCrdControl == null && this.FoldCrdAnimaPrefab) {
            var FoldCrdObj = UITools.onCloneInstantiate(this.FoldCrdAnimaPrefab, this.node, cc.p(0, 0));
            this.foldCrdControl = FoldCrdObj.getComponent("FoldCrdsAnimaJS");
        }
        return this.foldCrdControl;
    },

    // 获取筹码控制器
    getJettonControl: function getJettonControl() {
        if (null == this.jettonControl) {
            var jettonObj = UITools.onCloneInstantiate(this.JettonProfab, this.JettonLayer, cc.p(0, 0));
            this.jettonControl = jettonObj.getComponent("JettonCreateControl");
        }
        return this.jettonControl;
    },

    // 筹码文本的显示
    getContentControl: function getContentControl() {
        if (null == this.contentControl) {
            this.contentControl = UITools.onGetNodeCompontent(this.LabelContent, 'ResLabJs');
        }
        return this.contentControl;
    },

    // 获取卡牌1控制器
    getCard1Control: function getCard1Control() {
        if (null == this.cardControl1) {
            this.cardControl1 = UITools.onGetNodeCompontent(this.PlayerCard1, 'CardItemControl');
        }
        return this.cardControl1;
    },

    // 获取卡牌2控制器
    getCard2Control: function getCard2Control() {
        if (null == this.cardControl2) {
            this.cardControl2 = UITools.onGetNodeCompontent(this.PlayerCard2, 'CardItemControl');
        }
        return this.cardControl2;
    },

    // 获取进度条控制器
    getProgressControl: function getProgressControl() {
        if (null == this.ProgressCtrl) {
            this.ProgressCtrl = UITools.onGetNodeCompontent(this.ProgressBar, 'ProgressBarCtrl');
        }
        return this.ProgressCtrl;
    },

    //关闭动画
    stopAnimations: function stopAnimations() {
        if (!!this._fillAnimation) {
            Global.animationManager.stopAnimation(this._fillPath, this._fillAnimation);
        }
        this._fillAnimation = null;
        this._fillPath = "";
    },

    // 播放加注动画
    onPlayAnimation: function onPlayAnimation(nIndex) {
        this.stopAnimations();
        var self = this;
        var animPath = "";
        if (nIndex == GameActionType.RAISE) {
            animPath = "animations/jiazhu/jiazhu";
        } else if (nIndex == GameActionType.ALLIN) {
            animPath = "animations/allin/allin";
        }
        if (animPath != "") {
            Global.animationManager.playAnimation(animPath, self.AnimaNd, function (_res) {
                self._fillAnimation = _res;
                self._fillPath = animPath;
            });
        }
    },

    /////////////////------------------接口调用------------------------
    // 初始化父对象
    onInitParent: function onInitParent(mParent, mIndex) {
        // this.onInitClearData();
        this.curIndex = mIndex;
        this._parentCtrl = mParent;
        var curData;
        for (var i = 0; i < this.ConfigPosList.length; i++) {
            curData = this.ConfigPosList[i];
            if (mIndex == curData.mIndex) {
                UITools.onSetNodePosition(this.DealerIcon.node, curData.dealerPos);
                this.getContentControl().onSetLiftSide(curData.isLeft);
                UITools.onSetNodePosition(this.LabelContent.node, curData.pos);
                // console.log(":::mIndex::::",mIndex);
                break;
            }
        }
        // 清理文本和庄位置的显示
        this.initCleanShow();
        this.initItemCardAnimationPos();
    },

    // 清理所有的数据显示
    onCleanPlayerData: function onCleanPlayerData() {
        this.onClearSchedule();
    },

    // 清理显示的内容
    initCleanShow: function initCleanShow() {
        this.getContentControl().onHide();
        this.getJettonControl().resetData();
        UITools.onSetNodeVisible(this.DealerIcon.node, false);
        UITools.onSetNodeVisible(this.HandleIcon.node, false);
    },

    // 设置卡牌动画坐标
    initItemCardAnimationPos: function initItemCardAnimationPos() {
        var curData;
        for (var i = 0; i < this.cardItemPosList.length; i++) {
            curData = this.cardItemPosList[i];
            if (this.curIndex == curData.mIndex) {
                this.getCard1Control().setAnimationPos(curData.Star0Pos, this.item1CardEndPos);
                this.getCard2Control().setAnimationPos(curData.Star1Pos, this.item2CardEndPos);
                this.foldEndPos = curData.flodPos;
                break;
            }
        }
    },

    // 设置跳跃播放的时候玩家的牌的显示
    onSetJumpData: function onSetJumpData(curData) {
        // console.log("::;curData::",curData);
        this.curPlayerData = curData;
        if (this.curPlayerData.uid == undefined) {
            UITools.onSetNodeVisible(this.ShowContent, false);
            this.setNotPlayerIconState(true);
            return;
        }
        this.getCard1Control().ResetCrdPos();
        this.getCard2Control().ResetCrdPos();
        var curAction = this.curPlayerData.action;
        if (curAction == GameActionType.FOLD) {
            this.onSetBgResPositionState(false);
            this.onSetOpacity(true);
            var sImg = this.curPlayerData.GetActionflagImg(curAction, false);
            //特殊弃牌情况不播放动画
            if (null != this.HandleIcon) {
                UITools.SetSpriteImg(this.HandleIcon, sImg);
                UITools.onSetNodeVisible(this.HandleIcon.node, true);
            }
            if (this.curPlayerData.IsPlayerSelf()) {
                this.getCard1Control().onSetData(this.curPlayerData.showCard[0], false);
                this.getCard2Control().onSetData(this.curPlayerData.showCard[1], false);
                this.getCard1Control().onSetMaskShow(true);
                this.getCard2Control().onSetMaskShow(true);
            }
        } else {
            if (this.curPlayerData.IsPlayerSelf()) {
                this.getCard1Control().onSetData(this.curPlayerData.showCard[0], false);
                this.getCard2Control().onSetData(this.curPlayerData.showCard[1], false);
            } else {
                this.onSetBgResPositionState(true);
                this.onSetOpacity(false);
            }
        }
        if (this.curPlayerData.chip <= 0) {
            this.curPlayerData.chip = 0;
            this.onChangActionflagImg(GameActionType.ALLIN);
        }
        this.updateMoney();
    },

    // 初始化数据
    initPlayerData: function initPlayerData(curData, playerIndex) {
        // console.log("::curData::",curData);
        if (playerIndex == undefined) playerIndex = 1;
        UITools.onSetNodeVisible(this.HandleIcon.node, false);
        this.onCleanPlayerData();
        this.onSetOpacity(false);

        this.ResultNode.removeAllChildren();
        this.curPlayerData = curData;
        this.onSetShowDealerIcon(this.curPlayerData.isDealer);
        // console.log(":::this.curPlayerData:::",this.curPlayerData,this.node.name);
        if (this.curPlayerData.uid == undefined) {
            UITools.onSetNodeVisible(this.ShowContent, false);
            this.setNotPlayerIconState(true);
            return;
        }
        UITools.onSetNodeVisible(this.ShowContent, true);
        this.setNotPlayerIconState(false);
        this.setResData();
        var self = this;
        self.scheduleOnce(function () {
            self.onSetCardData(false, self.curPlayerData.showCard);
        }, playerIndex * 0.05);
        //console.log("::this.curPlayerData.chip::",this.curPlayerData.chip,this.curPlayerData.nick);
        if (this.curPlayerData.chip <= 0) {
            this.curPlayerData.chip = 0;
            this.onChangActionflagImg(GameActionType.ALLIN);
        }
        // 设置资源的显示
        this.setJettonShow(this.curPlayerData.MyShowBetIn, true);
    },

    // 更新玩家金钱
    updateMoney: function updateMoney() {
        // 玩家金钱
        UITools.onSetUILabelString(this.PlayerMoney, UITools.onNumTransfer(this.curPlayerData.chip));
    },

    // 设置资源
    setResData: function setResData() {
        // cc.log("历史牌局this.Nick:"+this.curPlayerData.nick + " this.isDealer:"+this.curPlayerData.isDealer.toString());
        this.setCircleIconData();
        this.updateMoney();
        // 玩家名字
        UITools.onSetUILabelString(this.PlayerName, decodeURI(this.curPlayerData.nick));
        //头像设置
        var iconInf = IconsData.GetIconInf(this.curPlayerData.avatar);
        // cc.log(" :::iconInf:::",iconInf);
        var self = this;
        if (iconInf) {
            Global.resourceManager.loadRes(iconInf.IconRes, function (resData) {
                var frameData = new cc.SpriteFrame(resData);
                self.PlayerIcon.spriteFrame = frameData;
            });
        }
    },

    // 设置头像圈设置
    setCircleIconData: function setCircleIconData() {
        if (!this.curPlayerData) return;
        //头像圈设置
        var iconInf = 'Textures/Icon/img_rapid01';
        if (this.curPlayerData.IsPlayerSelf()) {
            iconInf = 'Textures/Icon/img_rapid';
        }
        this.setIconCicle(iconInf);
    },

    //设置头像圈
    setIconCicle: function setIconCicle(cicleStr) {
        var self = this;
        if (cicleStr) {
            Global.resourceManager.loadRes(cicleStr, function (resData) {
                if (self.CircelImg) {
                    var spf = new cc.SpriteFrame(resData);
                    self.CircelImg.spriteFrame = spf;
                }
            });
        }
    },

    // 庄位置显示
    onSetShowDealerIcon: function onSetShowDealerIcon(isShow) {
        UITools.onSetNodeVisible(this.DealerIcon.node, isShow);
    },

    // 设置卡牌
    onSetCardData: function onSetCardData(isOpen, cardData) {
        if (!cardData || cardData.length == 0) return;

        if (this.curPlayerData.IsPlayerSelf()) {
            this.scheduleOnce(function () {
                this.getCard1Control().onPlayerSelfPlayCard(cardData[0]);
                this.getCard1Control().playCardSound();
            }, 0.1);
            this.scheduleOnce(function () {
                this.getCard2Control().onPlayerSelfPlayCard(cardData[1]);
                this.getCard2Control().playCardSound();
            }, 0.3);
            var CrdVal = PokerJS.isTwainPoker(cardData);
            if (true == CrdVal) {
                this.SetPkrName("num_yidui");
            }
        } else {
            if (true == isOpen) {
                if (cardData[0] == 0 && cardData[1] == 0) {
                    this.onSetBgResPositionState(true);
                } else {
                    this.onOpenCard(cardData);
                }
            } else {
                this.scheduleOnce(function () {
                    this.getCard1Control().onSetIconData(0);
                    this.getCard1Control().playCardSound();
                }, 0.1);
                this.scheduleOnce(function () {
                    this.getCard2Control().onSetIconData(0);
                    this.getCard2Control().playCardSound();
                }, 0.3);
            }
        }
    },

    // 亮牌 1表示亮第一张2表示亮第二张，3表示全亮
    onOpenCard: function onOpenCard(cardData) {
        this.getCard1Control().onOpenCard(cardData[0]);
        this.getCard2Control().onOpenCard(cardData[1]);
        if (cardData[0] > 0 && cardData[1] > 0) {
            var RoomData = this._parentCtrl.curRoomData;
            var pubCrd = RoomData.showCard;
            if (!RoomData || !pubCrd) return;
            if (pubCrd.length == 5) {
                var CardAry = cardData.concat(pubCrd);
                var CrdVal = PokerJS.makeSurePoker(CardAry);
                if (!!CrdVal && CrdVal.OutCrd.length > 0) {
                    var curName = CrdVal.ResName;
                    console.log("亮牌的牌型 === " + curName);
                    this.SetPkrName(curName);
                }
            }
        }
    },

    // 清理计时器
    onClearSchedule: function onClearSchedule() {
        this.getProgressControl().ClearScheduler();
    },

    // 添加倒计时
    onAddActionTime: function onAddActionTime(curTime) {
        if (curTime <= 0) {
            this.onClearSchedule();
            return;
        }
        this.stopAnimations();
        this.onClearSchedule();
        var timeNum = curTime;
        var MaxTM = this.curPlayerData.actionMaxTime;
        var isSelf = this.curPlayerData.IsPlayerSelf();
        if (timeNum > 0) {
            // 思考中
            var sImg = 'Textures/otherTextures/img_thinking';
            UITools.SetSpriteImg(this.HandleIcon, sImg);
            UITools.onSetNodeVisible(this.HandleIcon.node, true);
        }
        // console.log("timeNum == ",timeNum,MaxTM);
        this.getProgressControl().onSetData(isSelf, timeNum, MaxTM);
        if (isSelf) {
            Global.musicManager.PlayNameSound('tixing');
        }
    },

    // 设置筹码的显示
    setJettonShow: function setJettonShow(vBet, isInit) {
        //玩家下注金额
        // var vBet = this.curPlayerData.MyShowBetIn;
        if (vBet <= 0) {
            this.getJettonControl().resetData();
            return;
        }
        if (!isInit) {
            var num = parseInt(this.curPlayerData.chip) - parseInt(vBet);
            if (num <= 0) {
                num = 0;
                var sImg = this.curPlayerData.GetActionflagImg(GameActionType.ALLIN, true);
                UITools.SetSpriteImg(this.HandleIcon, sImg);
                UITools.onSetNodeVisible(this.HandleIcon.node, true);
            }
            this.curPlayerData.chip = num;
            vBet += parseInt(this.curPlayerData.MyShowBetIn);
            this.curPlayerData.MyShowBetIn = vBet;
        } else {
            var num = parseInt(this.curPlayerData.chip);
            if (num <= 0) {
                var sImg = this.curPlayerData.GetActionflagImg(GameActionType.ALLIN, true);
                UITools.SetSpriteImg(this.HandleIcon, sImg);
                UITools.onSetNodeVisible(this.HandleIcon.node, true);
            }
            this.curPlayerData.chip = num;
        }
        this.getContentControl().onSetData(vBet);
        //get the label's position to set the jetton's start pos
        if (this._raiseJettonStartPos == null) {
            var labelPos = this.LabelContent.node.getPosition();
            this._raiseJettonStartPos = cc.p(labelPos.x, labelPos.y);
        }
        var startPos = this.getContentControl().getJettonStartPos(vBet, this._raiseJettonStartPos);
        this.getJettonControl().SetJettonNum(vBet, startPos, Global.isRuningInBackGround == false);
        if (Global.isRuningInBackGround == false && vBet > 0) {
            this.getJettonControl().playAnimationToRaisePos();
        }
        this.updateMoney();
    },

    // action状态显示控
    onChangActionflagImg: function onChangActionflagImg(curAction) {
        //console.log(":::curAction:::",curAction);
        var bShow = false;
        var sImg = this.curPlayerData.GetActionflagImg(curAction, true);
        UITools.SetSpriteImg(this.HandleIcon, sImg);
        // console.log("onChangActionflagImg === ",sImg);
        bShow = sImg.length > 0;
        // console.log("this.curPlayerData === ",this.curPlayerData.action,this.node.name);
        if (curAction == GameActionType.RAISE) {
            this.onPlayAnimation(AnimaEnumType.ANIMA_RAISE);
        } else if (curAction == GameActionType.ALLIN) {
            this.onPlayAnimation(AnimaEnumType.ANIMA_ALLIN);
        } else if (curAction == GameActionType.FOLD) {
            bShow = true;
            this.onSetBgResPositionState(false);
            this.onSetOpacity(true);
            this.showFoldCrdAnima();
            if (this.curPlayerData.IsPlayerSelf()) {
                this.getCard1Control().onSetMaskShow(true);
                this.getCard2Control().onSetMaskShow(true);
            }
        } else {
            this.stopAnimations();
        }
        if (curAction == 0) {
            bShow = false;
        }
        //console.log("onChangActionflagImg === ",sImg,bShow,curAction);
        // action状态显示控制
        if (null != this.HandleIcon) {
            UITools.onSetNodeVisible(this.HandleIcon.node, bShow);
        }
        this.onClearSchedule();
    },

    // 设置半透
    onSetOpacity: function onSetOpacity(isOpacity) {
        // console.log("onSetOpacity :: ",isOpacity);
        UITools.onSetNodeVisible(this.MaskIcon.node, isOpacity);
    },

    // 停止特效
    stopWinEffect: function stopWinEffect() {
        if (!this.WinPatical) return;
        UITools.onSetNodeVisible(this.WinPatical, false);
    },

    //显示赢动画
    ShowWinAnma: function ShowWinAnma(sMsg) {
        this.ShowPopMsg(sMsg);
        if (!this.WinPatical) return;
        UITools.onSetNodeVisible(this.WinPatical, true);
        var ParticleSys = this.WinPatical.getComponent(cc.ParticleSystem);
        if (!!ParticleSys) {
            ParticleSys.resetSystem();
        }
        if (this.curPlayerData) {
            //头像圈设置
            var iconInf = 'Textures/Icon/img_contrast01';
            if (this.curPlayerData.IsPlayerSelf()) {
                iconInf = 'Textures/Icon/img_contrast';
            }
            this.setIconCicle(iconInf);
        }
    },

    // 显示向上飘动的提示消息
    ShowPopMsg: function ShowPopMsg(curValue) {
        if (this.node == null || !this.node.active) return;
        var sMsg = "";
        if (curValue > 0) {
            this.curPlayerData.chip = this.curPlayerData.endChip;
            sMsg = "+" + curValue;
            this.getTipsManager().onSetData(sMsg);
        }
        this.updateMoney();
    },

    // 如果玩家输了 但是钱没有输完调用此
    gameOverUpdateMoney: function gameOverUpdateMoney() {
        if (this.curPlayerData.endChip) {
            this.curPlayerData.chip = this.curPlayerData.endChip;
            this.updateMoney();
        }
    },

    //设置牌型名称
    SetPkrName: function SetPkrName(sName) {
        if (sName && this.PkrNameBkg) {
            var self = this;
            self.CardNameIcon.spriteFrame = Global.resourceManager.getSpriteFrameFromAtlas("Textures/Num/NumAtlas", sName);
            UITools.onSetNodeVisible(self.PkrNameBkg.node, true);
        }
    },
    //显示牌型
    ShowMyCrdType: function ShowMyCrdType(myCardAry, pubCrd, isShow) {
        if (!this.curPlayerData || !myCardAry) return;
        if (pubCrd.length != 5 || myCardAry.length == 0 || myCardAry[0] == 0 || myCardAry[1] == 0) {
            return;
        }
        var CardAry = myCardAry.concat(pubCrd);
        var CrdVal = this.onGetPokerType(CardAry);
        // console.log("牌型数据 === ", CrdVal,this.node.name);
        if (!!CrdVal && CrdVal.OutCrd.length > 0) {
            var curName = CrdVal.ResName;
            if (true == isShow) {
                curName = CrdVal.ResName + "0";
            }
            this.SetPkrName(curName);
        }
    },

    // 获取牌型
    onGetPokerType: function onGetPokerType(CardAry) {
        var CrdVal = PokerJS.makeSurePoker(CardAry);
        return CrdVal;
    },

    // 播放亮卡牌动画
    onPlayUpPokerAni: function onPlayUpPokerAni(myCardAry, pubCrd, isSipping) {
        if (!this.curPlayerData || !myCardAry) return;
        if (pubCrd.length != 5 || myCardAry.length == 0 || myCardAry[0] == 0 || myCardAry[1] == 0) {
            return;
        }
        var CardAry = myCardAry.concat(pubCrd);
        var CrdVal = this.onGetPokerType(CardAry);
        if (!!CrdVal && isSipping) {
            this.UpPokerAry(CrdVal.OutCrd); //CrdVal.OutCrd);
        }
        return CrdVal;
    },

    //刷新牌型显示(公共牌张数大于0)
    RefCrdType: function RefCrdType(pubCrd) {
        if (pubCrd.length <= 0) return;
        var curStates = this.curPlayerData.status;
        if (curStates == GamerStatus.PLAY) {
            var CardAry = this.curPlayerData.showCard.concat(pubCrd);
            var CrdVal = PokerJS.makeSurePoker(CardAry);
            if (!!CrdVal && !!CrdVal.PkrName) {
                this.SetPkrName(CrdVal.ResName);
            }
        }
    },

    //显示成牌牌型,参与牌型的牌跳起
    UpPokerAry: function UpPokerAry(upCardAry) {
        if (!!this._parentCtrl) {
            this._parentCtrl.UpPubCard(upCardAry); //公共牌
        }
        var MyCrd1 = this.getCard1Control().GetCardNum();
        var MyCrd2 = this.getCard2Control().GetCardNum();
        if (this.isInUpCard(upCardAry, MyCrd1)) {
            this.getCard1Control().onPlayerAni();
        } else {
            this.getCard1Control().ResetCrdPos();
            this.getCard1Control().onSetMaskShow(true);
        }

        if (this.isInUpCard(upCardAry, MyCrd2)) {
            this.getCard2Control().onPlayerAni();
        } else {
            this.getCard2Control().ResetCrdPos();
            this.getCard2Control().onSetMaskShow(true);
        }
    },

    //可以跳起的牌
    isInUpCard: function isInUpCard(upCardAry, nNum) {

        if (upCardAry.length <= 0) return false;

        for (var i = 0; i < upCardAry.length; ++i) {
            var nCrdNum = upCardAry[i];
            if (nCrdNum.indx == nNum) {
                return true;
            }
        }
        return false;
    },

    // 筹码的特殊清理
    clearShowJetton: function clearShowJetton(_startPos) {
        // console.log(":::clearShowJetton:::",this.curPlayerData,Global.isRuningInBackGround);
        this.targetPos_jettonsPlay = _startPos;
        if (Global.isRuningInBackGround == false) {
            this.scheduleOnce(this.onPlayJettonAnimation, .5);
        } else {
            this.getJettonControl().resetData();
            this.getContentControl().onHide();
        }
        this.curPlayerData.MyShowBetIn = 0;

        // 隐藏操作状态
        var curAction = this.curPlayerData.action;
        if (curAction != GameActionType.FOLD && curAction != GameActionType.ALLIN) {
            UITools.onSetNodeVisible(this.HandleIcon.node, false);
        }
    },

    // 播放筹码回主池动画
    onPlayJettonAnimation: function onPlayJettonAnimation() {
        var curAction = this.curPlayerData.action;
        // if(Config.GameActionType.CHECK == curAction || Config.GameActionType.FOLD == curAction || Config.GameActionType.NONE == curAction)return;

        if (Global.isRuningInBackGround == false) {
            var targetPos = UITools.local2local(this._parentCtrl.node, this.node, this.targetPos_jettonsPlay);
            this.getJettonControl().playAnimationToPoolPos(targetPos);
        } else this.getJettonControl().resetData();

        if (this.curPlayerData.IsPlayerSelf()) {
            Global.musicManager.PlayNameSound('chouma');
        }

        this.getContentControl().onHide();
    },

    //显示弃牌动画修改
    showFoldCrdAnima: function showFoldCrdAnima() {
        if (this.getFoldAnimationCtrl()) {
            this.getFoldAnimationCtrl().playFoldAnimation(this.foldEndPos);
        }
    },

    // 游戏结束清理所有的显示
    onGameOverClean: function onGameOverClean() {
        this.onSetOpacity(false);
        this.stopWinEffect();
        this.getCard1Control().ResetCrdPos();
        this.getCard2Control().ResetCrdPos();
        this.getJettonControl().resetData();
        this.getContentControl().onHide();
        this.ResultNode.removeAllChildren();
        UITools.onSetNodeVisible(this.HandleIcon.node, false);
        UITools.onSetNodeVisible(this.PkrNameBkg.node, false);
        this.getTipsManager().onClearData();
        this.onCleanPlayerData();
        // 清理卡牌数据
        this.getCard1Control().onClearData();
        this.getCard2Control().onClearData();
        this.setCircleIconData();
    },

    // 设置卡牌的动画结束
    onSetBgResPositionState: function onSetBgResPositionState(isShow) {
        this.getCard1Control().onSetBgResPositionState(isShow);
        this.getCard2Control().onSetBgResPositionState(isShow);
    },

    // 设置座位没有玩家坐下的时候的显示状态
    setNotPlayerIconState: function setNotPlayerIconState(isShow) {
        if (this.NotPlayerIcon) {
            UITools.onSetNodeVisible(this.NotPlayerIcon.node, isShow);
        }
    }

});

cc._RF.pop();
},{"Config":"Config","IconDataJs":"IconDataJs","PokerJS":"PokerJS","UITools":"UITools"}],"IconDataJs":[function(require,module,exports){
"use strict";
cc._RF.push(module, '603cdRhtY9EmLS67cBa+Z7s', 'IconDataJs');
// Scripts/Tools/IconDataJs.js

'use strict';

//头像配置
var IconsData = [{
    IconID: 1001,
    IconRes: 'Textures/Icon/img_casediagram'
}, {
    IconID: 1002,
    IconRes: 'Textures/Icon/img_casediagram01'
}];

// 根据ID获取头像配置信息
var GetIconInf = function GetIconInf(iconID) {
    var nCount = IconsData.length;
    for (var i = 0; i < nCount; ++i) {
        var IconInf = IconsData[i];
        if (iconID == IconInf.IconID) return IconInf;
    }
    return IconsData[0];
};

module.exports = {
    IconsData: IconsData,
    GetIconInf: GetIconInf
};

cc._RF.pop();
},{}],"Icons":[function(require,module,exports){
"use strict";
cc._RF.push(module, '99573Eu78lL9o2ZMzf2weIp', 'Icons');
// Scripts/GameData/config/Icons.js

"use strict";

var data = [];
data["1006"] = {
		PID: "1006",
		Type: "1",
		Icon: "9001",
		BigIcon: "0",
		Price: "0",
		Default: "1",
		Name: "默认男头像",
		Desc: ""
};
data["1007"] = {
		PID: "1007",
		Type: "1",
		Icon: "9002",
		BigIcon: "0",
		Price: "0",
		Default: "0",
		Name: "默认女头像",
		Desc: ""
};
data["1008"] = {
		PID: "1008",
		Type: "1",
		Icon: "9003",
		BigIcon: "9101",
		Price: "680000",
		Default: "0",
		Name: "狍     狍",
		Desc: "我是个北京人，08年去韩国求学，接受了他们的改装，为一名小鲜肉，爱音乐，爱ace菠萝扑克。我的梦想就是拿到世界扑克巡回赛的冠军。人家说帅的男孩运气都不错，我会为你带来好运。"
};
data["1009"] = {
		PID: "1009",
		Type: "1",
		Icon: "9004",
		BigIcon: "9102",
		Price: "680000",
		Default: "0",
		Name: "晴     子",
		Desc: "我运动，我自豪，做爱做的运动，玩爱玩的的大菠萝，我喜欢运动过后汗流浃背的样子，喜欢运动后散发着活力的味道，我是90后，我敢作敢当，但是叔叔我们不约。"
};
data["1010"] = {
		PID: "1010",
		Type: "1",
		Icon: "9005",
		BigIcon: "9103",
		Price: "680000",
		Default: "0",
		Name: "Tina",
		Desc: "我是Tina，活跃在扑克圈好几年了，我觉得这个圈不乱，至少比职场干净，我用了1年的时间在从小职员晋升到现在的销售总监，其中的心酸只有我才懂，你懂吗？"
};
data["1011"] = {
		PID: "1011",
		Type: "1",
		Icon: "9006",
		BigIcon: "9104",
		Price: "1080000",
		Default: "0",
		Name: "麦     克",
		Desc: "我出生在印第安纳州，一生中两次进入摇滚名人堂，我发明了机械舞，还记得Thriller，Beat it吗？人们好奇我为什么总喜欢孩子们围绕在身边，那是因为我在他们身上找到了我从未拥有过的东西。"
};
data["1037"] = {
		PID: "1037",
		Type: "1",
		Icon: "9007",
		BigIcon: "9105",
		Price: "1080000",
		Default: "0",
		Name: "龙     哥",
		Desc: "出生在澳门，常年混迹在铜锣湾，上学期间是绝对的三好学生，不勘被高年级的欺负，后因母亲病危，为筹集手术费接受了大飞的援助，为人仗义，出道后不断扳倒江湖猛人，成为江湖大哥。"
};
data["1038"] = {
		PID: "1038",
		Type: "1",
		Icon: "9008",
		BigIcon: "9106",
		Price: "1080000",
		Default: "0",
		Name: "Duke",
		Desc: "我是一名来自美国的职业牌手，扑克是我的生命。早在几年前我已赢得了世界最高扑克赛事的冠军金手链，并荣获无数殊荣。如今，我为ace菠萝扑克的金手链而来，你准备好了么？"
};
data["1035"] = {
		PID: "1035",
		Type: "2",
		Icon: "7005",
		BigIcon: "0",
		Price: "0",
		Default: "1",
		Name: "默认牌背1",
		Desc: ""
};
data["1036"] = {
		PID: "1036",
		Type: "2",
		Icon: "7006",
		BigIcon: "0",
		Price: "0",
		Default: "0",
		Name: "默认牌背2",
		Desc: ""
};
data["1044"] = {
		PID: "1044",
		Type: "2",
		Icon: "7007",
		BigIcon: "0",
		Price: "100000",
		Default: "0",
		Name: "鲨鱼牌背",
		Desc: "让我们像鲨鱼一样的杀戮吧！产地：商城"
};
data["1045"] = {
		PID: "1045",
		Type: "2",
		Icon: "7008",
		BigIcon: "0",
		Price: "100000",
		Default: "0",
		Name: "ACE简约牌背",
		Desc: "回归本质的一副牌背，简约奢华的你必备哦！产地：商城"
};
data["1033"] = {
		PID: "1033",
		Type: "3",
		Icon: "7001",
		BigIcon: "0",
		Price: "0",
		Default: "1",
		Name: "默认牌面1",
		Desc: ""
};
data["1034"] = {
		PID: "1034",
		Type: "3",
		Icon: "7002",
		BigIcon: "0",
		Price: "0",
		Default: "0",
		Name: "默认牌面2",
		Desc: ""
};
data["1042"] = {
		PID: "1042",
		Type: "3",
		Icon: "7003",
		BigIcon: "0",
		Price: "100000",
		Default: "0",
		Name: "水晶扑克",
		Desc: "水晶质感的扑克牌，使用后立马高大上！产地:商城"
};
data["1043"] = {
		PID: "1043",
		Type: "3",
		Icon: "7004",
		BigIcon: "0",
		Price: "100000",
		Default: "0",
		Name: "高清扑克",
		Desc: "超大数字，让你秒识别花色和字母，为你带来好运！产地：商城"
};
module.exports = data;

cc._RF.pop();
},{}],"ImgNumJS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '1e491SvUmFGVauvE5f8Yb+6', 'ImgNumJS');
// Scripts/Tools/ImgNumJS.js

"use strict";

var UITools = require('UITools');
cc.Class({
    extends: cc.Component,

    properties: {
        NumNd: cc.Node },

    // use this for initialization
    onLoad: function onLoad() {},

    //数字转换成资源
    NumTransToImg: function NumTransToImg(_altas, _spriteName, _num, _abbreviation) {
        if (_abbreviation == null) _abbreviation = true;
        var temp = _spriteName;
        var sNum = "";
        sNum = _abbreviation == true ? UITools.onNumTransfer2(_num) : "" + _num;
        this.NumNd.removeAllChildren();
        //去掉小数点后无效数字
        var vLen = sNum.length;
        var totalWidth = 0;
        // console.log("sNum == ",sNum)
        for (var i = 0; i < vLen; ++i) {
            _spriteName = temp;
            var node = new cc.Node("New Sprite");
            node.setAnchorPoint(0.5, 0);
            this.NumNd.addChild(node);
            var NumImg = node.addComponent(cc.Sprite);
            NumImg.sizeMode = cc.Sprite.SizeMode.TRIMMED;
            NumImg.trim = true;
            var nNum = sNum[i];
            if ('.' == nNum) {
                nNum = "p";
            } else if ('+' == nNum) {
                nNum = "add";
            } else if ('年' == nNum) {
                //---年,月,日 个人信息生涯有用到
                nNum = "7";
                _spriteName = "num10";
                NumImg.sizeMode = cc.Sprite.SizeMode.RAW; //为让日期分割线居中显示
                NumImg.trim = false;
            } else if ('月' == nNum) {
                nNum = "7";
                _spriteName = "num10";
                NumImg.sizeMode = cc.Sprite.SizeMode.RAW;
                NumImg.trim = false;
            } else if ('日' == nNum) {
                return;
            }

            NumImg.spriteFrame = Global.resourceManager.getSpriteFrameFromAtlas(_altas, _spriteName + "_" + nNum);
            var spriteW = NumImg.spriteFrame.getRect().width;
            totalWidth += spriteW;
        }

        return totalWidth;
    }

});

cc._RF.pop();
},{"UITools":"UITools"}],"ImgRes":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'dff3cIaQQZNLpjeMrV/rPk5', 'ImgRes');
// Scripts/GameData/config/ImgRes.js

"use strict";

var data = [];
data["1001"] = {
		PID: "1001",
		Img: "Item/item_mooncard",
		Desc: "月卡"
};
data["1002"] = {
		PID: "1002",
		Img: "Item/item_tickets",
		Desc: "票"
};
data["1003"] = {
		PID: "1003",
		Img: "Item/daoju_icon_vip",
		Desc: "vip卡"
};
data["2001"] = {
		PID: "2001",
		Img: "Icon/btn_Recharge",
		Desc: "充值6块钱"
};
data["2002"] = {
		PID: "2002",
		Img: "Icon/btn_Recharge01",
		Desc: "充值30块钱"
};
data["2003"] = {
		PID: "2003",
		Img: "Icon/btn_Recharge02",
		Desc: "充值68块钱"
};
data["2004"] = {
		PID: "2004",
		Img: "Icon/btn_Recharge03",
		Desc: "充值128块钱"
};
data["2005"] = {
		PID: "2005",
		Img: "Icon/btn_Recharge04",
		Desc: "充值328块钱"
};
data["2006"] = {
		PID: "2006",
		Img: "Icon/btn_Recharge05",
		Desc: "充值648块钱"
};
data["2007"] = {
		PID: "2007",
		Img: "Icon/btn_Recharge07",
		Desc: "充值"
};
data["3001"] = {
		PID: "3001",
		Img: "Item/daoju_icon_nvshenmeigui",
		Desc: "女神玫瑰"
};
data["3002"] = {
		PID: "3002",
		Img: "Item/daoju_icon_gaimingka",
		Desc: "改名卡"
};
data["3003"] = {
		PID: "3003",
		Img: "Item/daoju_icon_laba",
		Desc: "大喇叭"
};
data["3004"] = {
		PID: "3004",
		Img: "Item/daoju_icon_qionggui",
		Desc: "穷鬼附身"
};
data["3005"] = {
		PID: "3005",
		Img: "Item/daoju_icon_tanke",
		Desc: "拖鞋"
};
data["3006"] = {
		PID: "3006",
		Img: "Item/daoju_icon_guanjunshoulian",
		Desc: "冠军徽章"
};
data["3007"] = {
		PID: "3007",
		Img: "Item/daoju_icon_daodan",
		Desc: "超级炸弹"
};
data["3008"] = {
		PID: "3008",
		Img: "Item/daoju_icon_jidan",
		Desc: "鸡蛋"
};
data["3009"] = {
		PID: "3009",
		Img: "Item/daoju_icon_jiubei",
		Desc: "啤酒"
};
data["3010"] = {
		PID: "3010",
		Img: "Item/daoju_icon_meiguihua",
		Desc: "玫瑰花"
};
data["3011"] = {
		PID: "3011",
		Img: "Item/daoju_icon_baobao",
		Desc: "狍狍"
};
data["3012"] = {
		PID: "3012",
		Img: "Item/daoju_icon_qingzi",
		Desc: "晴子"
};
data["3013"] = {
		PID: "3013",
		Img: "Item/daoju_icon_tina",
		Desc: "Tina"
};
data["3014"] = {
		PID: "3014",
		Img: "Item/daoju_icon_maike",
		Desc: "麦克"
};
data["3015"] = {
		PID: "3015",
		Img: "Item/daoju_icon_longge",
		Desc: "龙哥"
};
data["3016"] = {
		PID: "3016",
		Img: "Item/daoju_icon_duke",
		Desc: "Duke"
};
data["3017"] = {
		PID: "3017",
		Img: "Item/daoju_icon_xiaotou",
		Desc: "偷鸡"
};
data["3018"] = {
		PID: "3018",
		Img: "Item/daoju_icon_gongji0",
		Desc: "抓鸡"
};
data["3019"] = {
		PID: "3019",
		Img: "Item/daoju_match5000w",
		Desc: "5000万快速赛门票"
};
data["4001"] = {
		PID: "4001",
		Img: "otherTextures/huodong_img_pic01",
		Desc: "活动图1"
};
data["4002"] = {
		PID: "4002",
		Img: "otherTextures/huodong_img_pic02",
		Desc: "活动图2"
};
data["4003"] = {
		PID: "4003",
		Img: "otherTextures/huodong_img_pic04",
		Desc: "活动图3"
};
data["4004"] = {
		PID: "4004",
		Img: "otherTextures/huodong_img_pic05",
		Desc: "活动图4"
};
data["4005"] = {
		PID: "4005",
		Img: "otherTextures/huodong_img_pic06",
		Desc: "活动图5"
};
data["5001"] = {
		PID: "5001",
		Img: "Icon/icon_chip",
		Desc: "游戏币"
};
data["5002"] = {
		PID: "5002",
		Img: "Icon/img_joybeans0",
		Desc: "梦幻豆"
};
data["6001"] = {
		PID: "6001",
		Img: "otherTextures/huodong_img_pic03",
		Desc: "更新公告"
};
data["7001"] = {
		PID: "7001",
		Img: "Cards/card52",
		Desc: "默认牌面1"
};
data["7002"] = {
		PID: "7002",
		Img: "Cards/cards_back06",
		Desc: "默认牌面2"
};
data["7003"] = {
		PID: "7003",
		Img: "Cards/cards_back07",
		Desc: "水晶扑克"
};
data["7004"] = {
		PID: "7004",
		Img: "Cards/cards_back08",
		Desc: "高清扑克"
};
data["7005"] = {
		PID: "7005",
		Img: "Cards/cards_back",
		Desc: "默认牌背1"
};
data["7006"] = {
		PID: "7006",
		Img: "Cards/cards_back03",
		Desc: "默认牌背2"
};
data["7007"] = {
		PID: "7007",
		Img: "Cards/cards_back04",
		Desc: "鲨鱼牌背"
};
data["7008"] = {
		PID: "7008",
		Img: "Cards/cards_back05",
		Desc: "ACE简约牌背"
};
data["8001"] = {
		PID: "8001",
		Img: "Icon/Icon_match0",
		Desc: "微信红包"
};
data["8002"] = {
		PID: "8002",
		Img: "Icon/Icon_match1",
		Desc: "ipad"
};
data["8003"] = {
		PID: "8003",
		Img: "Icon/Icon_match2",
		Desc: "手机话费"
};
data["8004"] = {
		PID: "8004",
		Img: "Icon/Icon_match3",
		Desc: "京东卡"
};
data["8005"] = {
		PID: "8005",
		Img: "Icon/Icon_match4",
		Desc: "少量游戏币"
};
data["8006"] = {
		PID: "8006",
		Img: "Icon/Icon_match5",
		Desc: "中等游戏币"
};
data["8007"] = {
		PID: "8007",
		Img: "Icon/Icon_match6",
		Desc: "大量游戏币"
};
data["8008"] = {
		PID: "8008",
		Img: "Icon/Icon_match7",
		Desc: "iphone7"
};
data["9001"] = {
		PID: "9001",
		Img: "Icon/img_casediagram",
		Desc: "默认男头像"
};
data["9002"] = {
		PID: "9002",
		Img: "Icon/img_casediagram01",
		Desc: "默认女头像"
};
data["9003"] = {
		PID: "9003",
		Img: "Icon/img_touxiang03",
		Desc: "狍     狍"
};
data["9004"] = {
		PID: "9004",
		Img: "Icon/img_touxiang04",
		Desc: "晴     子"
};
data["9005"] = {
		PID: "9005",
		Img: "Icon/img_touxiang05",
		Desc: "Tina"
};
data["9006"] = {
		PID: "9006",
		Img: "Icon/img_touxiang06",
		Desc: "麦     克"
};
data["9007"] = {
		PID: "9007",
		Img: "Icon/img_touxiang07",
		Desc: "龙     哥"
};
data["9008"] = {
		PID: "9008",
		Img: "Icon/img_touxiang08",
		Desc: "Duke"
};
data["9101"] = {
		PID: "9101",
		Img: "otherTextures/touxiang_img_character03",
		Desc: "狍     狍"
};
data["9102"] = {
		PID: "9102",
		Img: "otherTextures/touxiang_img_character04",
		Desc: "晴     子"
};
data["9103"] = {
		PID: "9103",
		Img: "otherTextures/touxiang_img_character05",
		Desc: "Tina"
};
data["9104"] = {
		PID: "9104",
		Img: "otherTextures/touxiang_img_character06",
		Desc: "麦     克"
};
data["9105"] = {
		PID: "9105",
		Img: "otherTextures/touxiang_img_character07",
		Desc: "龙     哥"
};
data["9106"] = {
		PID: "9106",
		Img: "otherTextures/touxiang_img_character08",
		Desc: "Duke"
};
module.exports = data;

cc._RF.pop();
},{}],"IntetActItems":[function(require,module,exports){
"use strict";
cc._RF.push(module, '2c129fV9/xH8bUrxpwZ78xq', 'IntetActItems');
// Scripts/GameData/config/IntetActItems.js

"use strict";

var data = [];
data["1000"] = {
		PID: "1000",
		Type: "",
		Item: "11013|1013",
		Buy: "1013",
		Icon: "3005",
		Price: "50000",
		Name: "拖鞋"
};
data["1001"] = {
		PID: "1001",
		Type: "",
		Item: "11901|1901",
		Buy: "1901",
		Icon: "3017",
		Price: "50000",
		Name: "偷鸡"
};
data["1002"] = {
		PID: "1002",
		Type: "",
		Item: "11902|1902",
		Buy: "1902",
		Icon: "3018",
		Price: "50000",
		Name: "抓鸡"
};
data["1003"] = {
		PID: "1003",
		Type: "",
		Item: "11016|1016",
		Buy: "1016",
		Icon: "3007",
		Price: "30000",
		Name: "超级炸弹"
};
data["1004"] = {
		PID: "1004",
		Type: "",
		Item: "11012|1012",
		Buy: "1012",
		Icon: "3004",
		Price: "10000",
		Name: "穷鬼附身"
};
data["1005"] = {
		PID: "1005",
		Type: "",
		Item: "11014|1014",
		Buy: "1014",
		Icon: "3006",
		Price: "10000",
		Name: "冠军徽章"
};
data["1006"] = {
		PID: "1006",
		Type: "",
		Item: "11039|1039",
		Buy: "1039",
		Icon: "3008",
		Price: "2000",
		Name: "鸡蛋"
};
data["1007"] = {
		PID: "1007",
		Type: "",
		Item: "11040|1040",
		Buy: "1040",
		Icon: "3009",
		Price: "2000",
		Name: "啤酒"
};
data["1008"] = {
		PID: "1008",
		Type: "",
		Item: "11041|1041",
		Buy: "1041",
		Icon: "3010",
		Price: "2000",
		Name: "玫瑰花"
};
module.exports = data;

cc._RF.pop();
},{}],"Item":[function(require,module,exports){
"use strict";
cc._RF.push(module, '006d7/NoUxJ3q2rrGxZWbK3', 'Item');
// Scripts/GameData/config/Item.js

"use strict";

var data = [];
data["1000"] = {
		PID: "1000",
		Name: "6万ACE币",
		Type: "1",
		Icon: "2001",
		Value: "60000",
		Gems: "60000",
		Give: "0",
		Desc: "购买该道具后您将直接获得6万ACE币，产地：商城"
};
data["1001"] = {
		PID: "1001",
		Name: "30万ACE币",
		Type: "1",
		Icon: "2002",
		Value: "300000",
		Gems: "300000",
		Give: "0",
		Desc: "购买该道具后您将直接获得30万ACE币，产地：商城"
};
data["1002"] = {
		PID: "1002",
		Name: "68万ACE币",
		Type: "1",
		Icon: "2003",
		Value: "680000",
		Gems: "680000",
		Give: "0",
		Desc: "购买该道具后您将直接获得68万ACE币，产地：商城"
};
data["1003"] = {
		PID: "1003",
		Name: "128万ACE币",
		Type: "1",
		Icon: "2004",
		Value: "1280000",
		Gems: "1280000",
		Give: "0",
		Desc: "购买该道具后您将直接获得128万ACE币，产地：商城"
};
data["1004"] = {
		PID: "1004",
		Name: "328万ACE币",
		Type: "1",
		Icon: "2005",
		Value: "3280000",
		Gems: "3280000",
		Give: "0",
		Desc: "购买该道具后您将直接获得328万ACE币，产地：商城"
};
data["1005"] = {
		PID: "1005",
		Name: "648万ACE币",
		Type: "1",
		Icon: "2006",
		Value: "6480000",
		Gems: "6480000",
		Give: "0",
		Desc: "购买该道具后您将直接获得648万ACE币，产地：商城"
};
data["2001"] = {
		PID: "2001",
		Name: "1万ACE币",
		Type: "1",
		Icon: "2001",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "购买后，您可直接获得1万ACE币，产地：商城"
};
data["2002"] = {
		PID: "2002",
		Name: "10万ACE币",
		Type: "1",
		Icon: "2002",
		Value: "100000",
		Gems: "100000",
		Give: "0",
		Desc: "购买后，您可直接获得10万ACE币，产地：商城"
};
data["2003"] = {
		PID: "2003",
		Name: "100万ACE币",
		Type: "1",
		Icon: "2003",
		Value: "1000000",
		Gems: "1000000",
		Give: "0",
		Desc: "购买后，您可直接获得100万ACE币，产地：商城"
};
data["2004"] = {
		PID: "2004",
		Name: "500万ACE币",
		Type: "1",
		Icon: "2004",
		Value: "5000000",
		Gems: "5000000",
		Give: "0",
		Desc: "购买后，您可直接获得500万ACE币，产地：商城"
};
data["2005"] = {
		PID: "2005",
		Name: "1000万ACE币",
		Type: "1",
		Icon: "2005",
		Value: "10000000",
		Gems: "10000000",
		Give: "0",
		Desc: "购买后，您可直接获得1000万ACE币，产地：商城"
};
data["1006"] = {
		PID: "1006",
		Name: "默认男头像",
		Type: "8",
		Icon: "3003",
		Value: "1001",
		Gems: "1001",
		Give: "1",
		Desc: ""
};
data["1007"] = {
		PID: "1007",
		Name: "默认女头像",
		Type: "8",
		Icon: "3003",
		Value: "1002",
		Gems: "1002",
		Give: "1",
		Desc: ""
};
data["1008"] = {
		PID: "1008",
		Name: "狍狍",
		Type: "8",
		Icon: "3011",
		Value: "680000",
		Gems: "680000",
		Give: "1",
		Desc: "我是个北京人，08年去韩国求学，接受了他们的改装，为一名小鲜肉，爱音乐，爱ACE扑克。我的梦想就是拿到世界扑克巡回赛的冠军。人家说帅的男孩运气都不错，我会为你带来好运。"
};
data["1009"] = {
		PID: "1009",
		Name: "晴子",
		Type: "8",
		Icon: "3012",
		Value: "680000",
		Gems: "680000",
		Give: "1",
		Desc: "我运动，我自豪，做爱做的运动，玩爱玩的的ACE扑克，我喜欢运动过后汗流浃背的样子，喜欢运动后散发着活力的味道，我是90后，我敢作敢当，但是叔叔我们不约。"
};
data["1010"] = {
		PID: "1010",
		Name: "Tina",
		Type: "8",
		Icon: "3013",
		Value: "680000",
		Gems: "680000",
		Give: "1",
		Desc: "我是Tina，活跃在扑克圈好几年了，我觉得这个圈不乱，至少比职场干净，我用了1年的时间在从小职员晋升到现在的销售总监，其中的心酸只有我才懂，你懂吗？"
};
data["1011"] = {
		PID: "1011",
		Name: "麦克",
		Type: "8",
		Icon: "3014",
		Value: "1080000",
		Gems: "1080000",
		Give: "1",
		Desc: "我出生在印第安纳州，一生中两次进入摇滚名人堂，我发明了机械舞，还记得Thriller，Beat it吗？人们好奇我为什么总喜欢孩子们围绕在身边，那是因为我在他们身上找到了我从未拥有过的东西。"
};
data["1012"] = {
		PID: "1012",
		Name: "穷鬼附身",
		Type: "6",
		Icon: "3004",
		Value: "10000",
		Gems: "10000",
		Give: "1",
		Desc: "穷鬼咋了？穷鬼会和你纠缠不清的！！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["1013"] = {
		PID: "1013",
		Name: "拖鞋",
		Type: "6",
		Icon: "3005",
		Value: "50000",
		Gems: "50000",
		Give: "1",
		Desc: "指哪打哪，没有人比我打的更准确！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["1014"] = {
		PID: "1014",
		Name: "冠军徽章",
		Type: "6",
		Icon: "3006",
		Value: "10000",
		Gems: "10000",
		Give: "1",
		Desc: "ACE世界扑克赛的最高荣誉！拥有该此徽章的一般都不是“鱼”购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["1016"] = {
		PID: "1016",
		Name: "超级炸弹",
		Type: "6",
		Icon: "3007",
		Value: "30000",
		Gems: "30000",
		Give: "1",
		Desc: "BOOM的一声就爆炸了！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["1018"] = {
		PID: "1018",
		Name: "大喇叭",
		Type: "9",
		Icon: "3003",
		Value: "120000",
		Gems: "120000",
		Give: "1",
		Desc: "向全服的玩家发出歇斯底里的呐喊吧！拥有该道具后，可在牌桌内使用小喇叭喊话。产地：商城"
};
data["1019"] = {
		PID: "1019",
		Name: "改名卡",
		Type: "9",
		Icon: "3002",
		Value: "980000",
		Gems: "980000",
		Give: "1",
		Desc: "拒绝LOW的名字，拒绝No Fashion的名字，在个人信息中修改昵称必备的道具！产地：商城"
};
data["1020"] = {
		PID: "1020",
		Name: "10元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "100000",
		Gems: "100000",
		Give: "1",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额10元。产地：锦标赛、活动赠送"
};
data["1021"] = {
		PID: "1021",
		Name: "50元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "1",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额50元。产地：锦标赛、活动赠送"
};
data["1022"] = {
		PID: "1022",
		Name: "100元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "1",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额100元。产地：锦标赛、活动赠送"
};
data["1023"] = {
		PID: "1023",
		Name: "Apple iPhone 6S",
		Type: "4",
		Icon: "3003",
		Value: "46000000",
		Gems: "46000000",
		Give: "1",
		Desc: "使用后可以兑换实物iPhone 6S一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["1024"] = {
		PID: "1024",
		Name: "Apple iPad Air",
		Type: "4",
		Icon: "3003",
		Value: "22000000",
		Gems: "22000000",
		Give: "1",
		Desc: "使用后可以兑换实物Apple iPad Air一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["1025"] = {
		PID: "1025",
		Name: "Apple Watch",
		Type: "4",
		Icon: "3003",
		Value: "28000000",
		Gems: "28000000",
		Give: "1",
		Desc: "使用后可以兑换实物Apple Watch一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["1026"] = {
		PID: "1026",
		Name: "10元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "100000",
		Gems: "100000",
		Give: "1",
		Desc: "该卡可兑换10元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：锦标赛、活动赠送"
};
data["1027"] = {
		PID: "1027",
		Name: "50元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "1",
		Desc: "该卡可兑换50元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：锦标赛、活动赠送"
};
data["1028"] = {
		PID: "1028",
		Name: "100元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "1",
		Desc: "该卡可兑换100元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：锦标赛、活动赠送"
};
data["1029"] = {
		PID: "1029",
		Name: "小米NOTE",
		Type: "4",
		Icon: "3003",
		Value: "10000000",
		Gems: "10000000",
		Give: "1",
		Desc: "使用后可以兑换实物小米NOTE一台，在获奖信息中可以查询到奖励发送情况。产地：锦标赛、活动赠送"
};
data["1030"] = {
		PID: "1030",
		Name: "3亿锦标赛门票",
		Type: "2",
		Icon: "3003",
		Value: "3000000",
		Gems: "3000000",
		Give: "1",
		Desc: "3亿ACE币锦标赛的报名门票，周赛只能使用这个报名。产地：锦标赛"
};
data["1031"] = {
		PID: "1031",
		Name: "百万筹码",
		Type: "1",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "1",
		Desc: "里面装着100万ACE币， 使用后里面变成高大上。产地：锦标赛"
};
data["1032"] = {
		PID: "1032",
		Name: "三亿筹码",
		Type: "1",
		Icon: "3003",
		Value: "300000000",
		Gems: "300000000",
		Give: "1",
		Desc: "里面装着3亿ACE币，使用后立马赶超盖茨哥哥。产地：锦标赛"
};
data["1046"] = {
		PID: "1046",
		Name: "iPhone6S争夺赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "1",
		Desc: "iPhone6s争夺赛的报名门票，iPhone6s争夺赛只能使用这个报名。产地：5000WACE币赛、3日连续签到、活动赠送"
};
data["1047"] = {
		PID: "1047",
		Name: "30元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "300000",
		Gems: "300000",
		Give: "1",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额30元。产地：锦标赛、活动赠送"
};
data["1048"] = {
		PID: "1048",
		Name: "88元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "880000",
		Gems: "880000",
		Give: "1",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额88元。产地：锦标赛、活动赠送"
};
data["1049"] = {
		PID: "1049",
		Name: "888元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "8880000",
		Gems: "8880000",
		Give: "1",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额888元。产地：锦标赛、活动赠送"
};
data["1050"] = {
		PID: "1050",
		Name: "888888ACE币",
		Type: "4",
		Icon: "3003",
		Value: "8888880000",
		Gems: "8888880000",
		Give: "1",
		Desc: "菠萝币凭证：联系客服经核实账号获奖情况后，在ACE扑克正式上线时，可获得888888ACE币赠礼。"
};
data["1051"] = {
		PID: "1051",
		Name: "6888888ACE币",
		Type: "4",
		Icon: "3003",
		Value: "68888880000",
		Gems: "68888880000",
		Give: "1",
		Desc: "菠萝币凭证：联系客服经核实账号获奖情况后，在ACE扑克正式上线时，可获得6888888ACE币赠礼。"
};
data["1052"] = {
		PID: "1052",
		Name: "Apple iPad mini",
		Type: "4",
		Icon: "3003",
		Value: "22000000",
		Gems: "22000000",
		Give: "1",
		Desc: "使用后可以兑换实物iPad mini一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["1053"] = {
		PID: "1053",
		Name: "500元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "5000000",
		Gems: "5000000",
		Give: "1",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放500元红包！产地：锦标赛、活动赠送"
};
data["1054"] = {
		PID: "1054",
		Name: "300元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "3000000",
		Gems: "3000000",
		Give: "1",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放300元红包！产地：锦标赛、活动赠送"
};
data["1055"] = {
		PID: "1055",
		Name: "200元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "2000000",
		Gems: "2000000",
		Give: "1",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放200元红包！产地：锦标赛、活动赠送"
};
data["1056"] = {
		PID: "1056",
		Name: "上线庆典赛门票",
		Type: "2",
		Icon: "3003",
		Value: "28800000000",
		Gems: "28800000000",
		Give: "1",
		Desc: "上线庆典赛的报名门票。产地：活动赠送"
};
data["1057"] = {
		PID: "1057",
		Name: "3000万快速赛门票",
		Type: "2",
		Icon: "3003",
		Value: "280000",
		Gems: "280000",
		Give: "1",
		Desc: "3000万快速赛的报名门票。产地：签到、活动赠送"
};
data["1058"] = {
		PID: "1058",
		Name: "666元红包(30级)",
		Type: "3",
		Icon: "3003",
		Value: "6660000",
		Gems: "6660000",
		Give: "1",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放666元红包！产地：锦标赛、活动赠送"
};
data["1059"] = {
		PID: "1059",
		Name: "1亿ACE币赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "1",
		Desc: "1亿ACE币赛的报名门票。产地：活动赠送"
};
data["1060"] = {
		PID: "1060",
		Name: "开业回馈赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "1",
		Desc: "开业回馈赛的报名门票。 产地：活动赠送"
};
data["1061"] = {
		PID: "1061",
		Name: "新年迎春赛门票",
		Type: "2",
		Icon: "3003",
		Value: "2200000",
		Gems: "2200000",
		Give: "1",
		Desc: "新年迎春赛A和新年迎春赛B的报名门票。"
};
data["1062"] = {
		PID: "1062",
		Name: "迎春晋级赛门票",
		Type: "2",
		Icon: "3003",
		Value: "10000000",
		Gems: "10000000",
		Give: "1",
		Desc: "迎春晋级赛的报名门票。产地：新年迎春赛A、新年迎春赛B的第10至18名"
};
data["1063"] = {
		PID: "1063",
		Name: "iPad mini订阅专属赛门票",
		Type: "2",
		Icon: "3003",
		Value: "2000000000",
		Gems: "2000000000",
		Give: "1",
		Desc: "iPad mini订阅专属赛的报名门票。产地：关注官方QQ、公众号可每周领取"
};
data["1064"] = {
		PID: "1064",
		Name: "30元红包(15级)",
		Type: "3",
		Icon: "3003",
		Value: "300000",
		Gems: "300000",
		Give: "1",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放30元红包！产地：活动赠送"
};
data["1065"] = {
		PID: "1065",
		Name: "50元红包(30级以上)",
		Type: "3",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "1",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放50元红包！产地：活动赠送"
};
data["1066"] = {
		PID: "1066",
		Name: "70元红包（30级）",
		Type: "3",
		Icon: "3003",
		Value: "700000",
		Gems: "700000",
		Give: "1",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放70元红包！产地：活动赠送"
};
data["1067"] = {
		PID: "1067",
		Name: "1888元红包（50级）",
		Type: "3",
		Icon: "3003",
		Value: "18880000",
		Gems: "18880000",
		Give: "1",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放1888元红包！产地：活动赠送"
};
data["1068"] = {
		PID: "1068",
		Name: "菠萝大师赛一门票",
		Type: "2",
		Icon: "3003",
		Value: "30000000",
		Gems: "30000000",
		Give: "1",
		Desc: "10亿菠萝大师赛一的报名门票。产地：亚巡赛专属礼包兑换"
};
data["1069"] = {
		PID: "1069",
		Name: "菠萝大师赛二门票",
		Type: "2",
		Icon: "3003",
		Value: "30000000",
		Gems: "30000000",
		Give: "1",
		Desc: "10亿菠萝大师赛二的报名门票。产地：亚巡赛专属礼包兑换"
};
data["1070"] = {
		PID: "1070",
		Name: "菠萝大师赛三门票",
		Type: "2",
		Icon: "3003",
		Value: "30000000",
		Gems: "30000000",
		Give: "1",
		Desc: "10亿菠萝大师赛三的报名门票。产地：亚巡赛专属礼包兑换"
};
data["1071"] = {
		PID: "1071",
		Name: "亚巡赛红牛券",
		Type: "2",
		Icon: "3003",
		Value: "12000000",
		Gems: "12000000",
		Give: "1",
		Desc: "价值1200元的2016亚巡赛北京站红牛券。产地：锦标赛"
};
data["1072"] = {
		PID: "1072",
		Name: "CPG主赛门票",
		Type: "2",
		Icon: "3003",
		Value: "100000000",
		Gems: "100000000",
		Give: "1",
		Desc: "价值10000元的CPG中国海南国际扑克大赛主赛门票，包含5天4晚住宿哦。产地：锦标赛"
};
data["1073"] = {
		PID: "1073",
		Name: "CPG主赛门票争夺赛门票",
		Type: "2",
		Icon: "3003",
		Value: "13000000",
		Gems: "13000000",
		Give: "1",
		Desc: "CPG主赛门票争夺赛的参赛资格。产地：锦标赛"
};
data["1074"] = {
		PID: "1074",
		Name: "MacBook",
		Type: "4",
		Icon: "3003",
		Value: "66880000",
		Gems: "66880000",
		Give: "1",
		Desc: "使用后可以兑换实物MacBook一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["1075"] = {
		PID: "1075",
		Name: "1000面值京东卡",
		Type: "4",
		Icon: "3003",
		Value: "10000000",
		Gems: "10000000",
		Give: "1",
		Desc: "价值1000元的京东卡，可在京东商城购物使用！产地：活动"
};
data["1076"] = {
		PID: "1076",
		Name: "500面值京东卡",
		Type: "4",
		Icon: "3003",
		Value: "5000000",
		Gems: "5000000",
		Give: "1",
		Desc: "价值500元的京东卡，可在京东商城购物使用！产地：活动"
};
data["1077"] = {
		PID: "1077",
		Name: "200面值京东卡",
		Type: "4",
		Icon: "3003",
		Value: "2000000",
		Gems: "2000000",
		Give: "1",
		Desc: "价值200元的京东卡，可在京东商城购物使用！产地：活动"
};
data["1078"] = {
		PID: "1078",
		Name: "CPG卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1100000",
		Gems: "1100000",
		Give: "1",
		Desc: "CPG卫星赛的报名门票。"
};
data["1079"] = {
		PID: "1079",
		Name: "CPG边赛门票",
		Type: "2",
		Icon: "3003",
		Value: "12000000",
		Gems: "12000000",
		Give: "1",
		Desc: "价值1200元的CPG中国海南国际扑克大赛边赛门票。产地：锦标赛"
};
data["1080"] = {
		PID: "1080",
		Name: "CPG边赛门票赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1100000",
		Gems: "1100000",
		Give: "1",
		Desc: "CPG边赛门票赛报名门票。"
};
data["1081"] = {
		PID: "1081",
		Name: "南洋杯门票赛门票",
		Type: "2",
		Icon: "3003",
		Value: "15000000",
		Gems: "15000000",
		Give: "1",
		Desc: "南洋杯/IPO门票赛的报名门票。"
};
data["1082"] = {
		PID: "1082",
		Name: "南洋杯/IPO门票",
		Type: "2",
		Icon: "3003",
		Value: "88000000",
		Gems: "88000000",
		Give: "1",
		Desc: "南洋杯/IPO赛事门票。"
};
data["1083"] = {
		PID: "1083",
		Name: "南洋杯门票",
		Type: "2",
		Icon: "3003",
		Value: "88000000",
		Gems: "88000000",
		Give: "1",
		Desc: "南洋杯赛事门票。"
};
data["1084"] = {
		PID: "1084",
		Name: "南洋杯/IPO卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1500000",
		Gems: "1500000",
		Give: "1",
		Desc: "南洋杯/IPO卫星赛的报名门票。"
};
data["1085"] = {
		PID: "1085",
		Name: "1亿卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "98000",
		Gems: "98000",
		Give: "1",
		Desc: "1亿ACE币卫星赛的报名门票。"
};
data["1086"] = {
		PID: "1086",
		Name: "1亿大奖赛门票",
		Type: "2",
		Icon: "3003",
		Value: "980000",
		Gems: "980000",
		Give: "1",
		Desc: "1亿ACE币大奖赛的报名门票。"
};
data["1087"] = {
		PID: "1087",
		Name: "iPhone7卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "98000",
		Gems: "98000",
		Give: "1",
		Desc: "iPhone7卫星赛的报名门票。"
};
data["1088"] = {
		PID: "1088",
		Name: "iPhone7贺岁赛门票",
		Type: "2",
		Icon: "3003",
		Value: "980000",
		Gems: "980000",
		Give: "1",
		Desc: "iPhone7贺岁赛的报名门票。"
};
data["1089"] = {
		PID: "1089",
		Name: "iPhone7plus",
		Type: "4",
		Icon: "3003",
		Value: "50000000",
		Gems: "50000000",
		Give: "1",
		Desc: "iPhone7plus真机，产地：锦标赛。"
};
data["1090"] = {
		PID: "1090",
		Name: "iPad Pro",
		Type: "4",
		Icon: "3003",
		Value: "85000000",
		Gems: "85000000",
		Give: "1",
		Desc: "iPad Pro：12.9寸，32G版，使用后提交相关信息，可定制颜色哦。产地：梦幻商城"
};
data["1091"] = {
		PID: "1091",
		Name: "iPhone7 Plus 32G",
		Type: "4",
		Icon: "3003",
		Value: "62000000",
		Gems: "62000000",
		Give: "1",
		Desc: "iPhone7 Plus 32G版，使用后提交相关信息，可定制颜色哦。产地：梦幻商城"
};
data["1092"] = {
		PID: "1092",
		Name: "爱马仕腰带",
		Type: "4",
		Icon: "3003",
		Value: "104750000",
		Gems: "104750000",
		Give: "1",
		Desc: "奢侈品牌爱马仕商务休闲男士腰带，竖条纹金H扣，亚麻蓝光面黑皮质两面，法国进口。产地：梦幻商城"
};
data["1093"] = {
		PID: "1093",
		Name: "奥迪A6L 2016款",
		Type: "4",
		Icon: "3003",
		Value: "3500000000",
		Gems: "3500000000",
		Give: "1",
		Desc: "奥迪A6L 2016款 TFSI技术型，大气、沉稳、科技感十足、动力强劲，家族式前脸让人一目了然。产地：梦幻商城"
};
data["1094"] = {
		PID: "1094",
		Name: "百达翡丽5711",
		Type: "4",
		Icon: "3003",
		Value: "2275000000",
		Gems: "2275000000",
		Give: "1",
		Desc: "百达翡丽5711/1A-010，作为世界名表之首的百达翡丽，一直是钟表爱好者的追求之一，同时也能彰显尊贵身份和品味。产地：梦幻商城"
};
data["1095"] = {
		PID: "1095",
		Name: "宝马X5 2016款",
		Type: "4",
		Icon: "3003",
		Value: "10375000000",
		Gems: "10375000000",
		Give: "1",
		Desc: "宝马X5 2016款 xDrive28i，宝马X5在技术装备和性能上均达到了四轮驱动车前所未有的水平。它具备优异的操纵灵敏度和操纵稳定，强劲动力，超低油耗，高端豪华的内饰、外观。产地：梦幻商城"
};
data["1096"] = {
		PID: "1096",
		Name: "上海迪士尼3日自助游",
		Type: "4",
		Icon: "3003",
		Value: "37250000",
		Gems: "37250000",
		Give: "1",
		Desc: "这是一个充满创造力、冒险精神与无穷精彩的快乐天地。全球最大的迪士尼城堡—奇幻童话城堡，别具一格又令人难忘的六大主题园区—米奇大街、奇想花园、梦幻世界、探险岛、宝藏湾和明日世界。产地：梦幻商城"
};
data["1097"] = {
		PID: "1097",
		Name: "大溪地6晚8日自助游",
		Type: "4",
		Icon: "3003",
		Value: "30625000",
		Gems: "30625000",
		Give: "1",
		Desc: "大溪地，是法属波利尼西亚向风群岛中的最大岛屿，位于南太平洋。这里四季温暖如春、物产丰富。居民称自己为“上帝的人”，外国人则认为这里是“最接近天堂的地方”。产地：梦幻商城"
};
data["1098"] = {
		PID: "1098",
		Name: "法拉利488",
		Type: "4",
		Icon: "3003",
		Value: "53888750000",
		Gems: "53888750000",
		Give: "1",
		Desc: "法拉利488是法拉利旗下的一款超级跑车，采用了3.9升V8双涡轮发动机，满足高速运动的需要。拉风的外形必定百分之百回头率！产地：梦幻商城"
};
data["1099"] = {
		PID: "1099",
		Name: "劳力士-黑水鬼",
		Type: "4",
		Icon: "3003",
		Value: "875000000",
		Gems: "875000000",
		Give: "1",
		Desc: "价值5万元的劳力士(ROLEX)手表，黑鬼潜航者系列自动机械男表，身份的象征。产地：梦幻商城"
};
data["1100"] = {
		PID: "1100",
		Name: "路易威登腰带",
		Type: "4",
		Icon: "3003",
		Value: "906250000",
		Gems: "906250000",
		Give: "1",
		Desc: "标志性LV Inventeur搭扣做了重新设计，更小的铆钉、更现代的风格，采用全新的标识字体与拉丝金属工艺。纯正的双面设计，一面为帆布质地，另一面为皮革质地。产地：梦幻商城"
};
data["1101"] = {
		PID: "1101",
		Name: "欧米茄-星座系列18K",
		Type: "4",
		Icon: "3003",
		Value: "475000000",
		Gems: "475000000",
		Give: "1",
		Desc: "欧米茄-星座系列18K金，星座系列作为Omega(欧米茄)广为人知的四大系列之一无论是优雅的外形还是高精尖的机芯配置都令其成为了很多表友的挚爱。产地：梦幻商城"
};
data["1102"] = {
		PID: "1102",
		Name: "帕劳4晚5日自助游",
		Type: "4",
		Icon: "3003",
		Value: "136250000",
		Gems: "136250000",
		Give: "1",
		Desc: "帕劳，一个美的甚至会让你两三秒忘掉呼吸的海岛国家。5天4晚的美好时光，会让你重新认识：什么是海，什么是地，什么是光，什么是热。产地：梦幻商城"
};
data["1103"] = {
		PID: "1103",
		Name: "其他车型预定",
		Type: "4",
		Icon: "3003",
		Value: "125000000",
		Gems: "125000000",
		Give: "1",
		Desc: "若想兑换其他车型，请选择此项，并且联系客服咨询详情。产地：梦幻商城"
};
data["1104"] = {
		PID: "1104",
		Name: "1000元京东卡",
		Type: "4",
		Icon: "3003",
		Value: "10000000",
		Gems: "10000000",
		Give: "1",
		Desc: "价值1000元的京东卡，可在京东商城购物使用！产地：梦幻商城"
};
data["1105"] = {
		PID: "1105",
		Name: "500元京东卡",
		Type: "4",
		Icon: "3003",
		Value: "5000000",
		Gems: "5000000",
		Give: "1",
		Desc: "价值500元的京东卡，可在京东商城购物使用！产地：梦幻商城"
};
data["1106"] = {
		PID: "1106",
		Name: "200元京东卡",
		Type: "4",
		Icon: "3003",
		Value: "2000000",
		Gems: "2000000",
		Give: "1",
		Desc: "价值200元的京东卡，可在京东商城购物使用！产地：梦幻商城"
};
data["1107"] = {
		PID: "1107",
		Name: "50元充值卡",
		Type: "4",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "1",
		Desc: "该卡可兑换50元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：梦幻商城"
};
data["1108"] = {
		PID: "1108",
		Name: "100元充值卡",
		Type: "4",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "1",
		Desc: "该卡可兑换100元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：梦幻商城"
};
data["1109"] = {
		PID: "1109",
		Name: "百万热身赛门票",
		Type: "4",
		Icon: "3003",
		Value: "1980000",
		Gems: "1980000",
		Give: "1",
		Desc: "可用于ACE百万热身赛报名。产地：活动"
};
data["1110"] = {
		PID: "1110",
		Name: "iPhone7 Plus 128G",
		Type: "4",
		Icon: "3003",
		Value: "85400000",
		Gems: "85400000",
		Give: "1",
		Desc: "iPhone7 Plus 128G版，使用后提交相关信息，可定制颜色哦。产地：梦幻商城"
};
data["1111"] = {
		PID: "1111",
		Name: "百万大奖赛门票",
		Type: "2",
		Icon: "3003",
		Value: "22000000",
		Gems: "22000000",
		Give: "1",
		Desc: "可用于100亿大奖赛，A和B的报名，产地，热身赛，快速赛。"
};
data["1112"] = {
		PID: "1112",
		Name: "百万新人赛门票",
		Type: "2",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "1",
		Desc: "可用于百万新人赛报名"
};
data["1113"] = {
		PID: "1113",
		Name: "百万卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "2200000",
		Gems: "2200000",
		Give: "1",
		Desc: "可用于9人百万卫星赛报名"
};
data["1114"] = {
		PID: "1114",
		Name: "iPhone7 128G",
		Type: "4",
		Icon: "3003",
		Value: "90625000",
		Gems: "90625000",
		Give: "1",
		Desc: "iPhone7 128G版，使用后提交相关信息，可定制颜色哦。产地：梦幻商城"
};
data["1115"] = {
		PID: "1115",
		Name: "底牌专属赛门票",
		Type: "2",
		Icon: "3003",
		Value: "50000",
		Gems: "50000",
		Give: "1",
		Desc: "用于底牌专属赛报名"
};
data["1116"] = {
		PID: "1116",
		Name: "超级周五回馈赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1980000",
		Gems: "1980000",
		Give: "1",
		Desc: "用于超级周五回馈赛报名"
};
data["1117"] = {
		PID: "1117",
		Name: "ACE新人福利赛门票",
		Type: "2",
		Icon: "3003",
		Value: "50000",
		Gems: "50000",
		Give: "1",
		Desc: "用于ACE新人福利赛报名"
};
data["1118"] = {
		PID: "1118",
		Name: "新春集字.新",
		Type: "3",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "1",
		Desc: "集齐“新”“春”“快”“乐”四个字，可领取2017元微信红包，添加客服微信ad022222领取"
};
data["1119"] = {
		PID: "1119",
		Name: "新春集字.春",
		Type: "3",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "1",
		Desc: "集齐“新”“春”“快”“乐”四个字，可领取2017元微信红包，添加客服微信ad022222领取"
};
data["1120"] = {
		PID: "1120",
		Name: "新春集字.快",
		Type: "3",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "1",
		Desc: "集齐“新”“春”“快”“乐”四个字，可领取2017元微信红包，添加客服微信ad022222领取"
};
data["1121"] = {
		PID: "1121",
		Name: "新春集字.乐",
		Type: "3",
		Icon: "3003",
		Value: "20000000",
		Gems: "20000000",
		Give: "1",
		Desc: "集齐“新”“春”“快”“乐”四个字，可领取2017元微信红包，添加客服微信ad022222领取"
};
data["1122"] = {
		PID: "1122",
		Name: "iPad新人邀请赛门票",
		Type: "2",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "1",
		Desc: "用于iPad新人邀请赛报名。产地：活动"
};
data["1123"] = {
		PID: "1123",
		Name: "“我是王牌”猎人赛门票 ",
		Type: "2",
		Icon: "3003",
		Value: "3880000",
		Gems: "3880000",
		Give: "1",
		Desc: "用于“我是王牌”猎人赛报名。产地：活动"
};
data["1124"] = {
		PID: "1124",
		Name: "MacBook新人邀请赛门票",
		Type: "2",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "1",
		Desc: "用于MacBook新人邀请赛报名。产地：活动"
};
data["1125"] = {
		PID: "1125",
		Name: "iPhone7P新人邀请赛门票",
		Type: "2",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "1",
		Desc: "用于iPhone7P新人邀请赛报名。产地：活动"
};
data["1126"] = {
		PID: "1126",
		Name: "ACE6人徽章赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1100000",
		Gems: "1100000",
		Give: "1",
		Desc: "用于ACE6人徽章赛报名。产地：锦标赛"
};
data["1127"] = {
		PID: "1127",
		Name: "20元充值卡",
		Type: "4",
		Icon: "3003",
		Value: "200000",
		Gems: "200000",
		Give: "1",
		Desc: "该卡可兑换20元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：锦标赛"
};
data["1128"] = {
		PID: "1128",
		Name: "MacBook Pro新款",
		Type: "4",
		Icon: "3003",
		Value: "91880000",
		Gems: "91880000",
		Give: "1",
		Desc: "使用后可以兑换实物MacBook Pro新款一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["1129"] = {
		PID: "1129",
		Name: "新款外星人笔记本",
		Type: "4",
		Icon: "3003",
		Value: "200000000",
		Gems: "200000000",
		Give: "1",
		Desc: "使用后可以兑换实物外星人Alienware ALW17C-R2748 17.3英寸游戏笔记本电脑，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["1130"] = {
		PID: "1130",
		Name: "iPhone7 Plus 128G 红色版",
		Type: "4",
		Icon: "3003",
		Value: "85400000",
		Gems: "85400000",
		Give: "1",
		Desc: "使用后可以兑换实物iPhone7 Plus 128G 红色版，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["1901"] = {
		PID: "1901",
		Name: "偷鸡",
		Type: "6",
		Icon: "3017",
		Value: "50000",
		Gems: "50000",
		Give: "1",
		Desc: "嘿嘿，偷鸡成功，来抓我啊！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["1902"] = {
		PID: "1902",
		Name: "抓鸡",
		Type: "6",
		Icon: "3018",
		Value: "50000",
		Gems: "50000",
		Give: "1",
		Desc: "莫偷鸡偷鸡必被抓！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["1903"] = {
		PID: "1903",
		Name: "女神玫瑰",
		Type: "9",
		Icon: "3001",
		Value: "50000",
		Gems: "50000",
		Give: "1",
		Desc: "献给最美女神的玫瑰！购买后可在女神的个人信息或女神排行榜使用。产地：商城"
};
data["1904"] = {
		PID: "1904",
		Name: "VIP卡",
		Type: "5",
		Icon: "1003",
		Value: "500000",
		Gems: "500000",
		Give: "1",
		Desc: "使用后可获得VIP特权！产地：商城"
};
data["1905"] = {
		PID: "1905",
		Name: "月卡",
		Type: "5",
		Icon: "1001",
		Value: "500000",
		Gems: "500000",
		Give: "1",
		Desc: "使用后可获得VIP特权！产地：商城"
};
data["1906"] = {
		PID: "1906",
		Name: "5000万快速赛门票",
		Type: "2",
		Icon: "3019",
		Value: "500000",
		Gems: "500000",
		Give: "1",
		Desc: "使用后可报名5000万快速赛！产地：活动"
};
data["1042"] = {
		PID: "1042",
		Name: "水晶扑克",
		Type: "9",
		Icon: "7003",
		Value: "3",
		Gems: "3",
		Give: "0",
		Desc: "水晶质感的扑克牌，使用后立马高大上！产地:商城"
};
data["1043"] = {
		PID: "1043",
		Name: "高清扑克",
		Type: "9",
		Icon: "7004",
		Value: "4",
		Gems: "4",
		Give: "0",
		Desc: "超大数字，让你秒识别花色和字母，为你带来好运！产地：商城"
};
data["1044"] = {
		PID: "1044",
		Name: "鲨鱼牌背",
		Type: "9",
		Icon: "7007",
		Value: "103",
		Gems: "103",
		Give: "0",
		Desc: "让我们像鲨鱼一样的杀戮吧！产地：商城"
};
data["1045"] = {
		PID: "1045",
		Name: "ACE简约牌背",
		Type: "9",
		Icon: "7008",
		Value: "104",
		Gems: "104",
		Give: "0",
		Desc: "回归本质的一副牌背，简约奢华的你必备哦！产地：商城"
};
data["1037"] = {
		PID: "1037",
		Name: "龙哥",
		Type: "8",
		Icon: "3015",
		Value: "1080000",
		Gems: "1080000",
		Give: "1",
		Desc: "出生在澳门，常年混迹在铜锣湾，上学期间是绝对的三好学生，不勘被高年级的欺负，后因母亲病危，为筹集手术费接受了大飞的援助，为人仗义，出道后不断扳倒江湖猛人，成为江湖大哥。"
};
data["1038"] = {
		PID: "1038",
		Name: "Duke",
		Type: "8",
		Icon: "3016",
		Value: "1080000",
		Gems: "1080000",
		Give: "1",
		Desc: "我是一名来自美国的职业牌手，扑克是我的生命。早在几年前我已赢得了世界最高扑克赛事的冠军金手链，并荣获无数殊荣。如今，我为ACE扑克的金手链而来，你准备好了么？"
};
data["1039"] = {
		PID: "1039",
		Name: "鸡蛋",
		Type: "6",
		Icon: "3008",
		Value: "2000",
		Gems: "2000",
		Give: "1",
		Desc: "臭鸡蛋甩你一脸！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["1040"] = {
		PID: "1040",
		Name: "啤酒",
		Type: "6",
		Icon: "3009",
		Value: "2000",
		Gems: "2000",
		Give: "1",
		Desc: "来，碰个杯，你好我也好！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["1041"] = {
		PID: "1041",
		Name: "玫瑰花",
		Type: "6",
		Icon: "3010",
		Value: "2000",
		Gems: "2000",
		Give: "1",
		Desc: "亲，这朵奇葩的玫瑰送你给你，传说是一生只能送一人！产地：商城"
};
data["1033"] = {
		PID: "1033",
		Name: "默认牌面1",
		Type: "9",
		Icon: "7001",
		Value: "1",
		Gems: "1",
		Give: "0",
		Desc: ""
};
data["1034"] = {
		PID: "1034",
		Name: "默认牌面2",
		Type: "9",
		Icon: "7002",
		Value: "2",
		Gems: "2",
		Give: "0",
		Desc: ""
};
data["1035"] = {
		PID: "1035",
		Name: "默认牌背1",
		Type: "9",
		Icon: "7005",
		Value: "101",
		Gems: "101",
		Give: "0",
		Desc: ""
};
data["1036"] = {
		PID: "1036",
		Name: "默认牌背2",
		Type: "9",
		Icon: "7006",
		Value: "102",
		Gems: "102",
		Give: "0",
		Desc: ""
};
data["11008"] = {
		PID: "11008",
		Name: "狍狍",
		Type: "8",
		Icon: "3011",
		Value: "680000",
		Gems: "680000",
		Give: "0",
		Desc: "我是个北京人，08年去韩国求学，接受了他们的改装，为一名小鲜肉，爱音乐，爱ACE扑克。我的梦想就是拿到世界扑克巡回赛的冠军。人家说帅的男孩运气都不错，我会为你带来好运。"
};
data["11009"] = {
		PID: "11009",
		Name: "晴子",
		Type: "8",
		Icon: "3012",
		Value: "680000",
		Gems: "680000",
		Give: "0",
		Desc: "我运动，我自豪，做爱做的运动，玩爱玩的ACE扑克，我喜欢运动过后汗流浃背的样子，喜欢运动后散发着活力的味道，我是90后，我敢作敢当，但是叔叔我们不约。"
};
data["11010"] = {
		PID: "11010",
		Name: "Tina",
		Type: "8",
		Icon: "3013",
		Value: "680000",
		Gems: "680000",
		Give: "0",
		Desc: "我是Tina，活跃在扑克圈好几年了，我觉得这个圈不乱，至少比职场干净，我用了1年的时间在从小职员晋升到现在的销售总监，其中的心酸只有我才懂，你懂吗？"
};
data["11011"] = {
		PID: "11011",
		Name: "麦克",
		Type: "8",
		Icon: "3014",
		Value: "1080000",
		Gems: "1080000",
		Give: "0",
		Desc: "我出生在印第安纳州，童年并不幸福，一生中两次进入摇滚名人堂，我发明了机械舞，我爱我的舞步，还记得Thriller，Beat it吗？人们好奇我为什么总喜欢孩子们围绕在身边，那是因为我在他们身上找到了我从未拥有过的东西。"
};
data["11012"] = {
		PID: "11012",
		Name: "穷鬼附身",
		Type: "6",
		Icon: "3004",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "穷鬼咋了？穷鬼会和你纠缠不清的！！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["11013"] = {
		PID: "11013",
		Name: "拖鞋",
		Type: "6",
		Icon: "3005",
		Value: "50000",
		Gems: "50000",
		Give: "0",
		Desc: "指哪打哪，没有人比我打的更准确！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["11014"] = {
		PID: "11014",
		Name: "冠军徽章",
		Type: "6",
		Icon: "3006",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "ACE世界扑克赛的最高荣誉！拥有该此徽章的一般都不是“鱼”购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["11016"] = {
		PID: "11016",
		Name: "超级炸弹",
		Type: "6",
		Icon: "3007",
		Value: "30000",
		Gems: "30000",
		Give: "0",
		Desc: "BOOM的一声就爆炸了！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["11018"] = {
		PID: "11018",
		Name: "大喇叭",
		Type: "9",
		Icon: "3003",
		Value: "120000",
		Gems: "120000",
		Give: "0",
		Desc: "向全服的玩家发出歇斯底里的呐喊吧！拥有该道具后，可在牌桌内使用小喇叭喊话。产地：商城"
};
data["11019"] = {
		PID: "11019",
		Name: "改名卡",
		Type: "9",
		Icon: "3002",
		Value: "980000",
		Gems: "980000",
		Give: "0",
		Desc: "拒绝LOW的名字，拒绝No Fashion的名字，在个人信息中修改昵称必备的道具！产地：商城"
};
data["11020"] = {
		PID: "11020",
		Name: "10元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "100000",
		Gems: "100000",
		Give: "0",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额10元。产地：锦标赛、活动赠送"
};
data["11021"] = {
		PID: "11021",
		Name: "50元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "0",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额50元。产地：锦标赛、活动赠送"
};
data["11022"] = {
		PID: "11022",
		Name: "100元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "0",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额100元。产地：锦标赛、活动赠送"
};
data["11023"] = {
		PID: "11023",
		Name: "Apple iPhone 6S",
		Type: "4",
		Icon: "3003",
		Value: "46000000",
		Gems: "46000000",
		Give: "0",
		Desc: "使用后可以兑换实物iPhone 6S一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["11024"] = {
		PID: "11024",
		Name: "Apple iPad Air",
		Type: "4",
		Icon: "3003",
		Value: "22000000",
		Gems: "22000000",
		Give: "0",
		Desc: "使用后可以兑换实物Apple iPad Air一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["11025"] = {
		PID: "11025",
		Name: "Apple Watch",
		Type: "4",
		Icon: "3003",
		Value: "28000000",
		Gems: "28000000",
		Give: "0",
		Desc: "使用后可以兑换实物Apple Watch一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["11026"] = {
		PID: "11026",
		Name: "10元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "100000",
		Gems: "100000",
		Give: "0",
		Desc: "该卡可兑换10元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：锦标赛、活动赠送"
};
data["11027"] = {
		PID: "11027",
		Name: "50元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "0",
		Desc: "该卡可兑换50元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：锦标赛、活动赠送"
};
data["11028"] = {
		PID: "11028",
		Name: "100元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "0",
		Desc: "该卡可兑换100元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：锦标赛、活动赠送"
};
data["11029"] = {
		PID: "11029",
		Name: "小米NOTE",
		Type: "4",
		Icon: "3003",
		Value: "10000000",
		Gems: "10000000",
		Give: "0",
		Desc: "使用后可以兑换实物小米NOTE一台，在获奖信息中可以查询到奖励发送情况。产地：锦标赛、活动赠送"
};
data["11030"] = {
		PID: "11030",
		Name: "3亿锦标赛门票",
		Type: "2",
		Icon: "3003",
		Value: "3000000",
		Gems: "3000000",
		Give: "0",
		Desc: "3亿ACE币锦标赛的报名门票，周赛只能使用这个报名。产地：锦标赛"
};
data["11031"] = {
		PID: "11031",
		Name: "百万筹码",
		Type: "1",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "0",
		Desc: "里面装着100万ACE币， 使用后里面变成高大上。产地：锦标赛"
};
data["11032"] = {
		PID: "11032",
		Name: "三亿筹码",
		Type: "1",
		Icon: "3003",
		Value: "300000000",
		Gems: "300000000",
		Give: "0",
		Desc: "里面装着3亿ACE币，使用后立马赶超盖茨哥哥。产地：锦标赛"
};
data["11037"] = {
		PID: "11037",
		Name: "龙哥",
		Type: "8",
		Icon: "3015",
		Value: "1080000",
		Gems: "1080000",
		Give: "0",
		Desc: "出生在澳门，常年混迹在铜锣湾，上学期间是绝对的三好学生，不勘被高年级的欺负，后因母亲病危，为筹集手术费接受了大飞的援助，为人仗义，出道后不断扳倒江湖猛人，成为江湖大哥。如果你爱ACE扑克，我欢迎你来铜锣湾挑战我。"
};
data["11038"] = {
		PID: "11038",
		Name: "Duke",
		Type: "8",
		Icon: "3016",
		Value: "1080000",
		Gems: "1080000",
		Give: "0",
		Desc: "我是一名来自美国的职业牌手，扑克是我的生命。早在几年前我已赢得了世界最高扑克赛事的冠军金手链，并荣获无数殊荣。如今，我为ACE扑克的金手链而来，你准备好了么？"
};
data["11039"] = {
		PID: "11039",
		Name: "鸡蛋",
		Type: "6",
		Icon: "3008",
		Value: "2000",
		Gems: "2000",
		Give: "0",
		Desc: "臭鸡蛋甩你一脸！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["11040"] = {
		PID: "11040",
		Name: "啤酒",
		Type: "6",
		Icon: "3009",
		Value: "2000",
		Gems: "2000",
		Give: "0",
		Desc: "来，碰个杯，你好我也好！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["11041"] = {
		PID: "11041",
		Name: "玫瑰花",
		Type: "6",
		Icon: "3010",
		Value: "2000",
		Gems: "2000",
		Give: "0",
		Desc: "亲，这朵奇葩的玫瑰送你给你，传说是一生只能送一人！产地：商城"
};
data["11046"] = {
		PID: "11046",
		Name: "iPhone6S争夺赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "0",
		Desc: "iPhone6s争夺赛的报名门票，iPhone6s争夺赛只能使用这个报名。产地：5000WACE币赛、3日连续签到、活动赠送"
};
data["11047"] = {
		PID: "11047",
		Name: "30元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "300000",
		Gems: "300000",
		Give: "0",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额30元。产地：锦标赛、活动赠送"
};
data["11048"] = {
		PID: "11048",
		Name: "88元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "880000",
		Gems: "880000",
		Give: "0",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额88元。产地：锦标赛、活动赠送"
};
data["11049"] = {
		PID: "11049",
		Name: "888元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "8880000",
		Gems: "8880000",
		Give: "0",
		Desc: "使用后可以添加微信专属群，并可以向群主索要红包！面额888元。产地：锦标赛、活动赠送"
};
data["11050"] = {
		PID: "11050",
		Name: "888888ACE币",
		Type: "1",
		Icon: "3003",
		Value: "8888880000",
		Gems: "8888880000",
		Give: "0",
		Desc: "菠萝币凭证：联系客服经核实账号获奖情况后，在ACE扑克正式上线时，可获得888888ACE币赠礼。"
};
data["11051"] = {
		PID: "11051",
		Name: "6888888ACE币",
		Type: "1",
		Icon: "3003",
		Value: "68888880000",
		Gems: "68888880000",
		Give: "0",
		Desc: "菠萝币凭证：联系客服经核实账号获奖情况后，在ACE扑克正式上线时，可获得6888888ACE币赠礼。"
};
data["11052"] = {
		PID: "11052",
		Name: "Apple iPad mini",
		Type: "4",
		Icon: "3003",
		Value: "22000000",
		Gems: "22000000",
		Give: "0",
		Desc: "使用后可以兑换实物iPad mini一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["11053"] = {
		PID: "11053",
		Name: "500元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "5000000",
		Gems: "5000000",
		Give: "0",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放500元红包！产地：锦标赛、活动赠送"
};
data["11054"] = {
		PID: "11054",
		Name: "300元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "3000000",
		Gems: "3000000",
		Give: "0",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放300元红包！产地：锦标赛、活动赠送"
};
data["11055"] = {
		PID: "11055",
		Name: "200元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "2000000",
		Gems: "2000000",
		Give: "0",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放200元红包！产地：锦标赛、活动赠送"
};
data["11056"] = {
		PID: "11056",
		Name: "上线庆典赛门票",
		Type: "2",
		Icon: "3003",
		Value: "28800000000",
		Gems: "28800000000",
		Give: "0",
		Desc: "上线庆典赛的报名门票。产地：活动赠送"
};
data["11057"] = {
		PID: "11057",
		Name: "3000万快速赛门票",
		Type: "2",
		Icon: "3003",
		Value: "280000",
		Gems: "280000",
		Give: "0",
		Desc: "3000万快速赛的报名门票。产地：签到、活动赠送"
};
data["11058"] = {
		PID: "11058",
		Name: "666元微信红包",
		Type: "3",
		Icon: "3003",
		Value: "6660000",
		Gems: "6660000",
		Give: "0",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放666元红包！产地：锦标赛、活动赠送"
};
data["11059"] = {
		PID: "11059",
		Name: "1亿ACE币赛门票",
		Type: "4",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "0",
		Desc: "1亿ACE币赛的报名门票。产地：活动赠送"
};
data["11060"] = {
		PID: "11060",
		Name: "开业回馈赛门票",
		Type: "4",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "0",
		Desc: "开业回馈赛的报名门票。 产地：活动赠送"
};
data["11061"] = {
		PID: "11061",
		Name: "新年迎春赛门票",
		Type: "4",
		Icon: "3003",
		Value: "2200000",
		Gems: "2200000",
		Give: "0",
		Desc: "新年迎春赛A和新年迎春赛B的报名门票。"
};
data["11062"] = {
		PID: "11062",
		Name: "迎春晋级赛门票",
		Type: "4",
		Icon: "3003",
		Value: "10000000",
		Gems: "10000000",
		Give: "0",
		Desc: "迎春晋级赛的报名门票。产地：新年迎春赛A、新年迎春赛B的第10至18名"
};
data["11063"] = {
		PID: "11063",
		Name: "iPad mini订阅专属赛门票",
		Type: "4",
		Icon: "3003",
		Value: "2000000000",
		Gems: "2000000000",
		Give: "0",
		Desc: "iPad mini订阅专属赛的报名门票。产地：关注官方QQ、公众号可每周领取"
};
data["11064"] = {
		PID: "11064",
		Name: "30元红包(15级)",
		Type: "3",
		Icon: "3003",
		Value: "300000",
		Gems: "300000",
		Give: "0",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放30元红包！产地：活动赠送"
};
data["11065"] = {
		PID: "11065",
		Name: "50元红包(30级以上)",
		Type: "3",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "0",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放50元红包！产地：活动赠送"
};
data["11066"] = {
		PID: "11066",
		Name: "70元红包（30级）",
		Type: "3",
		Icon: "3003",
		Value: "700000",
		Gems: "700000",
		Give: "0",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放70元红包！产地：活动赠送"
};
data["11067"] = {
		PID: "11067",
		Name: "1888元红包（50级）",
		Type: "3",
		Icon: "3003",
		Value: "18880000",
		Gems: "18880000",
		Give: "0",
		Desc: "使用后提交微信号等信息，官方会向填写的微信号发放1888元红包！产地：活动赠送"
};
data["11068"] = {
		PID: "11068",
		Name: "菠萝大师赛一门票",
		Type: "2",
		Icon: "3003",
		Value: "30000000",
		Gems: "30000000",
		Give: "0",
		Desc: "10亿菠萝大师赛一的报名门票。产地：亚巡赛专属礼包兑换"
};
data["11069"] = {
		PID: "11069",
		Name: "菠萝大师赛二门票",
		Type: "2",
		Icon: "3003",
		Value: "30000000",
		Gems: "30000000",
		Give: "0",
		Desc: "10亿菠萝大师赛二的报名门票。产地：亚巡赛专属礼包兑换"
};
data["11070"] = {
		PID: "11070",
		Name: "菠萝大师赛三门票",
		Type: "2",
		Icon: "3003",
		Value: "30000000",
		Gems: "30000000",
		Give: "0",
		Desc: "10亿菠萝大师赛三的报名门票。产地：亚巡赛专属礼包兑换"
};
data["11071"] = {
		PID: "11071",
		Name: "亚巡赛红牛券",
		Type: "2",
		Icon: "3003",
		Value: "12000000",
		Gems: "12000000",
		Give: "0",
		Desc: "价值1200元的2016亚巡赛北京站红牛券。产地：锦标赛"
};
data["11072"] = {
		PID: "11072",
		Name: "CPG主赛门票",
		Type: "2",
		Icon: "3003",
		Value: "100000000",
		Gems: "100000000",
		Give: "0",
		Desc: "价值10000元的CPG中国海南国际扑克大赛主赛门票，包含5天4晚住宿哦。产地：锦标赛"
};
data["11073"] = {
		PID: "11073",
		Name: "CPG主赛门票争夺赛门票",
		Type: "2",
		Icon: "3003",
		Value: "13000000",
		Gems: "13000000",
		Give: "0",
		Desc: "CPG主赛门票争夺赛的参赛资格。产地：锦标赛"
};
data["11074"] = {
		PID: "11074",
		Name: "MacBook",
		Type: "4",
		Icon: "3003",
		Value: "66880000",
		Gems: "66880000",
		Give: "0",
		Desc: "使用后可以兑换实物MacBook一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["11075"] = {
		PID: "11075",
		Name: "1000面值京东卡",
		Type: "4",
		Icon: "3003",
		Value: "10000000",
		Gems: "10000000",
		Give: "0",
		Desc: "价值1000元的京东卡，可在京东商城购物使用！产地：活动"
};
data["11076"] = {
		PID: "11076",
		Name: "500面值京东卡",
		Type: "4",
		Icon: "3003",
		Value: "5000000",
		Gems: "5000000",
		Give: "0",
		Desc: "价值500元的京东卡，可在京东商城购物使用！产地：活动"
};
data["11077"] = {
		PID: "11077",
		Name: "200面值京东卡",
		Type: "4",
		Icon: "3003",
		Value: "2000000",
		Gems: "2000000",
		Give: "0",
		Desc: "价值200元的京东卡，可在京东商城购物使用！产地：活动"
};
data["11078"] = {
		PID: "11078",
		Name: "CPG卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1100000",
		Gems: "1100000",
		Give: "0",
		Desc: "CPG卫星赛的报名门票。"
};
data["11079"] = {
		PID: "11079",
		Name: "CPG边赛门票",
		Type: "2",
		Icon: "3003",
		Value: "12000000",
		Gems: "12000000",
		Give: "0",
		Desc: "价值1200元的CPG中国海南国际扑克大赛边赛门票。产地：锦标赛"
};
data["11080"] = {
		PID: "11080",
		Name: "CPG边赛门票赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1100000",
		Gems: "1100000",
		Give: "0",
		Desc: "CPG边赛门票赛报名门票。"
};
data["11081"] = {
		PID: "11081",
		Name: "南洋杯门票赛门票",
		Type: "2",
		Icon: "3003",
		Value: "15000000",
		Gems: "15000000",
		Give: "0",
		Desc: "南洋杯/IPO门票赛的报名门票。"
};
data["11082"] = {
		PID: "11082",
		Name: "南洋杯/IPO门票",
		Type: "2",
		Icon: "3003",
		Value: "88000000",
		Gems: "88000000",
		Give: "0",
		Desc: "南洋杯/IPO赛事门票。"
};
data["11083"] = {
		PID: "11083",
		Name: "南洋杯门票",
		Type: "2",
		Icon: "3003",
		Value: "88000000",
		Gems: "88000000",
		Give: "0",
		Desc: "南洋杯赛事门票。"
};
data["11084"] = {
		PID: "11084",
		Name: "南洋杯/IPO卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1500000",
		Gems: "1500000",
		Give: "0",
		Desc: "南洋杯/IPO卫星赛的报名门票。"
};
data["11085"] = {
		PID: "11085",
		Name: "1亿卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "98000",
		Gems: "98000",
		Give: "0",
		Desc: "1亿ACE币卫星赛的报名门票。"
};
data["11086"] = {
		PID: "11086",
		Name: "1亿大奖赛门票",
		Type: "2",
		Icon: "3003",
		Value: "980000",
		Gems: "980000",
		Give: "0",
		Desc: "1亿ACE币大奖赛的报名门票。"
};
data["11087"] = {
		PID: "11087",
		Name: "iPhone7卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "98000",
		Gems: "98000",
		Give: "0",
		Desc: "iPhone7卫星赛的报名门票。"
};
data["11088"] = {
		PID: "11088",
		Name: "iPhone7贺岁赛门票",
		Type: "2",
		Icon: "3003",
		Value: "980000",
		Gems: "980000",
		Give: "0",
		Desc: "iPhone7贺岁赛的报名门票。"
};
data["11089"] = {
		PID: "11089",
		Name: "iPhone7plus",
		Type: "4",
		Icon: "3003",
		Value: "50000000",
		Gems: "50000000",
		Give: "0",
		Desc: "iPhone7plus真机，产地：锦标赛。"
};
data["11090"] = {
		PID: "11090",
		Name: "iPad Pro",
		Type: "4",
		Icon: "3003",
		Value: "85000000",
		Gems: "85000000",
		Give: "0",
		Desc: "iPad Pro：12.9寸，32G版，使用后提交相关信息，可定制颜色哦。产地：梦幻商城"
};
data["11091"] = {
		PID: "11091",
		Name: "iPhone7 Plus 32G",
		Type: "4",
		Icon: "3003",
		Value: "62000000",
		Gems: "62000000",
		Give: "0",
		Desc: "iPhone7 Plus 32G版，使用后提交相关信息，可定制颜色哦。产地：梦幻商城"
};
data["11092"] = {
		PID: "11092",
		Name: "爱马仕腰带",
		Type: "4",
		Icon: "3003",
		Value: "104750000",
		Gems: "104750000",
		Give: "0",
		Desc: "奢侈品牌爱马仕商务休闲男士腰带，竖条纹金H扣，亚麻蓝光面黑皮质两面，法国进口。产地：梦幻商城"
};
data["11093"] = {
		PID: "11093",
		Name: "奥迪A6L 2016款",
		Type: "4",
		Icon: "3003",
		Value: "3500000000",
		Gems: "3500000000",
		Give: "0",
		Desc: "奥迪A6L 2016款 TFSI技术型，大气、沉稳、科技感十足、动力强劲，家族式前脸让人一目了然。产地：梦幻商城"
};
data["11094"] = {
		PID: "11094",
		Name: "百达翡丽5711",
		Type: "4",
		Icon: "3003",
		Value: "2275000000",
		Gems: "2275000000",
		Give: "0",
		Desc: "百达翡丽5711/1A-010，作为世界名表之首的百达翡丽，一直是钟表爱好者的追求之一，同时也能彰显尊贵身份和品味。产地：梦幻商城"
};
data["11095"] = {
		PID: "11095",
		Name: "宝马X5 2016款",
		Type: "4",
		Icon: "3003",
		Value: "10375000000",
		Gems: "10375000000",
		Give: "0",
		Desc: "宝马X5 2016款 xDrive28i，宝马X5在技术装备和性能上均达到了四轮驱动车前所未有的水平。它具备优异的操纵灵敏度和操纵稳定，强劲动力，超低油耗，高端豪华的内饰、外观。产地：梦幻商城"
};
data["11096"] = {
		PID: "11096",
		Name: "上海迪士尼3日自助游",
		Type: "4",
		Icon: "3003",
		Value: "37250000",
		Gems: "37250000",
		Give: "0",
		Desc: "这是一个充满创造力、冒险精神与无穷精彩的快乐天地。全球最大的迪士尼城堡—奇幻童话城堡，别具一格又令人难忘的六大主题园区—米奇大街、奇想花园、梦幻世界、探险岛、宝藏湾和明日世界。产地：梦幻商城"
};
data["11097"] = {
		PID: "11097",
		Name: "大溪地6晚8日自助游",
		Type: "4",
		Icon: "3003",
		Value: "30625000",
		Gems: "30625000",
		Give: "0",
		Desc: "大溪地，是法属波利尼西亚向风群岛中的最大岛屿，位于南太平洋。这里四季温暖如春、物产丰富。居民称自己为“上帝的人”，外国人则认为这里是“最接近天堂的地方”。产地：梦幻商城"
};
data["11098"] = {
		PID: "11098",
		Name: "法拉利488",
		Type: "4",
		Icon: "3003",
		Value: "53888750000",
		Gems: "53888750000",
		Give: "0",
		Desc: "法拉利488是法拉利旗下的一款超级跑车，采用了3.9升V8双涡轮发动机，满足高速运动的需要。拉风的外形必定百分之百回头率！产地：梦幻商城"
};
data["11099"] = {
		PID: "11099",
		Name: "劳力士-黑水鬼",
		Type: "4",
		Icon: "3003",
		Value: "875000000",
		Gems: "875000000",
		Give: "0",
		Desc: "价值5万元的劳力士(ROLEX)手表，黑鬼潜航者系列自动机械男表，身份的象征。产地：梦幻商城"
};
data["11100"] = {
		PID: "11100",
		Name: "路易威登腰带",
		Type: "4",
		Icon: "3003",
		Value: "906250000",
		Gems: "906250000",
		Give: "0",
		Desc: "标志性LV Inventeur搭扣做了重新设计，更小的铆钉、更现代的风格，采用全新的标识字体与拉丝金属工艺。纯正的双面设计，一面为帆布质地，另一面为皮革质地。产地：梦幻商城"
};
data["11101"] = {
		PID: "11101",
		Name: "欧米茄-星座系列18K",
		Type: "4",
		Icon: "3003",
		Value: "475000000",
		Gems: "475000000",
		Give: "0",
		Desc: "欧米茄-星座系列18K金，星座系列作为Omega(欧米茄)广为人知的四大系列之一无论是优雅的外形还是高精尖的机芯配置都令其成为了很多表友的挚爱。产地：梦幻商城"
};
data["11102"] = {
		PID: "11102",
		Name: "帕劳4晚5日自助游",
		Type: "4",
		Icon: "3003",
		Value: "136250000",
		Gems: "136250000",
		Give: "0",
		Desc: "帕劳，一个美的甚至会让你两三秒忘掉呼吸的海岛国家。5天4晚的美好时光，会让你重新认识：什么是海，什么是地，什么是光，什么是热。产地：梦幻商城"
};
data["11103"] = {
		PID: "11103",
		Name: "其他车型预定",
		Type: "4",
		Icon: "3003",
		Value: "125000000",
		Gems: "125000000",
		Give: "0",
		Desc: "若想兑换其他车型，请选择此项，并且联系客服咨询详情。产地：梦幻商城"
};
data["11104"] = {
		PID: "11104",
		Name: "1000元京东卡",
		Type: "4",
		Icon: "3003",
		Value: "10000000",
		Gems: "10000000",
		Give: "0",
		Desc: "价值1000元的京东卡，可在京东商城购物使用！产地：梦幻商城"
};
data["11105"] = {
		PID: "11105",
		Name: "500元京东卡",
		Type: "4",
		Icon: "3003",
		Value: "5000000",
		Gems: "5000000",
		Give: "0",
		Desc: "价值500元的京东卡，可在京东商城购物使用！产地：梦幻商城"
};
data["11106"] = {
		PID: "11106",
		Name: "200元京东卡",
		Type: "4",
		Icon: "3003",
		Value: "2000000",
		Gems: "2000000",
		Give: "0",
		Desc: "价值200元的京东卡，可在京东商城购物使用！产地：梦幻商城"
};
data["11107"] = {
		PID: "11107",
		Name: "50元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "0",
		Desc: "该卡可兑换50元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：梦幻商城"
};
data["11108"] = {
		PID: "11108",
		Name: "100元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "1000000",
		Gems: "1000000",
		Give: "0",
		Desc: "该卡可兑换100元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：梦幻商城"
};
data["11109"] = {
		PID: "11109",
		Name: "百万热身赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1980000",
		Gems: "1980000",
		Give: "0",
		Desc: "可用于ACE百万热身赛报名。产地：活动"
};
data["11110"] = {
		PID: "11110",
		Name: "iPhone7 Plus 128G",
		Type: "4",
		Icon: "3003",
		Value: "85400000",
		Gems: "85400000",
		Give: "0",
		Desc: "iPhone7 Plus 128G版，使用后提交相关信息，可定制颜色哦。产地：梦幻商城"
};
data["11111"] = {
		PID: "11111",
		Name: "百万大奖赛门票",
		Type: "2",
		Icon: "3003",
		Value: "22000000",
		Gems: "22000000",
		Give: "0",
		Desc: "可用于100亿大奖赛，A和B的报名，产地，热身赛，快速赛。"
};
data["11112"] = {
		PID: "11112",
		Name: "百万新人赛门票",
		Type: "2",
		Icon: "3003",
		Value: "500000",
		Gems: "500000",
		Give: "0",
		Desc: "可用于百万新人赛报名"
};
data["11113"] = {
		PID: "11113",
		Name: "百万卫星赛门票",
		Type: "2",
		Icon: "3003",
		Value: "2200000",
		Gems: "2200000",
		Give: "0",
		Desc: "可用于9人百万卫星赛报名"
};
data["11114"] = {
		PID: "11114",
		Name: "iPhone7 128G",
		Type: "4",
		Icon: "3003",
		Value: "90625000",
		Gems: "90625000",
		Give: "0",
		Desc: "iPhone7 128G版，使用后提交相关信息，可定制颜色哦。产地：梦幻商城"
};
data["11115"] = {
		PID: "11115",
		Name: "底牌专属赛门票",
		Type: "2",
		Icon: "3003",
		Value: "50000",
		Gems: "50000",
		Give: "0",
		Desc: "用于底牌专属赛报名"
};
data["11116"] = {
		PID: "11116",
		Name: "超级周五回馈赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1980000",
		Gems: "1980000",
		Give: "0",
		Desc: "用于超级周五回馈赛报名"
};
data["11117"] = {
		PID: "11117",
		Name: "ACE新人福利赛门票",
		Type: "2",
		Icon: "3003",
		Value: "50000",
		Gems: "50000",
		Give: "0",
		Desc: "用于ACE新人福利赛报名"
};
data["11118"] = {
		PID: "11118",
		Name: "新春集字.新",
		Type: "3",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "集齐“新”“春”“快”“乐”四个字，可领取2017元微信红包，添加客服微信ad022222领取"
};
data["11119"] = {
		PID: "11119",
		Name: "新春集字.春",
		Type: "3",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "集齐“新”“春”“快”“乐”四个字，可领取2017元微信红包，添加客服微信ad022222领取"
};
data["11120"] = {
		PID: "11120",
		Name: "新春集字.快",
		Type: "3",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "集齐“新”“春”“快”“乐”四个字，可领取2017元微信红包，添加客服微信ad022222领取"
};
data["11121"] = {
		PID: "11121",
		Name: "新春集字.乐",
		Type: "3",
		Icon: "3003",
		Value: "20000000",
		Gems: "20000000",
		Give: "0",
		Desc: "集齐“新”“春”“快”“乐”四个字，可领取2017元微信红包，添加客服微信ad022222领取"
};
data["11122"] = {
		PID: "11122",
		Name: "iPad新人邀请赛门票",
		Type: "2",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "用于iPad新人邀请赛报名。产地：活动"
};
data["11123"] = {
		PID: "11123",
		Name: "“我是王牌”猎人赛门票 ",
		Type: "2",
		Icon: "3003",
		Value: "3880000",
		Gems: "3880000",
		Give: "0",
		Desc: "用于“我是王牌”猎人赛报名。产地：活动"
};
data["11124"] = {
		PID: "11124",
		Name: "MacBook新人邀请赛门票",
		Type: "2",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "用于MacBook新人邀请赛报名。产地：活动"
};
data["11125"] = {
		PID: "11125",
		Name: "iPhone7P新人邀请赛门票",
		Type: "2",
		Icon: "3003",
		Value: "10000",
		Gems: "10000",
		Give: "0",
		Desc: "用于iPhone7P新人邀请赛报名。产地：活动"
};
data["11126"] = {
		PID: "11126",
		Name: "ACE6人徽章赛门票",
		Type: "2",
		Icon: "3003",
		Value: "1100000",
		Gems: "1100000",
		Give: "0",
		Desc: "用于ACE6人徽章赛报名。产地：锦标赛"
};
data["11127"] = {
		PID: "11127",
		Name: "20元充值卡",
		Type: "7",
		Icon: "3003",
		Value: "200000",
		Gems: "200000",
		Give: "0",
		Desc: "该卡可兑换20元充值卡一张，使用后需要选择您电话的供应商，支持移动，电信，联通。产地：锦标赛"
};
data["11128"] = {
		PID: "11128",
		Name: "MacBook Pro新款",
		Type: "4",
		Icon: "3003",
		Value: "91880000",
		Gems: "91880000",
		Give: "0",
		Desc: "使用后可以兑换实物MacBook Pro新款一台，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["11129"] = {
		PID: "11129",
		Name: "新款外星人笔记本",
		Type: "4",
		Icon: "3003",
		Value: "200000000",
		Gems: "200000000",
		Give: "0",
		Desc: "使用后可以兑换实物外星人Alienware ALW17C-R2748 17.3英寸游戏笔记本电脑，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["11130"] = {
		PID: "11130",
		Name: "iPhone7 Plus 128G 红色版",
		Type: "4",
		Icon: "3003",
		Value: "85400000",
		Gems: "85400000",
		Give: "0",
		Desc: "使用后可以兑换实物iPhone7 Plus 128G 红色版，联系客服经核实账号获奖情况后可获得实物快递。产地：锦标赛、活动赠送"
};
data["11901"] = {
		PID: "11901",
		Name: "偷鸡",
		Type: "6",
		Icon: "3017",
		Value: "50000",
		Gems: "50000",
		Give: "0",
		Desc: "嘿嘿，偷鸡成功，来抓我啊！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["11902"] = {
		PID: "11902",
		Name: "抓鸡",
		Type: "6",
		Icon: "3018",
		Value: "50000",
		Gems: "50000",
		Give: "0",
		Desc: "莫偷鸡，偷鸡必被抓！购买后可在牌桌内互动道具中向其他玩家使用。 产地：商城"
};
data["11903"] = {
		PID: "11903",
		Name: "女神玫瑰",
		Type: "9",
		Icon: "3001",
		Value: "50000",
		Gems: "50000",
		Give: "0",
		Desc: "献给最美女神的玫瑰！购买后可在女神的个人信息或女神排行榜使用。产地：商城"
};
data["11904"] = {
		PID: "11904",
		Name: "VIP卡",
		Type: "5",
		Icon: "1003",
		Value: "500000",
		Gems: "500000",
		Give: "0",
		Desc: "时候后可获得VIP特权！产地：商城"
};
data["11905"] = {
		PID: "11905",
		Name: "月卡",
		Type: "5",
		Icon: "1001",
		Value: "500000",
		Gems: "500000",
		Give: "0",
		Desc: "时候后可获得VIP特权！产地：商城"
};
data["11906"] = {
		PID: "11906",
		Name: "5000万快速赛门票",
		Type: "2",
		Icon: "3019",
		Value: "500000",
		Gems: "500000",
		Give: "0",
		Desc: "使用后可报名5000万快速赛！产地：活动"
};
module.exports = data;

cc._RF.pop();
},{}],"JettonCreateControl":[function(require,module,exports){
"use strict";
cc._RF.push(module, '6dff3ADOk9BTKo2mu+IhoFe', 'JettonCreateControl');
// Scripts/Other/JettonCreateControl.js

'use strict';

/*
 zjh
 */
var oneColCount = 20;
var oneJettonWidth = 37;
var Config = require("Config");
var UITools = require('UITools');

var baseJetton = [100000000, 25000000, 5000000, 1000000, 500000, 100000, 25000, 5000, 1000, 500, 100, 25, 5, 1];
var imgJetton = ['img_chip100m', 'img_chip25m', 'img_chip5m', 'img_chip1m', 'img_chip500k', 'img_chip100k', 'img_chip25k', 'img_chip5k', 'img_chip1k', 'img_chip500', 'img_chip100', 'img_chip25', 'img_chip5', 'img_chip1'];

cc.Class({
    extends: cc.Component,
    properties: {
        JettonItem: cc.Prefab,
        _jettonList: [],
        _jettonPool: [],
        _targetPos: cc.p,
        _playToPoolComplete: cc.callFunc,

        PLAY_TO_POOL: 1,
        PLAY_TO_OVERLAP: 2,
        PLAY_NONE: 0,

        _curPlay: 0,
        _curTimer: 0,
        _interval: 0,
        _curIndex: 0,
        _targetPosList: []
    },

    // use this for initialization
    onLoad: function onLoad() {
        var self = this;
        this._playToPoolComplete = cc.callFunc(function (_item) {
            self.node.removeChild(_item);
            self._jettonPool.push(_item);
        }, this);
    },

    SetJettonNum: function SetJettonNum(count, _pos, _isPlay) {
        if (count <= 0) return;

        this._targetPos = _pos;
        this.resetData();

        var imgList = this.convertJetton(count);

        var offsetX;
        var cloneObj = null;
        var nTotalNum = imgList.length;
        for (var k = 0; k < nTotalNum; k++) {
            cloneObj = this.createJetton("Textures/Icon/" + imgList[k]);
            if (_isPlay == false) {
                offsetX = Math.floor(k / oneColCount) * oneJettonWidth;
                cloneObj.setPosition(cc.p(this._targetPos.x - offsetX, this._targetPos.y + k % oneColCount * 5));
            }
        }
    },

    convertJetton: function convertJetton(_count) {
        var remainJettons = _count;
        var imgList = [];
        for (var i = 0; i < baseJetton.length; ++i) {
            var count = Math.floor(remainJettons / baseJetton[i]);
            if (count > 0) {
                for (var j = 0; j < count; j++) {
                    imgList.push(imgJetton[i]);
                }
                remainJettons -= count * baseJetton[i];
            }
            if (remainJettons <= 0) break;
        }

        return imgList;
    },

    createJetton: function createJetton(_img) {
        var result;
        if (this._jettonPool.length > 0) {
            result = this._jettonPool.pop();
        } else {
            result = UITools.onCloneInstantiate(this.JettonItem, this.node, cc.p(0, 0));
        }
        if (result.parent == null) this.node.addChild(result);
        result.setPosition(0, 0);
        UITools.SetSpriteImg(result.getComponent("cc.Sprite"), _img);
        result.opacity = 255;
        this._jettonList.push(result);

        return result;
    },

    playAnimationToRaisePos: function playAnimationToRaisePos() {
        // this.unscheduleAllCallbacks();
        this.node.stopAllActions();

        var jettonItem;
        var offsetX;
        // var speed = 0.5 / this._jettonList.length;
        // speed = speed > 0.2 ? 0.2 : speed;
        this._targetPosList = [];
        for (var i = 0; i < this._jettonList.length; i++) {
            jettonItem = this._jettonList[i];
            offsetX = Math.floor(i / oneColCount) * jettonItem.width;
            // jettonItem.getComponent("JettonItem").playAniToOverlap(cc.p(this._targetPos.x - offsetX,(this._targetPos.y + (i % oneColCount) * 5)),i * .01,.2);
            this._targetPosList.push(cc.p(this._targetPos.x - offsetX, this._targetPos.y + i % oneColCount * 5));
        }

        this._curTimer = Date.now();
        this._interval = 25;
        this._curIndex = 0;
        this._curPlay = this.PLAY_TO_OVERLAP;
    },

    playAnimationToPoolPos: function playAnimationToPoolPos(_pos) {
        // this.unscheduleAllCallbacks();
        this.node.stopAllActions();

        var jettonItem;
        var idx = 0;
        // var speed = 0.5 / this._jettonList.length;
        // speed = speed > 0.2 ? 0.2 : speed;
        this._targetPosList = [cc.p(_pos.x, _pos.y)];
        // while(this._jettonList.length){
        //     jettonItem = this._jettonList.pop();
        //     jettonItem.opacity = 255;
        //     jettonItem.getComponent("JettonItem").playAniToPool(cc.p(_pos.x,_pos.y),idx * .01,.2,this._playToPoolComplete);
        //     idx++;
        // }

        this._curTimer = Date.now();
        this._interval = 25;
        this._curIndex = 0;
        this._curPlay = this.PLAY_TO_POOL;
    },

    resetData: function resetData() {
        var curJettonItem;
        while (this._jettonList.length) {
            curJettonItem = this._jettonList.pop();
            curJettonItem.stopAllActions();
            this._jettonPool.push(curJettonItem);
            this.node.removeChild(curJettonItem);
        }

        this._curPlay = this.PLAY_NONE;
    },

    update: function update() {
        if (this._curPlay == this.PLAY_NONE) return;

        var item;
        var pos;
        if (Date.now() - this._curTimer >= this._interval) {
            this._curTimer = Date.now();
            if (this._curPlay == this.PLAY_TO_OVERLAP) {
                item = this._jettonList[this._curIndex];
                pos = this._targetPosList[this._curIndex];

                item.getComponent("JettonItem").playAniToOverlap(pos, .1);

                this._curIndex++;
                if (this._curIndex >= this._jettonList.length) {
                    this._curPlay = this.PLAY_NONE;
                }
            } else {
                item = this._jettonList.pop();
                if (item) {
                    item.opacity = 255;
                    pos = this._targetPosList[this._curIndex];
                    item.getComponent("JettonItem").playAniToPool(pos, .1, this._playToPoolComplete);

                    if (this._jettonList.length <= 0) {
                        this._curPlay = this.PLAY_NONE;
                    }
                }
            }
        }
    }
});

cc._RF.pop();
},{"Config":"Config","UITools":"UITools"}],"JettonItem":[function(require,module,exports){
"use strict";
cc._RF.push(module, '6fedaboL55BDaZpY3c316LM', 'JettonItem');
// Scripts/UI/GameFrightRoom/Jetton/JettonItem.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {},

    playAniUpdatePool: function playAniUpdatePool(_time, _speed) {
        this.unscheduleAllCallbacks();
        this.node.stopAllActions();

        var self = this;
        this.scheduleOnce(function () {
            var action = cc.fadeIn(_speed);;
            self.node.runAction(action);
        }, _time);
    },

    playAniToOverlap: function playAniToOverlap(_pos, _time, _speed) {
        this.unscheduleAllCallbacks();
        this.node.stopAllActions();

        var self = this;
        this.scheduleOnce(function () {
            var action = cc.moveTo(_speed, _pos).easing(cc.easeIn(_speed));
            self.node.runAction(action);
        }, _time);
    },

    playAniToPool: function playAniToPool(_pos, _time, _speed, _completeCallback) {
        this.unscheduleAllCallbacks();
        this.node.stopAllActions();

        var self = this;
        this.scheduleOnce(function () {
            var sequence = cc.sequence(cc.moveTo(_speed, _pos).easing(cc.easeIn(_speed)), _completeCallback);
            self.node.runAction(sequence);
        }, _time);
    },

    playAniToWallet: function playAniToWallet(_pos, _time, _speed, _completeCallback) {
        this.unscheduleAllCallbacks();
        this.node.stopAllActions();

        var self = this;
        this.scheduleOnce(function () {
            self.node.opacity = 255;
            var sequence = cc.sequence(cc.moveTo(_speed, _pos).easing(cc.easeIn(_speed)), cc.fadeOut(_speed), _completeCallback);
            self.node.runAction(sequence);
        }, _time);
    },

    playAniToFadeOut: function playAniToFadeOut(_time, _speed, _completeCallback) {
        this.unscheduleAllCallbacks();
        this.node.stopAllActions();

        var self = this;
        this.scheduleOnce(function () {
            var sequence = cc.sequence(cc.fadeOut(_speed), _completeCallback);
            self.node.runAction(sequence);
        }, _time);
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RF.pop();
},{}],"LabelResetProperty":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e638chOMs1Dxb7mUrTW7PRY', 'LabelResetProperty');
// Scripts/Other/LabelResetProperty.js

"use strict";

var UITools = require("UITools");
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        offset_y: {
            default: 0
        },
        offset_x: {
            default: 0
        }
    },

    // use this for initialization
    onLoad: function onLoad() {
        var a = 1;
        if (cc.sys.platform == cc.sys.ANDROID || cc.sys.platform == cc.sys.WIN32) {
            this.resetPosition(this.offset_x, this.offset_y);
        }
    },
    onDestroy: function onDestroy() {
        if (cc.sys.platform == cc.sys.ANDROID || cc.sys.platform == cc.sys.WIN32) {
            this.restorePosition(this.getOldPosition());
        }
    },
    resetPosition: function resetPosition(offsetx, offsety) {
        if (UITools.UICheckValueIsValid(this.getOldPosition())) {
            this.setOldPosition(this.node.position);
        }
        if (offsetx != 0) {
            this.node.position = cc.p(this.node.position.x + offsetx, this.node.position.y);
        }
        if (offsety != 0) {
            this.node.position = cc.p(this.node.position.x, this.node.position.y + offsety);
        }
    },
    restorePosition: function restorePosition(position) {
        if (UITools.UICheckValueIsValid(position)) {
            this.node.position = position;
        }
    },
    setOldPosition: function setOldPosition(position) {
        this._old_position = position;
    },
    getOldPosition: function getOldPosition() {
        return this._old_position;
    }
});

cc._RF.pop();
},{"UITools":"UITools"}],"LimitClick":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'c5371MF+thAhImFiFIt4S1C', 'LimitClick');
// Scripts/UI/Component/LimitClick.js

"use strict";

var UITools = require("UITools");

cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...

        _startTimer: 0,
        _allowClick: true
    },

    // use this for initialization
    onLoad: function onLoad() {},

    clickTime: function clickTime() {
        if (this._allowClick == false) {
            UITools.GamePublicTipsLabel("点击过快，请休息休息");
            return false;
        }

        this._startTimer = Date.now();
        this._allowClick = false;
        return true;
    },

    update: function update() {
        if (Date.now() - this._startTimer >= 500) {
            this._allowClick = true;
        }
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RF.pop();
},{"UITools":"UITools"}],"LimitLabel":[function(require,module,exports){
"use strict";
cc._RF.push(module, '6ca08mwa05IDZcrrBHkA+N0', 'LimitLabel');
// Scripts/UI/Component/LimitLabel.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {},

    setContent: function setContent(_str, _maxW) {
        if (this.label == null || this.label == undefined) this.label = this.node.getComponent("cc.Label");
        var char;
        var result = "";
        for (var i = 0; i < _str.length; i++) {
            char = _str.charAt(i);
            result += char;
            var curW = result.length * this.label.actualFontSize;
            if (curW >= _maxW) {
                result = result.substring(0, result.length - 2);
                result += "...";
                break;
            }
        }

        this.label.string = result;
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RF.pop();
},{}],"LogHelper":[function(require,module,exports){
"use strict";
cc._RF.push(module, '0b795gRsh5KeYthRyPSLsDe', 'LogHelper');
// Scripts/Other/LogHelper.js

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var moment = require("Moment");
var Config = require("Config");
var logNum = 300;
var showCount = 50;
var logger = {

    onInit: function onInit() {
        moment.locale('zh-cn');
        this.logCount = 0;
        this.curLabelstring = "";
        this.curString = "";
        this.curSeparator = "\n";
        this.curNum = 0; //解析对象的次数 超过3层不解析
        cc.log = this.log.bind(this);
        cc.warn = this.warn.bind(this);
        cc.error = this.error.bind(this);
        // cc.syslog = this.syslog.bind(this);
    },
    /*
        使用说明 第一参数是字符串，第二个参数是对象 会对对象进行循环遍历
     */

    log: function log(obj, obj2) {
        this.updateList("log", obj, obj2);
    },

    error: function error(obj, obj2) {
        this.updateList("error", obj, obj2);
    },

    warn: function warn(obj, obj2) {
        this.updateList("warn", obj, obj2);
    },
    syslog: function syslog(obj, obj2) {
        this.updateList("syslog", obj, obj2);
    },

    getLabelString: function getLabelString() {
        return this.curLabelstring;
    },

    // 解析对象
    onAnalysisObj: function onAnalysisObj(obj) {
        if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) == "object") {
            var curValue = null;
            for (var key in obj) {
                curValue = obj[key];
                this.curNum++;
                if ((typeof curValue === "undefined" ? "undefined" : _typeof(curValue)) != "object" && !!curValue) {
                    this.curString += " k_" + key + " v_" + curValue;
                }
                if (curValue == null || this.curNum > 10) {
                    return;
                }
                this.onAnalysisObj(curValue);
            }
        }
    },

    updateList: function updateList(logType, obj, obj2) {
        var time = moment().format("lll");
        if (!!obj2 && (typeof obj2 === "undefined" ? "undefined" : _typeof(obj2)) == "object") {
            this.curString = "";
            this.curNum = 0;
            for (var key in obj2) {
                if (!!obj2[key]) {
                    this.curString += " k_" + key + " v_" + obj2[key];
                }
            }
            // this.onAnalysisObj(obj2);
            obj += this.curString;
        } else {
            if (!!obj2) obj += obj2;
        }
        var str = time + ":[" + logType + "]:" + obj + this.curSeparator;
        if (cc.sys.isBrowser) {
            console.log(str);
        }
        if (!Global.isOpenLog) return;
        this.curLabelstring += str;
        this.logCount++;

        if (this.logCount > logNum) {
            var starPos = this.curLabelstring.indexOf(this.curSeparator);
            if (starPos > 0) {
                starPos += this.curSeparator.length;
                this.curLabelstring = this.curLabelstring.substring(starPos);
                this.logCount--;
            }
        }
    },

    // 清理LOG
    clearData: function clearData() {
        this.logCount = 0;
        this.curLabelstring = "";
    },

    //提交日志
    onCommitLog: function onCommitLog() {},

    // // 复制到剪切板
    // onCopyFun:function(){
    //     var str = this.curLabelstring;
    //     switch(cc.sys.os) {
    //         case cc.sys.OS_ANDROID:
    //             jsb.reflection.callStaticMethod("org/cocos2dx/javascript/CellphoneInfo", "pasteboard", "(Ljava/lang/String;)V",str);
    //             break;
    //         case cc.sys.OS_IOS:
    //             jsb.reflection.callStaticMethod("CellphoneInfo","pasteboard:",str);
    //             break;
    //         case cc.sys.OS_WINDOWS:
    //             UITools.GamePublicTipsLabel("windows版本还没有做。只有android和IOS");
    //             break;
    //     }
    // },

    // 切换账号清理缓存数据和缓存对象
    clearUIData: function clearUIData() {
        this.clearData();
    }
};

window.LogHelper = logger;

cc._RF.pop();
},{"Config":"Config","Moment":"Moment"}],"MainSceneCtrl":[function(require,module,exports){
"use strict";
cc._RF.push(module, '23becEkE4NLTo/TiydfPBKG', 'MainSceneCtrl');
// Scripts/MainSceneCtrl.js

'use strict';

require('pomelo-cocos2d-js');
var protobuf = require('pomelo-protobuf');
var superagent = require('superagent');
var PreloadManager = require("PreloadManager");
var UIManager = require("UIManager");
var Config = require("Config");
var UITools = require("UITools");
var ResourcesManager = require("ResourceManager");
var AnimationManager = require("AnimationManager");
var MessageManager = require('MessageManager');
var PokerJS = require('PokerJS');

var PlayerInfoCacheManager = require("PlayerInfoCacheManager");
var HistoryPlayCardsManager = require("HistoryPlayCardsManager");
var SimulateFightManager = require("SimulateFightManager");
var MusicManager = require('MusicManager');
var Buffer = require('buffer').Buffer;
cc.Class({
    extends: cc.Component,

    properties: {
        music: [cc.AudioClip],
        logoBg: cc.Sprite,
        HistoryNode: cc.Node
    },

    // use this for initialization
    onLoad: function onLoad() {
        Global.preloadManager = new PreloadManager();
        Global.uiManager = new UIManager();
        Global.resourceManager = new ResourcesManager();
        Global.animationManager = new AnimationManager();
        Global.musicManager = new MusicManager();
        Global.messageManager = new MessageManager();
        Global.playerInfoCacheManager = new PlayerInfoCacheManager();
        Global.simulateFightManager = new SimulateFightManager();
        // 历史牌局 管理器
        Global.historyPlayCardsManager = new HistoryPlayCardsManager();

        Global.playerInfo = {};
        this.HistoryNode.active = true;
    },

    start: function start() {
        Global.musicManager.onInit(this.music);
        Global.historyPlayCardsManager.onInit();
        Global.preloadManager.startLoad();
        var url = window.location.href;
        // var data = getQueryString(b, "cocos2d-js");
        var curIndex = url.indexOf("=");
        // console.log("::curIndex;:",curIndex);
        var curURL = url.substring(curIndex + 1);
        // console.log("::.curURL;:",curURL);
        // var curURL = "http://192.168.1.185:3000/share/47/4785";
        // var curURL = "http://192.168.1.185:3000/getShare?gameId=55&uid=10131";
        // var curURL = "http://192.168.1.185:3000/getShare?gameId=175?&uid=10131";
        // var uidIndex = curURL.indexOf("uid"); ;
        // curURL.substring(uidIndex + 4);
        this.onSendMessage(curURL);
    },
    onSendMessage: function onSendMessage(curURL) {
        var self = this;
        superagent.get(curURL).end(function (_error, _response) {
            var data = _response.body;

            // console.log("::response11:::",_response);
            // console.log("::response22:::",data);
            if (data.code == 200) {

                self.logoBg.node.active = false;
                self.HistoryNode.active = true;
                var hisCtrl = self.HistoryNode.getComponent("PlayHistoryFightCardPanelJS");
                var playData = data.data;
                Global.playerInfo.uid = playData.ShareUid;
                hisCtrl.onSetHistoryData(playData);
            }
            // else{
            // Global.uiManager.hideLoading();
            // UITools.GamePublicTipsLabel(data.message);
            // }
        });
    }

});

cc._RF.pop();
},{"AnimationManager":"AnimationManager","Config":"Config","HistoryPlayCardsManager":"HistoryPlayCardsManager","MessageManager":"MessageManager","MusicManager":"MusicManager","PlayerInfoCacheManager":"PlayerInfoCacheManager","PokerJS":"PokerJS","PreloadManager":"PreloadManager","ResourceManager":"ResourceManager","SimulateFightManager":"SimulateFightManager","UIManager":"UIManager","UITools":"UITools","buffer":2,"pomelo-cocos2d-js":11,"pomelo-protobuf":27,"superagent":29}],"MessageBoxJS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '1ca6dHli6lPLLnZVsiQsQN9', 'MessageBoxJS');
// Scripts/UI/Component/MessageBoxJS.js

'use strict';

var BaseUIPanel = require('BaseUIPanel');
var UITools = require('UITools');
var ONE_STYLE = 1;
var TWO_STYLE = 2;
cc.Class({
    extends: BaseUIPanel,

    properties: {
        CurContent: cc.RichText, // 消息内容
        CurBtnLeft: cc.Button, // 左侧按钮
        CurBtnCenter: cc.Button, // 中间按钮
        CurBtnRight: cc.Button, // 右边按钮
        ContentNd: cc.Node, //除半透背景以外的内容
        CloseBtn: cc.Button },

    // 禁用所有按钮
    disableButtons: function disableButtons() {
        UITools.onSetNodeVisible(this.CurBtnLeft.node, false);
        UITools.onSetNodeVisible(this.CurBtnCenter.node, false);
        UITools.onSetNodeVisible(this.CurBtnRight.node, false);
        UITools.onSetNodeVisible(this.CloseBtn.node, false);
    },

    onOpenHandler: function onOpenHandler() {
        var data = Global.uiManager.getParameterWhenOpenUI(Global.uiManager.MESSAGE_BOX);
        this.setContent(data);
    },

    setContent: function setContent(_data) {
        this.disableButtons();
        this.CurContent.string = _data.msg;

        //增加中间按钮字段middleLabel
        if (_data.btnType == ONE_STYLE) {
            UITools.onSetNodeVisible(this.CurBtnCenter.node, true);
            var curLabel = this.CurBtnCenter.node.getChildByName("btnTxt");
            var mylabel = curLabel.getComponent(cc.Label);
            mylabel.string = _data.middleLabel == undefined || _data.middleLabel == null ? "确定" : _data.middleLabel;
            this.CenterBtnCall = _data.callback;
        } else {
            UITools.onSetNodeVisible(this.CurBtnLeft.node, true);
            this.LeftBtnCall = _data.leftCallback;
            UITools.onSetNodeVisible(this.CurBtnRight.node, true);
            this.RightBtnCall = _data.rightCallback;

            var curLabel = this.CurBtnLeft.node.getChildByName("btnTxt");
            var mylabel = curLabel.getComponent(cc.Label);
            mylabel.string = _data.leftLabel;

            curLabel = this.CurBtnRight.node.getChildByName("btnTxt");
            mylabel = curLabel.getComponent(cc.Label);
            mylabel.string = _data.rightLabel;
        }
        if (_data.isShowClose == true) {
            UITools.onSetNodeVisible(this.CloseBtn.node, true);
        }
    },

    // 左侧按钮事件
    onClickLeftButton: function onClickLeftButton(evn) {
        Global.musicManager.PlayClickSound(); //播放按钮点击音效

        if (this.LeftBtnCall != null) {
            this.LeftBtnCall();
        }
        this.DestroySelf(this.CurBtnLeft);
    },

    // 中间按钮事件
    onClickCenterButton: function onClickCenterButton(evn) {
        Global.musicManager.PlayClickSound(); //播放按钮点击音效

        if (this.CenterBtnCall != null) {
            this.CenterBtnCall();
        }
        this.DestroySelf(this.CurBtnCenter);
    },

    // 右侧按钮事件
    onClickRightButton: function onClickRightButton(evn) {
        Global.musicManager.PlayClickSound(); //播放按钮点击音效

        if (this.RightBtnCall != null) {
            this.RightBtnCall(this.RightBtnData);
        }
        this.DestroySelf(this.CurBtnRight);
    },

    DestroySelf: function DestroySelf(sender) {
        Global.uiManager.closePanel(Global.uiManager.MESSAGE_BOX, true, false);
        this.updateState(sender);
    },

    updateState: function updateState(button) {
        if (button) {
            if (button._resetState) {
                button._resetState();
            }
        }
    }
});

cc._RF.pop();
},{"BaseUIPanel":"BaseUIPanel","UITools":"UITools"}],"MessageManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e5c55dCsLhDyIRfstXSMW9n', 'MessageManager');
// Scripts/Manager/MessageManager.js

"use strict";

/*
    zjh
 */
var Config = require("Config");
var UITools = require("UITools");

//temporary code
var VIP_ID_BIND = 1904;
var VIP_ID_UNBIND = 11904;

var MessageManager = cc.Class({

    onInit: function onInit() {
        // //console.log("NetWorkManager.onInit")
        // Global.networkManager.onGamePushTableData();
    },

    // 发送登陆消息
    sendLoginMessage: function sendLoginMessage(curObj, callback) {
        Global.networkManager.onSendGameMessage("login.loginHandler.login", curObj, callback);
    },

    checkToken: function checkToken(curObj, callback) {
        Global.networkManager.onSendGameMessage("login.loginHandler.checkToken", curObj, callback);
    },

    // 玩家进入游戏
    sendEntryMessage: function sendEntryMessage(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.entryHandler.entry", curObj, callback);
    },

    // 创建角色的消息
    createRoleFun: function createRoleFun(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.entryHandler.createRole", curObj, callback);
    },

    // 坐下方法。。。
    onSitDownMessage: function onSitDownMessage(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.gameHandler.sitDown", curObj, callback);
    },

    //进入静态桌
    onJoinSysTable: function onJoinSysTable(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.gameHandler.joinSysTable", curObj, callback);
    },

    //加入已创建的指定牌桌
    onJoinUserTable: function onJoinUserTable(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.gameHandler.joinUserTable", curObj, callback);
    },

    //用户创建牌桌
    onCreateUserTable: function onCreateUserTable(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.gameHandler.createUserTable", curObj, callback);
    },

    fuckingWWW: function fuckingWWW() {
        var bindCount;
        var unbindCount;
        if (Global.playerInfo.bag == undefined) {
            bindCount = unbindCount = 0;
        } else {
            bindCount = Global.playerInfo.bag[VIP_ID_BIND] == undefined ? 0 : Global.playerInfo.bag[VIP_ID_BIND].num;
            unbindCount = Global.playerInfo.bag[VIP_ID_UNBIND] == undefined ? 0 : Global.playerInfo.bag[VIP_ID_UNBIND].num;
        }

        var result = Global.allowPlayCards == true || bindCount > 0 || unbindCount > 0;
        if (result == false) {
            Global.uiManager.setParameterWhenOpenUI(Global.uiManager.MESSAGE_BOX, { msg: "请先到商城购买VIP卡，然后再进入牌桌", btnType: 1, callback: null });
            Global.uiManager.openPanel(Global.uiManager.MESSAGE_BOX, true);
        }

        return result;
    },

    //德州牌桌内行动
    onTexasGameAction: function onTexasGameAction(curObj, callback) {
        Global.networkManager.onSendGameMessage("game.gameHandler.action", curObj, callback);
    },

    onChampAction: function onChampAction(curObj, callback) {
        Global.networkManager.onSendGameMessage("match.gameHandler.action", curObj, callback);
    },

    //离桌
    onTexasLeaveGameAction: function onTexasLeaveGameAction(curObj, callback) {
        Global.networkManager.onSendGameMessage("game.gameHandler.leaveTable", curObj, callback);
    },

    //站起
    onTexasStandUpAction: function onTexasStandUpAction(curObj, callback) {
        Global.networkManager.onSendGameMessage("game.gameHandler.standUp", curObj, callback);
    },

    //获取实时战绩
    GetCurTblInf: function GetCurTblInf(curObj, callback) {
        Global.networkManager.onSendGameMessage("game.gameHandler.getTableScore", curObj, callback);
    },

    getChampCurTableInf: function getChampCurTableInf(curObj, callback) {
        Global.networkManager.onSendGameMessage("match.gameHandler.getTableScore", curObj, callback);
    },

    //查询旁观者
    GetTableViewer: function GetTableViewer(curObj, callback) {
        Global.networkManager.onSendGameMessage("game.gameHandler.queryTableViewer", curObj, callback);
    },

    // 发送留座消息   参数 tid 牌桌id
    SendRataomSeatMessage: function SendRataomSeatMessage(curObj, callback) {
        Global.networkManager.onSendGameMessage("game.gameHandler.retainSeat", curObj, callback);
    },

    // 取消留座     参数 tid 牌桌id
    SendCancelRetainSeatFun: function SendCancelRetainSeatFun(curObj, callback) {
        Global.networkManager.onSendGameMessage("game.gameHandler.cancelRetainSeat", curObj, callback);
    },

    // 取消托管
    cancelAutoPlay: function cancelAutoPlay(curObj, callback) {
        // tid
        // method
        Global.networkManager.onSendGameMessage("game.gameHandler.cancelAutoPlay", curObj, callback);
    },

    // 获取邮件列表
    onGetMailList: function onGetMailList(curObj, callback) {
        // tid player.mailHandler

        // method
        Global.networkManager.onSendGameMessage("player.mailHandler.getList", curObj, callback);
    },

    //获取邮件列表 最新更改(2017年6月19日16:24:14) player.mailHandler.getMails
    onGetMailsList: function onGetMailsList(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.mailHandler.getMails", curObj, callback);
    },

    // 阅读邮件
    onReadMail: function onReadMail(curObj, callback) {
        // tid player.mailHandler

        // method
        Global.networkManager.onSendGameMessage("player.mailHandler.read", curObj, callback);
    },

    // 提取邮件
    onTakeMail: function onTakeMail(curObj, callback) {
        // tid player.mailHandler

        // method
        Global.networkManager.onSendGameMessage("player.mailHandler.extract", curObj, callback); //extractItems
    },

    // 单个删除邮件
    onDeleteOneMail: function onDeleteOneMail(curObj, callback) {
        // tid player.mailHandler

        // method
        Global.networkManager.onSendGameMessage("player.mailHandler.remove", curObj, callback); //deleteOne
    },

    // 一键删除邮件
    onAllDeleteMail: function onAllDeleteMail(curObj, callback) {
        // tid player.mailHandler

        // method
        Global.networkManager.onSendGameMessage("player.mailHandler.removeAll", curObj, callback); //deleteAll
    },

    // 未提取附件邮件数量
    onNotTakeAccNumMail: function onNotTakeAccNumMail(curObj, callback) {
        // tid player.mailHandler

        // method
        Global.networkManager.onSendGameMessage("player.mailHandler.getUnextractCount", curObj, callback);
    },

    // 未处理邮件数量（未读+未提取）
    onNotTakeAndNotReadNumMail: function onNotTakeAndNotReadNumMail(curObj, callback) {
        // tid player.mailHandler

        // method
        Global.networkManager.onSendGameMessage("player.mailHandler.getUntreatedCount", curObj, callback);
    },

    //牌桌内聊天
    onTableChatHandler: function onTableChatHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("game.chatHandler.send", curObj, callback);
    },

    //世界喊话 player.entryHandler
    onWorldSpeakHandler: function onWorldSpeakHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.shout", curObj, callback);
    },

    //背包使用道具 player.playerHandler.useItem
    onBagUserItemHandler: function onBagUserItemHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.useItem", curObj, callback);
    },

    //完成新手教学
    onFinishNewbieGuideHandler: function onFinishNewbieGuideHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.finishNewbieGuide", curObj, callback);
    },

    //---start---------好友消息----------↓↓↓↓↓↓↓↓↓↓↓--------------
    //获取好友列表player.friendHandler.getFriends
    onFriendList: function onFriendList(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.getFriends", curObj, callback);
    },

    //搜索好友 player.friendHandler.search
    onFriendSearchHandler: function onFriendSearchHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.search", curObj, callback);
    },

    //好友申请 player.friendHandler.applyFriend
    onApplyFriendHandler: function onApplyFriendHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.applyFriend", curObj, callback);
    },

    //获取用户好友申请列表 player.friendHandler.getFriendApplys
    onGetApplyListHandler: function onGetApplyListHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.getFriendApplys", curObj, callback);
    },

    //审核用户申请 (好友申请 忽略&&接受) player.friendHandler.auditFriendApply
    onAuditFriendApplyHandler: function onAuditFriendApplyHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.auditFriendApply", curObj, callback);
    },

    //一键忽略好友申请  player.friendHandler.removeAllApply
    onAuditFriendDeleteAllApplyHandler: function onAuditFriendDeleteAllApplyHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.removeAllApply", curObj, callback);
    },
    //删除好友 player.friendHandler.removeFriend
    onRemoveFriendHandler: function onRemoveFriendHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.removeFriend", curObj, callback);
    },

    //好友聊天 player.friendHandler.send
    onFriendChatHandler: function onFriendChatHandler(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.send", curObj, callback);
    },
    //好友牌桌列表 player.friendHandler.getFriendTableList
    onFriendLookTable: function onFriendLookTable(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.friendHandler.getFriendTableList", curObj, callback);
    },

    //---end----------------------------↑↑↑↑↑↑↑↑↑↑↑--------------
    //---start---------修改个人信息----------↓↓↓↓↓↓↓↓↓↓↓--------------
    //修改昵称
    setPlayerName: function setPlayerName(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.changName", curObj, callback);
    },
    //---end----------------------------↑↑↑↑↑↑↑↑↑↑↑--------------
    getRankList: function getRankList(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.getRankList", curObj, callback);
    },
    getMyRank: function getMyRank(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.getMyRank", _data, _callback);
    },
    applyGoddess: function applyGoddess(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.applyGoddess", curObj, callback);
    },
    presentFlower: function presentFlower(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.presentFlower", curObj, callback);
    },

    shopBuy: function shopBuy(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.buyItem", curObj, callback);
    },

    //购买图标接口（包扣头像，牌背，牌面
    buyIcon: function buyIcon(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.buyIcon", curObj, callback);
    },

    signInReward: function signInReward(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.signIn", curObj, callback);
    },

    applyChamp: function applyChamp(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.matchHandler.applyMatch", curObj, callback);
    },
    signOutChamp: function signOutChamp(curObj, callback) {
        Global.networkManager.onSendGameMessage("player.matchHandler.quitMatch", curObj, callback);
    },
    // 进入房间的方法
    createEnterFun: function createEnterFun(curObj, callback) {
        Global.networkManager.onSendGameMessage('player.roomHandler.entry', curObj, callback);
    },

    // 继续牌局 msg:tid
    onRejoinTableFun: function onRejoinTableFun(curObj, callback) {
        Global.networkManager.onSendGameMessage('player.gameHandler.rejoinTable', curObj, callback);
    },

    // 方法重复，与onRejoinTableFun重复
    // enterChampTable:function(curObj,callback){
    //     Global.networkManager.onSendGameMessage('player.gameHandler.rejoinTable',curObj,callback);
    // },

    // 发送带入筹码消息
    onBringGoldMessage: function onBringGoldMessage(curObj, callback) {
        //Global.networkManager.onSendGameMessage('player.gameHandler.bringGold',curObj,callback);
        Global.networkManager.onSendGameMessage('game.gameHandler.bringGold', curObj, callback);
    },
    // 身份证验证
    confirmAntiAddiction: function confirmAntiAddiction(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.antiAddicationAuth", _data, _callback);
    },

    // 发送收藏消息
    onSendHistoryCollect: function onSendHistoryCollect(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.gameHistoryHandler.addFavoriteGame", _data, _callback);
    },

    // 取消收藏
    onCancelCollect: function onCancelCollect(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.gameHistoryHandler.removeFavoriteGame", _data, _callback);
    },

    // 购买收藏空间
    onBuyCollectSpace: function onBuyCollectSpace(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.gameHistoryHandler.buyGameSpace", _data, _callback);
    },

    // 最近牌局列表
    onGetRecentGames: function onGetRecentGames(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.gameHistoryHandler.getRecentGames", _data, _callback);
    },

    // 收藏牌局列表
    onGetCollectionGames: function onGetCollectionGames(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.gameHistoryHandler.getFavoriteGames", _data, _callback);
    },

    // 消息分类-----------类似Nodtify， 区别是客户端只负责发送消息， 不接收服务器的消息响应。
    // 离开房间的方法
    leaveRoomList: function leaveRoomList() {
        Global.networkManager.onSendGameNotify('player:roomHandler.leave');
    },

    // 方法自动
    onAutoAction: function onAutoAction(curObj) {
        // tid
        // method
        Global.networkManager.onSendGameNotify("game.gameHandler.autoAction", curObj);
    },

    onChampAutoAction: function onChampAutoAction(curObj) {
        Global.networkManager.onSendGameNotify("match.gameHandler.autoAction", curObj);
    },

    // 亮牌消息
    onShowCardMessage: function onShowCardMessage(curObj) {
        Global.networkManager.onSendGameNotify("game.gameHandler.setShowCard", curObj);
    },

    onChampShowCardMessage: function onChampShowCardMessage(curObj) {
        Global.networkManager.onSendGameNotify("match.gameHandler.setShowCard", curObj);
    },

    // 等待大盲消息
    onWaitBigBlind: function onWaitBigBlind(curObj) {
        Global.networkManager.onSendGameNotify("game.gameHandler.waitBigBlind", curObj);
    },

    // 消息分类----------------------------// 3 push 服务器推送
    // push则是服务器主动向客户端进行消息推送， 客户端根据路由信息进行消息区分， 转发到后。
    // 通常游戏服务器都会发送大量的这类广播。
    onSelfDataChangeMessage: function onSelfDataChangeMessage(callback) {
        Global.networkManager.onGamePushMessage('onSelfData', callback);
    },
    //策划需求测试使用广播消息 上线之后删除
    onAllowanceMessage: function onAllowanceMessage(callback) {
        Global.networkManager.onGamePushMessage('onAllowance', callback);
    },
    //获取别人发的聊天信息
    onGetChatMessage: function onGetChatMessage(callback) {
        Global.networkManager.onGamePushMessage('onTableChat', callback);
    },

    //获取好友发送的聊天信息 onFriendChat
    onFriendChatMessage: function onFriendChatMessage(callback) {
        Global.networkManager.onGamePushMessage('onFriendChat', callback);
    },

    // 房间列表数据更新
    onRoomListUpdate: function onRoomListUpdate(callback) {
        Global.networkManager.onGamePushMessage('onRoomData', callback);
    },

    //发送世界喊话后,服务器推送的喊话广播 onShout
    onShoutMessage: function onShoutMessage(callback) {
        Global.networkManager.onGamePushMessage('onShout', callback);
    },

    // 设置tableData监听
    onTableDataMessage: function onTableDataMessage(callback) {
        Global.networkManager.onGamePushMessage('onTableData', callback); //
    },

    // 设置自己的牌数据
    onSetSelfCardMessage: function onSetSelfCardMessage(callback) {
        Global.networkManager.onGamePushMessage('onSelfCard', callback); //
    },

    getShowInfo: function getShowInfo(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.getShowInfo", _data, _callback);
    },

    onReveiceChampResult: function onReveiceChampResult(_callback) {
        Global.networkManager.onGamePushMessage("onMatchReward", _callback);
    },

    champRebuy: function champRebuy(curObj, callback) {
        Global.networkManager.onSendGameMessage('player.matchHandler.rebuy', curObj, callback);
    },

    getChampRankList: function getChampRankList(_data, _callback) {
        Global.networkManager.onSendGameMessage('player.matchHandler.getRankList', _data, _callback);
    },

    getPlayerInfo: function getPlayerInfo(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.getPlayersInfo", _data, _callback);
    },

    getChampTableList: function getChampTableList(_data, _callback) {
        Global.networkManager.onSendGameMessage("match.matchHandler.getTableList", _data, _callback);
    },

    onWatchMath: function onWatchMath(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.matchHandler.joinTable", _data, _callback);
    },

    onLeaveMatch: function onLeaveMatch(_data, _callback) {
        Global.networkManager.onSendGameMessage("match.gameHandler.leaveTable", _data, _callback);
    },

    //设置更改
    onChangeSetting: function onChangeSetting(_data, _callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.changeSetting", _data, _callback);
    },

    updateTimer: function updateTimer(_callback) {
        Global.networkManager.onSendGameMessage("player.playerHandler.getServerTime", null, _callback, true);
    },

    giveUpMatch: function giveUpMatch(_data, _callback) {
        Global.networkManager.onSendGameMessage("match.matchHandler.outMatch", _data, _callback);
    }

});
module.exports = MessageManager;

cc._RF.pop();
},{"Config":"Config","UITools":"UITools"}],"Moment":[function(require,module,exports){
"use strict";
cc._RF.push(module, '30154aq1KFEqYYSySvowCFO', 'Moment');
// Scripts/Tools/Moment.js

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
    (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
})(undefined, function () {
    'use strict';

    var hookCallback;

    function utils_hooks__hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid(flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }

    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {}

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set(mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet(units, value) {
        var unit;
        if ((typeof units === 'undefined' ? 'undefined' : _typeof(units)) === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function func() {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1 = /\d/; //       0 - 9
    var match2 = /\d\d/; //      00 - 99
    var match3 = /\d{3}/; //     000 - 999
    var match4 = /\d{4}/; //    0000 - 9999
    var match6 = /[+-]?\d{6}/; // -999999 - 999999
    var match1to2 = /\d\d?/; //       0 - 99
    var match1to3 = /\d{1,3}/; //       0 - 999
    var match1to4 = /\d{1,4}/; //       0 - 9999
    var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

    var matchUnsigned = /\d+/; //       0 - inf
    var matchSigned = /[+-]?\d+/; //    -inf - inf

    var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction(sth) {
        // https://github.com/moment/moment/issues/2325
        return typeof sth === 'function' && Object.prototype.toString.call(sth) === '[object Function]';
    }

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function func(input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/], ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/], ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/], ['GGGG-[W]WW', /\d{4}-W\d{2}/], ['YYYY-DDD', /\d{4}-\d{3}/]];

    // iso time formats and regexes
    var isoTimes = [['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/], ['HH:mm', /(T| )\d\d:\d\d/], ['HH', /(T| )\d\d/]];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    // match[6] should be 'T' or space
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });

    function createDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;

        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear,
            janX = createUTCDate(year, 0, 1 + week1Jan),
            d = janX.getUTCDay(),
            dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }

        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || format === undefined && input === '') {
            return valid__createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
            configFromObject(config);
        } else if (typeof input === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof locale === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function () {
        var other = local__createLocal.apply(null, arguments);
        return other < this ? this : other;
    });

    var prototypeMax = deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function () {
        var other = local__createLocal.apply(null, arguments);
        return other > this ? this : other;
    });

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = (string || '').match(matchOffset) || [];
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - +res;
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }

    function isDaylightSavingTimeShifted() {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return !this._isUTC;
    }

    function isUtcOffset() {
        return this._isUTC;
    }

    function isUtc() {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration(input, key) {
        var duration = input,

        // matching against regexp is expensive, do it on demand
        match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                d: parseIso(match[4], sign),
                h: parseIso(match[5], sign),
                m: parseIso(match[6], sign),
                s: parseIso(match[7], sign),
                w: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if ((typeof duration === 'undefined' ? 'undefined' : _typeof(duration)) === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = { milliseconds: 0, months: 0 };

        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val;val = period;period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore(input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween(from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame(input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units);
        }
    }

    function diff(input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta,
            output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),

        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString() {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function moment_format__format(inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow(withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow(withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });

    function localeData() {
        return this._locale;
    }

    function startOf(units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
            /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
            /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
            /* falls through */
            case 'hour':
                this.minutes(0);
            /* falls through */
            case 'minute':
                this.seconds(0);
            /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    }

    function to_type__valueOf() {
        return +this._d - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(+this / 1000);
    }

    function toDate() {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function moment_valid__isValid() {
        return valid__isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear(input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add(input - year, 'y');
    }

    function getSetISOWeekYear(input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add(input - year, 'y');
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', matchWord);
    addRegexToken('ddd', matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse(weekdayName) {
        var i, mom, regex;

        this._weekdaysParse = this._weekdaysParse || [];

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = moment_format__format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = getSet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = getSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = moment_format__toISOString;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;

    // Year
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment_moment__createUnix(input) {
        return local__createLocal(input * 1000);
    }

    function moment_moment__createInZone() {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };

    function locale_calendar__calendar(key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat(string) {
        return string;
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };

    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar = defaultCalendar;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto._invalidDate = defaultInvalidDate;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto._ordinal = defaultOrdinal;
    prototype__proto.ordinal = ordinal;
    prototype__proto._ordinalParse = defaultOrdinalParse;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto._relativeTime = defaultRelativeTime;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;

    // Month
    prototype__proto.months = localeMonths;
    prototype__proto._months = defaultLocaleMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto._weekdays = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get(format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list(format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths(format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort(format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays(format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort(format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin(format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function ordinal(number) {
            var b = number % 10,
                output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract(duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as(units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf() {
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');

    function duration_get__get(units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var duration_get__months = makeGetter('months');
    var years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45, // seconds to minute
        m: 45, // minutes to hour
        h: 22, // hours to day
        d: 26, // days to month
        M: 11 // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds] || minutes === 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours === 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days === 1 && ['d'] || days < thresholds.d && ['dd', days] || months === 1 && ['M'] || months < thresholds.M && ['MM', months] || years === 1 && ['y'] || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize(withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days = iso_string__abs(this._days);
        var months = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = duration_get__months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports

    ;

    //! moment.js
    //! version : 2.10.6
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com

    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment_moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment_moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment__default = utils_hooks__hooks;

    //! moment.js locale configuration
    //! locale : afrikaans (af)
    //! author : Werner Mollentze : https://github.com/wernerm

    var af = _moment__default.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function isPM(input) {
            return (/^nm$/i.test(input)
            );
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[Môre om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: '\'n paar sekondes',
            m: '\'n minuut',
            mm: '%d minute',
            h: '\'n uur',
            hh: '%d ure',
            d: '\'n dag',
            dd: '%d dae',
            M: '\'n maand',
            MM: '%d maande',
            y: '\'n jaar',
            yy: '%d jaar'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function ordinal(number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week: {
            dow: 1, // Maandag is die eerste dag van die week.
            doy: 4 // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });

    //! moment.js locale configuration
    //! locale : Moroccan Arabic (ar-ma)
    //! author : ElFadili Yassine : https://github.com/ElFadiliY
    //! author : Abdel Said : https://github.com/abdelsaid

    var ar_ma = _moment__default.defineLocale('ar-ma', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Arabic Saudi Arabia (ar-sa)
    //! author : Suhail Alkowaileet : https://github.com/xsoh

    var ar_sa__symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    },
        ar_sa__numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    var ar_sa = _moment__default.defineLocale('ar-sa', {
        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM: function isPM(input) {
            return 'م' === input;
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        preparse: function preparse(string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return ar_sa__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return ar_sa__symbolMap[match];
            }).replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale  : Tunisian Arabic (ar-tn)

    var ar_tn = _moment__default.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! Locale: Arabic (ar)
    //! Author: Abdel Said: https://github.com/abdelsaid
    //! Changes in months, weekdays: Ahmed Elkhatib
    //! Native plural forms: forabi https://github.com/forabi

    var ar__symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    },
        ar__numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    },
        pluralForm = function pluralForm(n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    },
        plurals = {
        s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    },
        pluralize = function pluralize(u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    },
        ar__months = ['كانون الثاني يناير', 'شباط فبراير', 'آذار مارس', 'نيسان أبريل', 'أيار مايو', 'حزيران يونيو', 'تموز يوليو', 'آب أغسطس', 'أيلول سبتمبر', 'تشرين الأول أكتوبر', 'تشرين الثاني نوفمبر', 'كانون الأول ديسمبر'];

    var ar = _moment__default.defineLocale('ar', {
        months: ar__months,
        monthsShort: ar__months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM: function isPM(input) {
            return 'م' === input;
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y')
        },
        preparse: function preparse(string) {
            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return ar__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return ar__symbolMap[match];
            }).replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : azerbaijani (az)
    //! author : topchiyev : https://github.com/topchiyev

    var az__suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı'
    };

    var az = _moment__default.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gələn həftə] dddd [saat] LT',
            lastDay: '[dünən] LT',
            lastWeek: '[keçən həftə] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s əvvəl',
            s: 'birneçə saniyyə',
            m: 'bir dəqiqə',
            mm: '%d dəqiqə',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il'
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function isPM(input) {
            return (/^(gündüz|axşam)$/.test(input)
            );
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function ordinal(number) {
            if (number === 0) {
                // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (az__suffixes[a] || az__suffixes[b] || az__suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : belarusian (be)
    //! author : Dmitry Demidov : https://github.com/demidov91
    //! author: Praleska: http://praleska.pro/
    //! Author : Menelion Elensúle : https://github.com/Oire

    function be__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function be__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        } else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        } else {
            return number + ' ' + be__plural(format[key], +number);
        }
    }
    function be__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_'),
            'accusative': 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_')
        },
            nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function be__weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            'accusative': 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_')
        },
            nounCase = /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/.test(format) ? 'accusative' : 'nominative';
        return weekdays[nounCase][m.day()];
    }

    var be = _moment__default.defineLocale('be', {
        months: be__monthsCaseReplace,
        monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays: be__weekdaysCaseReplace,
        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar: {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function nextWeek() {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'праз %s',
            past: '%s таму',
            s: 'некалькі секунд',
            m: be__relativeTimeWithPlural,
            mm: be__relativeTimeWithPlural,
            h: be__relativeTimeWithPlural,
            hh: be__relativeTimeWithPlural,
            d: 'дзень',
            dd: be__relativeTimeWithPlural,
            M: 'месяц',
            MM: be__relativeTimeWithPlural,
            y: 'год',
            yy: be__relativeTimeWithPlural
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function isPM(input) {
            return (/^(дня|вечара)$/.test(input)
            );
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        ordinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function ordinal(number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? number + '-і' : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : bulgarian (bg)
    //! author : Krasen Borisov : https://github.com/kraz

    var bg = _moment__default.defineLocale('bg', {
        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Днес в] LT',
            nextDay: '[Утре в] LT',
            nextWeek: 'dddd [в] LT',
            lastDay: '[Вчера в] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[В изминалата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'след %s',
            past: 'преди %s',
            s: 'няколко секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дни',
            M: 'месец',
            MM: '%d месеца',
            y: 'година',
            yy: '%d години'
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function ordinal(number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bengali (bn)
    //! author : Kaushik Gandhi : https://github.com/kaushikgandhi

    var bn__symbolMap = {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
    },
        bn__numberMap = {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
    };

    var bn = _moment__default.defineLocale('bn', {
        months: 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
        monthsShort: 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার'.split('_'),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি'.split('_'),
        weekdaysMin: 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়'
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কএক সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর'
        },
        preparse: function preparse(string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return bn__numberMap[match];
            });
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return bn__symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকেল|রাত/,
        isPM: function isPM(input) {
            return (/^(দুপুর|বিকেল|রাত)$/.test(input)
            );
        },
        //Bengali is a vast language its spoken
        //in different forms in various parts of the world.
        //I have just generalized with most common one used
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকেল';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : tibetan (bo)
    //! author : Thupten N. Chakrishar : https://github.com/vajradog

    var bo__symbolMap = {
        '1': '༡',
        '2': '༢',
        '3': '༣',
        '4': '༤',
        '5': '༥',
        '6': '༦',
        '7': '༧',
        '8': '༨',
        '9': '༩',
        '0': '༠'
    },
        bo__numberMap = {
        '༡': '1',
        '༢': '2',
        '༣': '3',
        '༤': '4',
        '༥': '5',
        '༦': '6',
        '༧': '7',
        '༨': '8',
        '༩': '9',
        '༠': '0'
    };

    var bo = _moment__default.defineLocale('bo', {
        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        monthsShort: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        weekdaysMin: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar: {
            sameDay: '[དི་རིང] LT',
            nextDay: '[སང་ཉིན] LT',
            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay: '[ཁ་སང] LT',
            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s ལ་',
            past: '%s སྔན་ལ',
            s: 'ལམ་སང',
            m: 'སྐར་མ་གཅིག',
            mm: '%d སྐར་མ',
            h: 'ཆུ་ཚོད་གཅིག',
            hh: '%d ཆུ་ཚོད',
            d: 'ཉིན་གཅིག',
            dd: '%d ཉིན་',
            M: 'ཟླ་བ་གཅིག',
            MM: '%d ཟླ་བ',
            y: 'ལོ་གཅིག',
            yy: '%d ལོ'
        },
        preparse: function preparse(string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return bo__numberMap[match];
            });
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return bo__symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        isPM: function isPM(input) {
            return (/^(ཉིན་གུང|དགོང་དག|མཚན་མོ)$/.test(input)
            );
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : breton (br)
    //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': 'munutenn',
            'MM': 'miz',
            'dd': 'devezh'
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var br = _moment__default.defineLocale('br', {
        months: 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort: 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        longDateFormat: {
            LT: 'h[e]mm A',
            LTS: 'h[e]mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY h[e]mm A',
            LLLL: 'dddd, D [a viz] MMMM YYYY h[e]mm A'
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warc\'hoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Dec\'h da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s \'zo',
            s: 'un nebeud segondennoù',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears
        },
        ordinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function ordinal(number) {
            var output = number === 1 ? 'añ' : 'vet';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : bosnian (bs)
    //! author : Nedim Cholich : https://github.com/frontyard
    //! based on (hr) translation by Bojan Marković

    function bs__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = _moment__default.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function nextWeek() {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            m: bs__translate,
            mm: bs__translate,
            h: bs__translate,
            hh: bs__translate,
            d: 'dan',
            dd: bs__translate,
            M: 'mjesec',
            MM: bs__translate,
            y: 'godinu',
            yy: bs__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : catalan (ca)
    //! author : Juan G. Hurtado : https://github.com/juanghurtado

    var ca = _moment__default.defineLocale('ca', {
        months: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
        monthsShort: 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
        weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'LT:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: function sameDay() {
                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function nextDay() {
                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function nextWeek() {
                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function lastDay() {
                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function lastWeek() {
                return '[el] dddd [passat a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'fa %s',
            s: 'uns segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys'
        },
        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function ordinal(number, period) {
            var output = number === 1 ? 'r' : number === 2 ? 'n' : number === 3 ? 'r' : number === 4 ? 't' : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : czech (cs)
    //! author : petrbela : https://github.com/petrbela

    var cs__months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
        cs__monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
    function cs__plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
    }
    function cs__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
            case 'm':
                // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
            case 'mm':
                // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
                break;
            case 'h':
                // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh':
                // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':
                // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'den' : 'dnem';
            case 'dd':
                // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
                break;
            case 'M':
                // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
            case 'MM':
                // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
                break;
            case 'y':
                // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokem';
            case 'yy':
                // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
                break;
        }
    }

    var cs = _moment__default.defineLocale('cs', {
        months: cs__months,
        monthsShort: cs__monthsShort,
        monthsParse: function (months, monthsShort) {
            var i,
                _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(cs__months, cs__monthsShort),
        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function nextWeek() {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'před %s',
            s: cs__translate,
            m: cs__translate,
            mm: cs__translate,
            h: cs__translate,
            hh: cs__translate,
            d: cs__translate,
            dd: cs__translate,
            M: cs__translate,
            MM: cs__translate,
            y: cs__translate,
            yy: cs__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : chuvash (cv)
    //! author : Anatoly Mironov : https://github.com/mirontoli

    var cv = _moment__default.defineLocale('cv', {
        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
        },
        calendar: {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime: {
            future: function future(output) {
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                return output + affix;
            },
            past: '%s каялла',
            s: 'пӗр-ик ҫеккунт',
            m: 'пӗр минут',
            mm: '%d минут',
            h: 'пӗр сехет',
            hh: '%d сехет',
            d: 'пӗр кун',
            dd: '%d кун',
            M: 'пӗр уйӑх',
            MM: '%d уйӑх',
            y: 'пӗр ҫул',
            yy: '%d ҫул'
        },
        ordinalParse: /\d{1,2}-мӗш/,
        ordinal: '%d-мӗш',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Welsh (cy)
    //! author : Robert Allen

    var cy = _moment__default.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
        },
        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function ordinal(number) {
            var b = number,
                output = '',
                lookup = ['', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
            'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
            ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : danish (da)
    //! author : Ulrik Nielsen : https://github.com/mrbase

    var da = _moment__default.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[I dag kl.] LT',
            nextDay: '[I morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[I går kl.] LT',
            lastWeek: '[sidste] dddd [kl] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'få sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en måned',
            MM: '%d måneder',
            y: 'et år',
            yy: '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : austrian german (de-at)
    //! author : lluchs : https://github.com/lluchs
    //! author: Menelion Elensúle: https://github.com/Oire
    //! author : Martin Groller : https://github.com/MadMG

    function de_at__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de_at = _moment__default.defineLocale('de-at', {
        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[Morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[Gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: de_at__processRelativeTime,
            mm: '%d Minuten',
            h: de_at__processRelativeTime,
            hh: '%d Stunden',
            d: de_at__processRelativeTime,
            dd: de_at__processRelativeTime,
            M: de_at__processRelativeTime,
            MM: de_at__processRelativeTime,
            y: de_at__processRelativeTime,
            yy: de_at__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : german (de)
    //! author : lluchs : https://github.com/lluchs
    //! author: Menelion Elensúle: https://github.com/Oire

    function de__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = _moment__default.defineLocale('de', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[Morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[Gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: de__processRelativeTime,
            mm: '%d Minuten',
            h: de__processRelativeTime,
            hh: '%d Stunden',
            d: de__processRelativeTime,
            dd: de__processRelativeTime,
            M: de__processRelativeTime,
            MM: de__processRelativeTime,
            y: de__processRelativeTime,
            yy: de__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : modern greek (el)
    //! author : Aggelos Karalias : https://github.com/mehiel

    var el = _moment__default.defineLocale('el', {
        monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
        monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
        months: function months(momentToFormat, format) {
            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) {
                // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM: function isPM(input) {
            return (input + '').toLowerCase()[0] === 'μ';
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendarEl: {
            sameDay: '[Σήμερα {}] LT',
            nextDay: '[Αύριο {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Χθες {}] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse: 'L'
        },
        calendar: function calendar(key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (typeof output === 'function') {
                output = output.apply(mom);
            }
            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
        },
        relativeTime: {
            future: 'σε %s',
            past: '%s πριν',
            s: 'λίγα δευτερόλεπτα',
            m: 'ένα λεπτό',
            mm: '%d λεπτά',
            h: 'μία ώρα',
            hh: '%d ώρες',
            d: 'μία μέρα',
            dd: '%d μέρες',
            M: 'ένας μήνας',
            MM: '%d μήνες',
            y: 'ένας χρόνος',
            yy: '%d χρόνια'
        },
        ordinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : australian english (en-au)

    var en_au = _moment__default.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : canadian english (en-ca)
    //! author : Jonathan Abourbih : https://github.com/jonbca

    var en_ca = _moment__default.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM, YYYY',
            LLL: 'D MMMM, YYYY h:mm A',
            LLLL: 'dddd, D MMMM, YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });

    //! moment.js locale configuration
    //! locale : great britain english (en-gb)
    //! author : Chris Gedrim : https://github.com/chrisgedrim

    var en_gb = _moment__default.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : esperanto (eo)
    //! author : Colin Dean : https://github.com/colindean
    //! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
    //!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

    var eo = _moment__default.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
        weekdays: 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
        weekdaysShort: 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D[-an de] MMMM, YYYY',
            LLL: 'D[-an de] MMMM, YYYY HH:mm',
            LLLL: 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function isPM(input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[Hodiaŭ je] LT',
            nextDay: '[Morgaŭ je] LT',
            nextWeek: 'dddd [je] LT',
            lastDay: '[Hieraŭ je] LT',
            lastWeek: '[pasinta] dddd [je] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'je %s',
            past: 'antaŭ %s',
            s: 'sekundoj',
            m: 'minuto',
            mm: '%d minutoj',
            h: 'horo',
            hh: '%d horoj',
            d: 'tago', //ne 'diurno', ĉar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'monato',
            MM: '%d monatoj',
            y: 'jaro',
            yy: '%d jaroj'
        },
        ordinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : spanish (es)
    //! author : Julio Napurí : https://github.com/julionc

    var monthsShortDot = 'Ene._Feb._Mar._Abr._May._Jun._Jul._Ago._Sep._Oct._Nov._Dic.'.split('_'),
        es__monthsShort = 'Ene_Feb_Mar_Abr_May_Jun_Jul_Ago_Sep_Oct_Nov_Dic'.split('_');

    var es = _moment__default.defineLocale('es', {
        months: 'Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre'.split('_'),
        monthsShort: function monthsShort(m, format) {
            if (/-MMM-/.test(format)) {
                return es__monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        weekdays: 'Domingo_Lunes_Martes_Miércoles_Jueves_Viernes_Sábado'.split('_'),
        weekdaysShort: 'Dom._Lun._Mar._Mié._Jue._Vie._Sáb.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_Mi_Ju_Vi_Sá'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar: {
            sameDay: function sameDay() {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function nextDay() {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function nextWeek() {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function lastDay() {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function lastWeek() {
                return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : estonian (et)
    //! author : Henry Kehlmann : https://github.com/madhenry
    //! improvements : Illimar Tambek : https://github.com/ragulka

    function et__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'm': ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h': ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd': ['ühe päeva', 'üks päev'],
            'M': ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y': ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = _moment__default.defineLocale('et', {
        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Täna,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[Järgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s pärast',
            past: '%s tagasi',
            s: et__processRelativeTime,
            m: et__processRelativeTime,
            mm: et__processRelativeTime,
            h: et__processRelativeTime,
            hh: et__processRelativeTime,
            d: et__processRelativeTime,
            dd: '%d päeva',
            M: et__processRelativeTime,
            MM: et__processRelativeTime,
            y: et__processRelativeTime,
            yy: et__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : euskara (eu)
    //! author : Eneko Illarramendi : https://github.com/eillarra

    var eu = _moment__default.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm'
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Persian (fa)
    //! author : Ebrahim Byagowi : https://github.com/ebraminio

    var fa__symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    },
        fa__numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    var fa = _moment__default.defineLocale('fa', {
        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
        weekdaysShort: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function isPM(input) {
            return (/بعد از ظهر/.test(input)
            );
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar: {
            sameDay: '[امروز ساعت] LT',
            nextDay: '[فردا ساعت] LT',
            nextWeek: 'dddd [ساعت] LT',
            lastDay: '[دیروز ساعت] LT',
            lastWeek: 'dddd [پیش] [ساعت] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'در %s',
            past: '%s پیش',
            s: 'چندین ثانیه',
            m: 'یک دقیقه',
            mm: '%d دقیقه',
            h: 'یک ساعت',
            hh: '%d ساعت',
            d: 'یک روز',
            dd: '%d روز',
            M: 'یک ماه',
            MM: '%d ماه',
            y: 'یک سال',
            yy: '%d سال'
        },
        preparse: function preparse(string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return fa__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return fa__symbolMap[match];
            }).replace(/,/g, '،');
        },
        ordinalParse: /\d{1,2}م/,
        ordinal: '%dم',
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : finnish (fi)
    //! author : Tarmo Aidantausta : https://github.com/bleadof

    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbersFuture = ['nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden', numbersPast[7], numbersPast[8], numbersPast[9]];
    function fi__translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10 ? isFuture ? numbersFuture[number] : numbersPast[number] : number;
    }

    var fi = _moment__default.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
        weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm'
        },
        calendar: {
            sameDay: '[tänään] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s päästä',
            past: '%s sitten',
            s: fi__translate,
            m: fi__translate,
            mm: fi__translate,
            h: fi__translate,
            hh: fi__translate,
            d: fi__translate,
            dd: fi__translate,
            M: fi__translate,
            MM: fi__translate,
            y: fi__translate,
            yy: fi__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : faroese (fo)
    //! author : Ragnar Johannesen : https://github.com/ragnar123

    var fo = _moment__default.defineLocale('fo', {
        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Í dag kl.] LT',
            nextDay: '[Í morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Í gjár kl.] LT',
            lastWeek: '[síðstu] dddd [kl] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'um %s',
            past: '%s síðani',
            s: 'fá sekund',
            m: 'ein minutt',
            mm: '%d minuttir',
            h: 'ein tími',
            hh: '%d tímar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mánaði',
            MM: '%d mánaðir',
            y: 'eitt ár',
            yy: '%d ár'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : canadian french (fr-ca)
    //! author : Jonathan Abourbih : https://github.com/jonbca

    var fr_ca = _moment__default.defineLocale('fr-ca', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Aujourd\'hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        ordinalParse: /\d{1,2}(er|e)/,
        ordinal: function ordinal(number) {
            return number + (number === 1 ? 'er' : 'e');
        }
    });

    //! moment.js locale configuration
    //! locale : french (fr)
    //! author : John Fischer : https://github.com/jfroffice

    var fr = _moment__default.defineLocale('fr', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Aujourd\'hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        ordinalParse: /\d{1,2}(er|)/,
        ordinal: function ordinal(number) {
            return number + (number === 1 ? 'er' : '');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : frisian (fy)
    //! author : Robin van der Vliet : https://github.com/robin0van0der0v

    var fy__monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        fy__monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = _moment__default.defineLocale('fy', {
        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
        monthsShort: function monthsShort(m, format) {
            if (/-MMM-/.test(format)) {
                return fy__monthsShortWithoutDots[m.month()];
            } else {
                return fy__monthsShortWithDots[m.month()];
            }
        },
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            m: 'ien minút',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function ordinal(number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : galician (gl)
    //! author : Juan G. Hurtado : https://github.com/juanghurtado

    var gl = _moment__default.defineLocale('gl', {
        months: 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
        monthsShort: 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
        weekdays: 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
        weekdaysShort: 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: function sameDay() {
                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextDay: function nextDay() {
                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextWeek: function nextWeek() {
                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            lastDay: function lastDay() {
                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
            },
            lastWeek: function lastWeek() {
                return '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: function future(str) {
                if (str === 'uns segundos') {
                    return 'nuns segundos';
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Hebrew (he)
    //! author : Tomer Cohen : https://github.com/tomer
    //! author : Moshe Simantov : https://github.com/DevelopmentIL
    //! author : Tal Ater : https://github.com/TalAter

    var he = _moment__default.defineLocale('he', {
        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
        monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [ב]MMMM YYYY',
            LLL: 'D [ב]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[היום ב־]LT',
            nextDay: '[מחר ב־]LT',
            nextWeek: 'dddd [בשעה] LT',
            lastDay: '[אתמול ב־]LT',
            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'בעוד %s',
            past: 'לפני %s',
            s: 'מספר שניות',
            m: 'דקה',
            mm: '%d דקות',
            h: 'שעה',
            hh: function hh(number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d: 'יום',
            dd: function dd(number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M: 'חודש',
            MM: function MM(number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y: 'שנה',
            yy: function yy(number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : hindi (hi)
    //! author : Mayank Singhal : https://github.com/mayanksinghal

    var hi__symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
        hi__numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var hi = _moment__default.defineLocale('hi', {
        months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
        monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm बजे',
            LTS: 'A h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s में',
            past: '%s पहले',
            s: 'कुछ ही क्षण',
            m: 'एक मिनट',
            mm: '%d मिनट',
            h: 'एक घंटा',
            hh: '%d घंटे',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महीने',
            MM: '%d महीने',
            y: 'एक वर्ष',
            yy: '%d वर्ष'
        },
        preparse: function preparse(string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return hi__numberMap[match];
            });
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return hi__symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : hrvatski (hr)
    //! author : Bojan Marković : https://github.com/bmarkovic

    function hr__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = _moment__default.defineLocale('hr', {
        months: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_'),
        monthsShort: 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function nextWeek() {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            m: hr__translate,
            mm: hr__translate,
            h: hr__translate,
            hh: hr__translate,
            d: 'dan',
            dd: hr__translate,
            M: 'mjesec',
            MM: hr__translate,
            y: 'godinu',
            yy: hr__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : hungarian (hu)
    //! author : Adam Brunner : https://github.com/adambrunner

    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function hu__translate(number, withoutSuffix, key, isFuture) {
        var num = number,
            suffix;
        switch (key) {
            case 's':
                return isFuture || withoutSuffix ? 'néhány másodperc' : 'néhány másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    var hu = _moment__default.defineLocale('hu', {
        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
        monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm'
        },
        meridiemParse: /de|du/i,
        isPM: function isPM(input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function nextWeek() {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function lastWeek() {
                return week.call(this, false);
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s múlva',
            past: '%s',
            s: hu__translate,
            m: hu__translate,
            mm: hu__translate,
            h: hu__translate,
            hh: hu__translate,
            d: hu__translate,
            dd: hu__translate,
            M: hu__translate,
            MM: hu__translate,
            y: hu__translate,
            yy: hu__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Armenian (hy-am)
    //! author : Armendarabyan : https://github.com/armendarabyan

    function hy_am__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),
            'accusative': 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_')
        },
            nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function hy_am__monthsShortCaseReplace(m, format) {
        var monthsShort = 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_');
        return monthsShort[m.month()];
    }
    function hy_am__weekdaysCaseReplace(m, format) {
        var weekdays = 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_');
        return weekdays[m.day()];
    }

    var hy_am = _moment__default.defineLocale('hy-am', {
        months: hy_am__monthsCaseReplace,
        monthsShort: hy_am__monthsShortCaseReplace,
        weekdays: hy_am__weekdaysCaseReplace,
        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY թ.',
            LLL: 'D MMMM YYYY թ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY թ., HH:mm'
        },
        calendar: {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function nextWeek() {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function lastWeek() {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s հետո',
            past: '%s առաջ',
            s: 'մի քանի վայրկյան',
            m: 'րոպե',
            mm: '%d րոպե',
            h: 'ժամ',
            hh: '%d ժամ',
            d: 'օր',
            dd: '%d օր',
            M: 'ամիս',
            MM: '%d ամիս',
            y: 'տարի',
            yy: '%d տարի'
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function isPM(input) {
            return (/^(ցերեկվա|երեկոյան)$/.test(input)
            );
        },
        meridiem: function meridiem(hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function ordinal(number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Indonesia (id)
    //! author : Mohammad Satrio Utomo : https://github.com/tyok
    //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

    var id = _moment__default.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : icelandic (is)
    //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

    function is__plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function is__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (is__plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (is__plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (is__plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (is__plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (is__plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = _moment__default.defineLocale('is', {
        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm'
        },
        calendar: {
            sameDay: '[í dag kl.] LT',
            nextDay: '[á morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[í gær kl.] LT',
            lastWeek: '[síðasta] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s síðan',
            s: is__translate,
            m: is__translate,
            mm: is__translate,
            h: 'klukkustund',
            hh: is__translate,
            d: is__translate,
            dd: is__translate,
            M: is__translate,
            MM: is__translate,
            y: is__translate,
            yy: is__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : italian (it)
    //! author : Lorenzo : https://github.com/aliem
    //! author: Mattia Larentis: https://github.com/nostalgiaz

    var it = _moment__default.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
        weekdaysShort: 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
        weekdaysMin: 'D_L_Ma_Me_G_V_S'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: function future(s) {
                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: 'un\'ora',
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : japanese (ja)
    //! author : LI Long : https://github.com/baryon

    var ja = _moment__default.defineLocale('ja', {
        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
        longDateFormat: {
            LT: 'Ah時m分',
            LTS: 'Ah時m分s秒',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah時m分',
            LLLL: 'YYYY年M月D日Ah時m分 dddd'
        },
        meridiemParse: /午前|午後/i,
        isPM: function isPM(input) {
            return input === '午後';
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar: {
            sameDay: '[今日] LT',
            nextDay: '[明日] LT',
            nextWeek: '[来週]dddd LT',
            lastDay: '[昨日] LT',
            lastWeek: '[前週]dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '数秒',
            m: '1分',
            mm: '%d分',
            h: '1時間',
            hh: '%d時間',
            d: '1日',
            dd: '%d日',
            M: '1ヶ月',
            MM: '%dヶ月',
            y: '1年',
            yy: '%d年'
        }
    });

    //! moment.js locale configuration
    //! locale : Boso Jowo (jv)
    //! author : Rony Lantip : https://github.com/lantip
    //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

    var jv = _moment__default.defineLocale('jv', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Georgian (ka)
    //! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

    function ka__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            'accusative': 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },
            nounCase = /D[oD] *MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function ka__weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            'accusative': 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
        },
            nounCase = /(წინა|შემდეგ)/.test(format) ? 'accusative' : 'nominative';
        return weekdays[nounCase][m.day()];
    }

    var ka = _moment__default.defineLocale('ka', {
        months: ka__monthsCaseReplace,
        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays: ka__weekdaysCaseReplace,
        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[დღეს] LT[-ზე]',
            nextDay: '[ხვალ] LT[-ზე]',
            lastDay: '[გუშინ] LT[-ზე]',
            nextWeek: '[შემდეგ] dddd LT[-ზე]',
            lastWeek: '[წინა] dddd LT-ზე',
            sameElse: 'L'
        },
        relativeTime: {
            future: function future(s) {
                return (/(წამი|წუთი|საათი|წელი)/.test(s) ? s.replace(/ი$/, 'ში') : s + 'ში'
                );
            },
            past: function past(s) {
                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if (/წელი/.test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
            },
            s: 'რამდენიმე წამი',
            m: 'წუთი',
            mm: '%d წუთი',
            h: 'საათი',
            hh: '%d საათი',
            d: 'დღე',
            dd: '%d დღე',
            M: 'თვე',
            MM: '%d თვე',
            y: 'წელი',
            yy: '%d წელი'
        },
        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function ordinal(number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week: {
            dow: 1,
            doy: 7
        }
    });

    //! moment.js locale configuration
    //! locale : khmer (km)
    //! author : Kruy Vanna : https://github.com/kruyvanna

    var km = _moment__default.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
        monthsShort: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ថ្ងៃនៈ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : korean (ko)
    //!
    //! authors
    //!
    //! - Kyungwook, Park : https://github.com/kyungw00k
    //! - Jeeeyul Lee <jeeeyul@gmail.com>

    var ko = _moment__default.defineLocale('ko', {
        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
        longDateFormat: {
            LT: 'A h시 m분',
            LTS: 'A h시 m분 s초',
            L: 'YYYY.MM.DD',
            LL: 'YYYY년 MMMM D일',
            LLL: 'YYYY년 MMMM D일 A h시 m분',
            LLLL: 'YYYY년 MMMM D일 dddd A h시 m분'
        },
        calendar: {
            sameDay: '오늘 LT',
            nextDay: '내일 LT',
            nextWeek: 'dddd LT',
            lastDay: '어제 LT',
            lastWeek: '지난주 dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s 후',
            past: '%s 전',
            s: '몇초',
            ss: '%d초',
            m: '일분',
            mm: '%d분',
            h: '한시간',
            hh: '%d시간',
            d: '하루',
            dd: '%d일',
            M: '한달',
            MM: '%d달',
            y: '일년',
            yy: '%d년'
        },
        ordinalParse: /\d{1,2}일/,
        ordinal: '%d일',
        meridiemParse: /오전|오후/,
        isPM: function isPM(token) {
            return token === '오후';
        },
        meridiem: function meridiem(hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        }
    });

    //! moment.js locale configuration
    //! locale : Luxembourgish (lb)
    //! author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz

    function lb__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = _moment__default.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function lastWeek() {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            m: lb__processRelativeTime,
            mm: '%d Minutten',
            h: lb__processRelativeTime,
            hh: '%d Stonnen',
            d: lb__processRelativeTime,
            dd: '%d Deeg',
            M: lb__processRelativeTime,
            MM: '%d Méint',
            y: lb__processRelativeTime,
            yy: '%d Joer'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Lithuanian (lt)
    //! author : Mindaugas Mozūras : https://github.com/mmozuras

    var lt__units = {
        'm': 'minutė_minutės_minutę',
        'mm': 'minutės_minučių_minutes',
        'h': 'valanda_valandos_valandą',
        'hh': 'valandos_valandų_valandas',
        'd': 'diena_dienos_dieną',
        'dd': 'dienos_dienų_dienas',
        'M': 'mėnuo_mėnesio_mėnesį',
        'MM': 'mėnesiai_mėnesių_mėnesius',
        'y': 'metai_metų_metus',
        'yy': 'metai_metų_metus'
    },
        weekDays = 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_');
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function lt__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
            'accusative': 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_')
        },
            nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
    }
    function special(number) {
        return number % 10 === 0 || number > 10 && number < 20;
    }
    function forms(key) {
        return lt__units[key].split('_');
    }
    function lt__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    function relativeWeekDay(moment, format) {
        var nominative = format.indexOf('dddd HH:mm') === -1,
            weekDay = weekDays[moment.day()];
        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + 'į';
    }

    var lt = _moment__default.defineLocale('lt', {
        months: lt__monthsCaseReplace,
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: relativeWeekDay,
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
        },
        calendar: {
            sameDay: '[Šiandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Praėjusį] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'po %s',
            past: 'prieš %s',
            s: translateSeconds,
            m: translateSingular,
            mm: lt__translate,
            h: translateSingular,
            hh: lt__translate,
            d: translateSingular,
            dd: lt__translate,
            M: translateSingular,
            MM: lt__translate,
            y: translateSingular,
            yy: lt__translate
        },
        ordinalParse: /\d{1,2}-oji/,
        ordinal: function ordinal(number) {
            return number + '-oji';
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : latvian (lv)
    //! author : Kristaps Karlsons : https://github.com/skakri
    //! author : Jānis Elmeris : https://github.com/JanisE

    var lv__units = {
        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'h': 'stundas_stundām_stunda_stundas'.split('_'),
        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
        'd': 'dienas_dienām_diena_dienas'.split('_'),
        'dd': 'dienas_dienām_diena_dienas'.split('_'),
        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'y': 'gada_gadiem_gads_gadi'.split('_'),
        'yy': 'gada_gadiem_gads_gadi'.split('_')
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function lv__format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
        }
    }
    function lv__relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + lv__format(lv__units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return lv__format(lv__units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = _moment__default.defineLocale('lv', {
        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm'
        },
        calendar: {
            sameDay: '[Šodien pulksten] LT',
            nextDay: '[Rīt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pagājušā] dddd [pulksten] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'pēc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            m: relativeTimeWithSingular,
            mm: lv__relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: lv__relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: lv__relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: lv__relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: lv__relativeTimeWithPlural
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Montenegrin (me)
    //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

    var me__translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
        },
        translate: function translate(number, withoutSuffix, key) {
            var wordKey = me__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + me__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var me = _moment__default.defineLocale('me', {
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
        weekdays: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota'],
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sri.', 'čet.', 'pet.', 'sub.'],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function nextWeek() {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function lastWeek() {
                var lastWeekDays = ['[prošle] [nedjelje] [u] LT', '[prošlog] [ponedjeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srijede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            m: me__translator.translate,
            mm: me__translator.translate,
            h: me__translator.translate,
            hh: me__translator.translate,
            d: 'dan',
            dd: me__translator.translate,
            M: 'mjesec',
            MM: me__translator.translate,
            y: 'godinu',
            yy: me__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : macedonian (mk)
    //! author : Borislav Mickov : https://github.com/B0k0

    var mk = _moment__default.defineLocale('mk', {
        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Денес во] LT',
            nextDay: '[Утре во] LT',
            nextWeek: 'dddd [во] LT',
            lastDay: '[Вчера во] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Во изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Во изминатиот] dddd [во] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'после %s',
            past: 'пред %s',
            s: 'неколку секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дена',
            M: 'месец',
            MM: '%d месеци',
            y: 'година',
            yy: '%d години'
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function ordinal(number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : malayalam (ml)
    //! author : Floyd Pink : https://github.com/floydpink

    var ml = _moment__default.defineLocale('ml', {
        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
        monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
        weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -നു',
            LTS: 'A h:mm:ss -നു',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -നു',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു'
        },
        calendar: {
            sameDay: '[ഇന്ന്] LT',
            nextDay: '[നാളെ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ഇന്നലെ] LT',
            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s കഴിഞ്ഞ്',
            past: '%s മുൻപ്',
            s: 'അൽപ നിമിഷങ്ങൾ',
            m: 'ഒരു മിനിറ്റ്',
            mm: '%d മിനിറ്റ്',
            h: 'ഒരു മണിക്കൂർ',
            hh: '%d മണിക്കൂർ',
            d: 'ഒരു ദിവസം',
            dd: '%d ദിവസം',
            M: 'ഒരു മാസം',
            MM: '%d മാസം',
            y: 'ഒരു വർഷം',
            yy: '%d വർഷം'
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        isPM: function isPM(input) {
            return (/^(ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി)$/.test(input)
            );
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : Marathi (mr)
    //! author : Harshad Kale : https://github.com/kalehv

    var mr__symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
        mr__numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var mr = _moment__default.defineLocale('mr', {
        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm वाजता',
            LTS: 'A h:mm:ss वाजता',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm वाजता',
            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता'
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[उद्या] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s नंतर',
            past: '%s पूर्वी',
            s: 'सेकंद',
            m: 'एक मिनिट',
            mm: '%d मिनिटे',
            h: 'एक तास',
            hh: '%d तास',
            d: 'एक दिवस',
            dd: '%d दिवस',
            M: 'एक महिना',
            MM: '%d महिने',
            y: 'एक वर्ष',
            yy: '%d वर्षे'
        },
        preparse: function preparse(string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return mr__numberMap[match];
            });
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return mr__symbolMap[match];
            });
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात्री') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळी') {
                return hour;
            } else if (meridiem === 'दुपारी') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'सायंकाळी') {
                return hour + 12;
            }
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'रात्री';
            } else if (hour < 10) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Malaysia (ms-MY)
    //! author : Weldan Jamili : https://github.com/weldan

    var ms_my = _moment__default.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Malaysia (ms-MY)
    //! author : Weldan Jamili : https://github.com/weldan

    var locale_ms = _moment__default.defineLocale('ms', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Burmese (my)
    //! author : Squar team, mysquar.com

    var my__symbolMap = {
        '1': '၁',
        '2': '၂',
        '3': '၃',
        '4': '၄',
        '5': '၅',
        '6': '၆',
        '7': '၇',
        '8': '၈',
        '9': '၉',
        '0': '၀'
    },
        my__numberMap = {
        '၁': '1',
        '၂': '2',
        '၃': '3',
        '၄': '4',
        '၅': '5',
        '၆': '6',
        '၇': '7',
        '၈': '8',
        '၉': '9',
        '၀': '0'
    };

    var my = _moment__default.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်'
        },
        preparse: function preparse(string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return my__numberMap[match];
            });
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return my__symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : norwegian bokmål (nb)
    //! authors : Espen Hovlandsdal : https://github.com/rexxars
    //!           Sigurd Gartmann : https://github.com/sigurdga

    var nb = _moment__default.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'søn_man_tirs_ons_tors_fre_lør'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'H.mm',
            LTS: 'H.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H.mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] H.mm'
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'for %s siden',
            s: 'noen sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            M: 'en måned',
            MM: '%d måneder',
            y: 'ett år',
            yy: '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : nepali/nepalese
    //! author : suvash : https://github.com/suvash

    var ne__symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
        ne__numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var ne = _moment__default.defineLocale('ne', {
        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
        monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin: 'आइ._सो._मङ्_बु._बि._शु._श.'.split('_'),
        longDateFormat: {
            LT: 'Aको h:mm बजे',
            LTS: 'Aको h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aको h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे'
        },
        preparse: function preparse(string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return ne__numberMap[match];
            });
        },
        postformat: function postformat(string) {
            return string.replace(/\d/g, function (match) {
                return ne__symbolMap[match];
            });
        },
        meridiemParse: /राती|बिहान|दिउँसो|बेलुका|साँझ|राती/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राती') {
                return hour < 3 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'बेलुका' || meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 3) {
                return 'राती';
            } else if (hour < 10) {
                return 'बिहान';
            } else if (hour < 15) {
                return 'दिउँसो';
            } else if (hour < 18) {
                return 'बेलुका';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राती';
            }
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[भोली] LT',
            nextWeek: '[आउँदो] dddd[,] LT',
            lastDay: '[हिजो] LT',
            lastWeek: '[गएको] dddd[,] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sमा',
            past: '%s अगाडी',
            s: 'केही समय',
            m: 'एक मिनेट',
            mm: '%d मिनेट',
            h: 'एक घण्टा',
            hh: '%d घण्टा',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महिना',
            MM: '%d महिना',
            y: 'एक बर्ष',
            yy: '%d बर्ष'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : dutch (nl)
    //! author : Joris Röling : https://github.com/jjupiter

    var nl__monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        nl__monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var nl = _moment__default.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort: function monthsShort(m, format) {
            if (/-MMM-/.test(format)) {
                return nl__monthsShortWithoutDots[m.month()];
            } else {
                return nl__monthsShortWithDots[m.month()];
            }
        },
        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function ordinal(number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : norwegian nynorsk (nn)
    //! author : https://github.com/mechuwind

    var nn = _moment__default.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin: 'su_må_ty_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'for %s sidan',
            s: 'nokre sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            M: 'ein månad',
            MM: '%d månader',
            y: 'eit år',
            yy: '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : polish (pl)
    //! author : Rafal Hirsz : https://github.com/evoL

    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
    function pl__plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
    }
    function pl__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (pl__plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix ? 'godzina' : 'godzinę';
            case 'hh':
                return result + (pl__plural(number) ? 'godziny' : 'godzin');
            case 'MM':
                return result + (pl__plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (pl__plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = _moment__default.defineLocale('pl', {
        months: function months(momentToFormat, format) {
            if (format === '') {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort: 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
        weekdaysMin: 'N_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: '[W] dddd [o] LT',
            lastDay: '[Wczoraj o] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            m: pl__translate,
            mm: pl__translate,
            h: pl__translate,
            hh: pl__translate,
            d: '1 dzień',
            dd: '%d dni',
            M: 'miesiąc',
            MM: pl__translate,
            y: 'rok',
            yy: pl__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : brazilian portuguese (pt-br)
    //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

    var pt_br = _moment__default.defineLocale('pt-br', {
        months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function lastWeek() {
                return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'em %s',
            past: '%s atrás',
            s: 'poucos segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº'
    });

    //! moment.js locale configuration
    //! locale : portuguese (pt)
    //! author : Jefferson : https://github.com/jalex79

    var pt = _moment__default.defineLocale('pt', {
        months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function lastWeek() {
                return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : romanian (ro)
    //! author : Vlad Gurdiga : https://github.com/gurdiga
    //! author : Valentin Agachi : https://github.com/avaly

    function ro__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'minute',
            'hh': 'ore',
            'dd': 'zile',
            'MM': 'luni',
            'yy': 'ani'
        },
            separator = ' ';
        if (number % 100 >= 20 || number >= 100 && number % 100 === 0) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = _moment__default.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s în urmă',
            s: 'câteva secunde',
            m: 'un minut',
            mm: ro__relativeTimeWithPlural,
            h: 'o oră',
            hh: ro__relativeTimeWithPlural,
            d: 'o zi',
            dd: ro__relativeTimeWithPlural,
            M: 'o lună',
            MM: ro__relativeTimeWithPlural,
            y: 'un an',
            yy: ro__relativeTimeWithPlural
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : russian (ru)
    //! author : Viktorminator : https://github.com/Viktorminator
    //! Author : Menelion Elensúle : https://github.com/Oire

    function ru__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function ru__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        } else {
            return number + ' ' + ru__plural(format[key], +number);
        }
    }
    function ru__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
        },
            nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function ru__monthsShortCaseReplace(m, format) {
        var monthsShort = {
            'nominative': 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
        },
            nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return monthsShort[nounCase][m.month()];
    }
    function ru__weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
        },
            nounCase = /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/.test(format) ? 'accusative' : 'nominative';
        return weekdays[nounCase][m.day()];
    }

    var ru = _moment__default.defineLocale('ru', {
        months: ru__monthsCaseReplace,
        monthsShort: ru__monthsShortCaseReplace,
        weekdays: ru__weekdaysCaseReplace,
        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse: [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar: {
            sameDay: '[Сегодня в] LT',
            nextDay: '[Завтра в] LT',
            lastDay: '[Вчера в] LT',
            nextWeek: function nextWeek() {
                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
            },
            lastWeek: function lastWeek(now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd [в] LT';
                    } else {
                        return '[В] dddd [в] LT';
                    }
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'через %s',
            past: '%s назад',
            s: 'несколько секунд',
            m: ru__relativeTimeWithPlural,
            mm: ru__relativeTimeWithPlural,
            h: 'час',
            hh: ru__relativeTimeWithPlural,
            d: 'день',
            dd: ru__relativeTimeWithPlural,
            M: 'месяц',
            MM: ru__relativeTimeWithPlural,
            y: 'год',
            yy: ru__relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function isPM(input) {
            return (/^(дня|вечера)$/.test(input)
            );
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        ordinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function ordinal(number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Sinhalese (si)
    //! author : Sampath Sitinamaluwa : https://github.com/sampathsris

    var si = _moment__default.defineLocale('si', {
        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
        weekdays: 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
        },
        calendar: {
            sameDay: '[අද] LT[ට]',
            nextDay: '[හෙට] LT[ට]',
            nextWeek: 'dddd LT[ට]',
            lastDay: '[ඊයේ] LT[ට]',
            lastWeek: '[පසුගිය] dddd LT[ට]',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sකින්',
            past: '%sකට පෙර',
            s: 'තත්පර කිහිපය',
            m: 'මිනිත්තුව',
            mm: 'මිනිත්තු %d',
            h: 'පැය',
            hh: 'පැය %d',
            d: 'දිනය',
            dd: 'දින %d',
            M: 'මාසය',
            MM: 'මාස %d',
            y: 'වසර',
            yy: 'වසර %d'
        },
        ordinalParse: /\d{1,2} වැනි/,
        ordinal: function ordinal(number) {
            return number + ' වැනි';
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : slovak (sk)
    //! author : Martin Minka : https://github.com/k2s
    //! based on work of petrbela : https://github.com/petrbela

    var sk__months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
        sk__monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function sk__plural(n) {
        return n > 1 && n < 5;
    }
    function sk__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
            case 'm':
                // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
            case 'mm':
                // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
                break;
            case 'h':
                // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh':
                // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':
                // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'deň' : 'dňom';
            case 'dd':
                // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
                break;
            case 'M':
                // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
            case 'MM':
                // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
                break;
            case 'y':
                // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokom';
            case 'yy':
                // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
                break;
        }
    }

    var sk = _moment__default.defineLocale('sk', {
        months: sk__months,
        monthsShort: sk__monthsShort,
        monthsParse: function (months, monthsShort) {
            var i,
                _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(sk__months, sk__monthsShort),
        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function nextWeek() {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: sk__translate,
            m: sk__translate,
            mm: sk__translate,
            h: sk__translate,
            hh: sk__translate,
            d: sk__translate,
            dd: sk__translate,
            M: sk__translate,
            MM: sk__translate,
            y: sk__translate,
            yy: sk__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : slovenian (sl)
    //! author : Robert Sedovšek : https://github.com/sedovsek

    function sl__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = _moment__default.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',

            nextWeek: function nextWeek() {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: sl__processRelativeTime,
            m: sl__processRelativeTime,
            mm: sl__processRelativeTime,
            h: sl__processRelativeTime,
            hh: sl__processRelativeTime,
            d: sl__processRelativeTime,
            dd: sl__processRelativeTime,
            M: sl__processRelativeTime,
            MM: sl__processRelativeTime,
            y: sl__processRelativeTime,
            yy: sl__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Albanian (sq)
    //! author : Flakërim Ismani : https://github.com/flakerimi
    //! author: Menelion Elensúle: https://github.com/Oire (tests)
    //! author : Oerd Cukalla : https://github.com/oerd (fixes)

    var sq = _moment__default.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
        meridiemParse: /PD|MD/,
        isPM: function isPM(input) {
            return input.charAt(0) === 'M';
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Sot në] LT',
            nextDay: '[Nesër në] LT',
            nextWeek: 'dddd [në] LT',
            lastDay: '[Dje në] LT',
            lastWeek: 'dddd [e kaluar në] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'në %s',
            past: '%s më parë',
            s: 'disa sekonda',
            m: 'një minutë',
            mm: '%d minuta',
            h: 'një orë',
            hh: '%d orë',
            d: 'një ditë',
            dd: '%d ditë',
            M: 'një muaj',
            MM: '%d muaj',
            y: 'një vit',
            yy: '%d vite'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Serbian-cyrillic (sr-cyrl)
    //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

    var sr_cyrl__translator = {
        words: { //Different grammatical cases
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
        },
        translate: function translate(number, withoutSuffix, key) {
            var wordKey = sr_cyrl__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + sr_cyrl__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr_cyrl = _moment__default.defineLocale('sr-cyrl', {
        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function nextWeek() {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay: '[јуче у] LT',
            lastWeek: function lastWeek() {
                var lastWeekDays = ['[прошле] [недеље] [у] LT', '[прошлог] [понедељка] [у] LT', '[прошлог] [уторка] [у] LT', '[прошле] [среде] [у] LT', '[прошлог] [четвртка] [у] LT', '[прошлог] [петка] [у] LT', '[прошле] [суботе] [у] LT'];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'за %s',
            past: 'пре %s',
            s: 'неколико секунди',
            m: sr_cyrl__translator.translate,
            mm: sr_cyrl__translator.translate,
            h: sr_cyrl__translator.translate,
            hh: sr_cyrl__translator.translate,
            d: 'дан',
            dd: sr_cyrl__translator.translate,
            M: 'месец',
            MM: sr_cyrl__translator.translate,
            y: 'годину',
            yy: sr_cyrl__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Serbian-latin (sr)
    //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

    var sr__translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
        },
        translate: function translate(number, withoutSuffix, key) {
            var wordKey = sr__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + sr__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr = _moment__default.defineLocale('sr', {
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function nextWeek() {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function lastWeek() {
                var lastWeekDays = ['[prošle] [nedelje] [u] LT', '[prošlog] [ponedeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            m: sr__translator.translate,
            mm: sr__translator.translate,
            h: sr__translator.translate,
            hh: sr__translator.translate,
            d: 'dan',
            dd: sr__translator.translate,
            M: 'mesec',
            MM: sr__translator.translate,
            y: 'godinu',
            yy: sr__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : swedish (sv)
    //! author : Jens Alm : https://github.com/ulmus

    var sv = _moment__default.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'för %s sedan',
            s: 'några sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en månad',
            MM: '%d månader',
            y: 'ett år',
            yy: '%d år'
        },
        ordinalParse: /\d{1,2}(e|a)/,
        ordinal: function ordinal(number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'e' : b === 1 ? 'a' : b === 2 ? 'a' : b === 3 ? 'e' : 'e';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : tamil (ta)
    //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

    var ta = _moment__default.defineLocale('ta', {
        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm'
        },
        calendar: {
            sameDay: '[இன்று] LT',
            nextDay: '[நாளை] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[நேற்று] LT',
            lastWeek: '[கடந்த வாரம்] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s இல்',
            past: '%s முன்',
            s: 'ஒரு சில விநாடிகள்',
            m: 'ஒரு நிமிடம்',
            mm: '%d நிமிடங்கள்',
            h: 'ஒரு மணி நேரம்',
            hh: '%d மணி நேரம்',
            d: 'ஒரு நாள்',
            dd: '%d நாட்கள்',
            M: 'ஒரு மாதம்',
            MM: '%d மாதங்கள்',
            y: 'ஒரு வருடம்',
            yy: '%d ஆண்டுகள்'
        },
        ordinalParse: /\d{1,2}வது/,
        ordinal: function ordinal(number) {
            return number + 'வது';
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை'; // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : thai (th)
    //! author : Kridsada Thanabulpong : https://github.com/sirn

    var th = _moment__default.defineLocale('th', {
        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
        monthsShort: 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        longDateFormat: {
            LT: 'H นาฬิกา m นาที',
            LTS: 'H นาฬิกา m นาที s วินาที',
            L: 'YYYY/MM/DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY เวลา H นาฬิกา m นาที',
            LLLL: 'วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที'
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function isPM(input) {
            return input === 'หลังเที่ยง';
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar: {
            sameDay: '[วันนี้ เวลา] LT',
            nextDay: '[พรุ่งนี้ เวลา] LT',
            nextWeek: 'dddd[หน้า เวลา] LT',
            lastDay: '[เมื่อวานนี้ เวลา] LT',
            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'อีก %s',
            past: '%sที่แล้ว',
            s: 'ไม่กี่วินาที',
            m: '1 นาที',
            mm: '%d นาที',
            h: '1 ชั่วโมง',
            hh: '%d ชั่วโมง',
            d: '1 วัน',
            dd: '%d วัน',
            M: '1 เดือน',
            MM: '%d เดือน',
            y: '1 ปี',
            yy: '%d ปี'
        }
    });

    //! moment.js locale configuration
    //! locale : Tagalog/Filipino (tl-ph)
    //! author : Dan Hagman

    var tl_ph = _moment__default.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Ngayon sa] LT',
            nextDay: '[Bukas sa] LT',
            nextWeek: 'dddd [sa] LT',
            lastDay: '[Kahapon sa] LT',
            lastWeek: 'dddd [huling linggo] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon'
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function ordinal(number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : turkish (tr)
    //! authors : Erhan Gundogan : https://github.com/erhangundogan,
    //!           Burak Yiğit Kaya: https://github.com/BYK

    var tr__suffixes = {
        1: '\'inci',
        5: '\'inci',
        8: '\'inci',
        70: '\'inci',
        80: '\'inci',
        2: '\'nci',
        7: '\'nci',
        20: '\'nci',
        50: '\'nci',
        3: '\'üncü',
        4: '\'üncü',
        100: '\'üncü',
        6: '\'ncı',
        9: '\'uncu',
        10: '\'uncu',
        30: '\'uncu',
        60: '\'ıncı',
        90: '\'ıncı'
    };

    var tr = _moment__default.defineLocale('tr', {
        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[haftaya] dddd [saat] LT',
            lastDay: '[dün] LT',
            lastWeek: '[geçen hafta] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s önce',
            s: 'birkaç saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yıl',
            yy: '%d yıl'
        },
        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
        ordinal: function ordinal(number) {
            if (number === 0) {
                // special case for zero
                return number + '\'ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (tr__suffixes[a] || tr__suffixes[b] || tr__suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : talossan (tzl)
    //! author : Robin van der Vliet : https://github.com/robin0van0der0v with the help of Iustì Canun


    var tzl = _moment__default.defineLocale('tzl', {
        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'LT.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY LT',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY LT'
        },
        meridiem: function meridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'd\'o' : 'D\'O';
            } else {
                return isLower ? 'd\'a' : 'D\'A';
            }
        },
        calendar: {
            sameDay: '[oxhi à] LT',
            nextDay: '[demà à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[ieiri à] LT',
            lastWeek: '[sür el] dddd [lasteu à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: tzl__processRelativeTime,
            m: tzl__processRelativeTime,
            mm: tzl__processRelativeTime,
            h: tzl__processRelativeTime,
            hh: tzl__processRelativeTime,
            d: tzl__processRelativeTime,
            dd: tzl__processRelativeTime,
            M: tzl__processRelativeTime,
            MM: tzl__processRelativeTime,
            y: tzl__processRelativeTime,
            yy: tzl__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    function tzl__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['viensas secunds', '\'iensas secunds'],
            'm': ['\'n míut', '\'iens míut'],
            'mm': [number + ' míuts', ' ' + number + ' míuts'],
            'h': ['\'n þora', '\'iensa þora'],
            'hh': [number + ' þoras', ' ' + number + ' þoras'],
            'd': ['\'n ziua', '\'iensa ziua'],
            'dd': [number + ' ziuas', ' ' + number + ' ziuas'],
            'M': ['\'n mes', '\'iens mes'],
            'MM': [number + ' mesen', ' ' + number + ' mesen'],
            'y': ['\'n ar', '\'iens ar'],
            'yy': [number + ' ars', ' ' + number + ' ars']
        };
        return isFuture ? format[key][0] : withoutSuffix ? format[key][0] : format[key][1].trim();
    }

    //! moment.js locale configuration
    //! locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
    //! author : Abdel Said : https://github.com/abdelsaid

    var tzm_latn = _moment__default.defineLocale('tzm-latn', {
        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            m: 'minuḍ',
            mm: '%d minuḍ',
            h: 'saɛa',
            hh: '%d tassaɛin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Morocco Central Atlas Tamaziɣt (tzm)
    //! author : Abdel Said : https://github.com/abdelsaid

    var tzm = _moment__default.defineLocale('tzm', {
        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past: 'ⵢⴰⵏ %s',
            s: 'ⵉⵎⵉⴽ',
            m: 'ⵎⵉⵏⵓⴺ',
            mm: '%d ⵎⵉⵏⵓⴺ',
            h: 'ⵙⴰⵄⴰ',
            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d: 'ⴰⵙⵙ',
            dd: '%d oⵙⵙⴰⵏ',
            M: 'ⴰⵢoⵓⵔ',
            MM: '%d ⵉⵢⵢⵉⵔⵏ',
            y: 'ⴰⵙⴳⴰⵙ',
            yy: '%d ⵉⵙⴳⴰⵙⵏ'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : ukrainian (uk)
    //! author : zemlanin : https://github.com/zemlanin
    //! Author : Menelion Elensúle : https://github.com/Oire

    function uk__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function uk__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'хвилина_хвилини_хвилин',
            'hh': 'година_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        } else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        } else {
            return number + ' ' + uk__plural(format[key], +number);
        }
    }
    function uk__monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
            'accusative': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
        },
            nounCase = /D[oD]? *MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function uk__weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        },
            nounCase = /(\[[ВвУу]\]) ?dddd/.test(format) ? 'accusative' : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format) ? 'genitive' : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = _moment__default.defineLocale('uk', {
        months: uk__monthsCaseReplace,
        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
        weekdays: uk__weekdaysCaseReplace,
        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY р.',
            LLL: 'D MMMM YYYY р., HH:mm',
            LLLL: 'dddd, D MMMM YYYY р., HH:mm'
        },
        calendar: {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function lastWeek() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'за %s',
            past: '%s тому',
            s: 'декілька секунд',
            m: uk__relativeTimeWithPlural,
            mm: uk__relativeTimeWithPlural,
            h: 'годину',
            hh: uk__relativeTimeWithPlural,
            d: 'день',
            dd: uk__relativeTimeWithPlural,
            M: 'місяць',
            MM: uk__relativeTimeWithPlural,
            y: 'рік',
            yy: uk__relativeTimeWithPlural
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function isPM(input) {
            return (/^(дня|вечора)$/.test(input)
            );
        },
        meridiem: function meridiem(hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        ordinalParse: /\d{1,2}-(й|го)/,
        ordinal: function ordinal(number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : uzbek (uz)
    //! author : Sardor Muminov : https://github.com/muminoff

    var uz = _moment__default.defineLocale('uz', {
        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm'
        },
        calendar: {
            sameDay: '[Бугун соат] LT [да]',
            nextDay: '[Эртага] LT [да]',
            nextWeek: 'dddd [куни соат] LT [да]',
            lastDay: '[Кеча соат] LT [да]',
            lastWeek: '[Утган] dddd [куни соат] LT [да]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'Якин %s ичида',
            past: 'Бир неча %s олдин',
            s: 'фурсат',
            m: 'бир дакика',
            mm: '%d дакика',
            h: 'бир соат',
            hh: '%d соат',
            d: 'бир кун',
            dd: '%d кун',
            M: 'бир ой',
            MM: '%d ой',
            y: 'бир йил',
            yy: '%d йил'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : vietnamese (vi)
    //! author : Bang Nguyen : https://github.com/bangnk

    var vi = _moment__default.defineLocale('vi', {
        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
        monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [năm] YYYY',
            LLL: 'D MMMM [năm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s tới',
            past: '%s trước',
            s: 'vài giây',
            m: 'một phút',
            mm: '%d phút',
            h: 'một giờ',
            hh: '%d giờ',
            d: 'một ngày',
            dd: '%d ngày',
            M: 'một tháng',
            MM: '%d tháng',
            y: 'một năm',
            yy: '%d năm'
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function ordinal(number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : chinese (zh-cn)
    //! author : suupic : https://github.com/suupic
    //! author : Zeno Zeng : https://github.com/zenozeng

    var zh_cn = _moment__default.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'Ah点mm分',
            LTS: 'Ah点m分s秒',
            L: 'YYYY-MM-DD',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日Ah点mm分',
            LLLL: 'YYYY年MMMD日ddddAh点mm分',
            l: 'YYYY-MM-DD',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日Ah点mm分',
            llll: 'YYYY年MMMD日ddddAh点mm分'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function meridiem(hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: function sameDay() {
                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
            },
            nextDay: function nextDay() {
                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
            },
            lastDay: function lastDay() {
                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
            },
            nextWeek: function nextWeek() {
                var startOfWeek, prefix;
                startOfWeek = _moment__default().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            lastWeek: function lastWeek() {
                var startOfWeek, prefix;
                startOfWeek = _moment__default().startOf('week');
                prefix = this.unix() < startOfWeek.unix() ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            sameElse: 'LL'
        },
        ordinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function ordinal(number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s内',
            past: '%s前',
            s: '几秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年'
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : traditional chinese (zh-tw)
    //! author : Ben : https://github.com/ben-lin

    var zh_tw = _moment__default.defineLocale('zh-tw', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'Ah點mm分',
            LTS: 'Ah點m分s秒',
            L: 'YYYY年MMMD日',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日Ah點mm分',
            LLLL: 'YYYY年MMMD日ddddAh點mm分',
            l: 'YYYY年MMMD日',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日Ah點mm分',
            llll: 'YYYY年MMMD日ddddAh點mm分'
        },
        meridiemParse: /早上|上午|中午|下午|晚上/,
        meridiemHour: function meridiemHour(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function meridiem(hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L'
        },
        ordinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function ordinal(number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            m: '一分鐘',
            mm: '%d分鐘',
            h: '一小時',
            hh: '%d小時',
            d: '一天',
            dd: '%d天',
            M: '一個月',
            MM: '%d個月',
            y: '一年',
            yy: '%d年'
        }
    });

    var moment_with_locales = _moment__default;
    moment_with_locales.locale('en');

    return moment_with_locales;
});

cc._RF.pop();
},{}],"MoneyPollControl":[function(require,module,exports){
"use strict";
cc._RF.push(module, '8991dP4/vFH/rWC1u0YQSMx', 'MoneyPollControl');
// Scripts/UI/GameFrightRoom/MoneyPollControl.js

'use strict';

var Config = require("Config");
var UITools = require('UITools');

var baseJetton = [100000000, 25000000, 5000000, 1000000, 500000, 100000, 25000, 5000, 1000, 500, 100, 25, 5, 1];
var imgJetton = ['img_chip100m', 'img_chip25m', 'img_chip5m', 'img_chip1m', 'img_chip500k', 'img_chip100k', 'img_chip25k', 'img_chip5k', 'img_chip1k', 'img_chip500', 'img_chip100', 'img_chip25', 'img_chip5', 'img_chip1'];
var oneColCount = 20;
var oneJettonWidth = 37;
var oneHeight = 3;

cc.Class({
    extends: cc.Component,

    properties: {
        JettonItem: cc.Prefab,
        _jettonList: [],
        _jettonPool: [],
        _toWalletList: [],

        MoneyCount: cc.Label,
        bg: cc.Sprite,
        _roundOverDataList: [],
        _playToPosComplete: cc.callFunc,
        _playToWalletComplete: cc.callFunc,
        _curJettonsWidth: 0
    },

    // use this for initialization
    onLoad: function onLoad() {
        var self = this;
        this._playToPosComplete = cc.callFunc(function (_item) {
            var idx = self._jettonList.indexOf(_item);
            if (idx >= 0) self._jettonList.splice(idx, 1);
            self.node.removeChild(_item);
            self._jettonPool.push(_item);
        }, this);

        this._playToWalletComplete = cc.callFunc(function (_item) {
            var idx = self._toWalletList.indexOf(_item);
            if (idx >= 0) self._toWalletList.splice(idx, 1);
            self.node.removeChild(_item);
            self._jettonPool.push(_item);
            if (self._toWalletList.length > 0) {
                self.updateToWalletPos(self._toWalletList[self._toWalletList.length - 1].getPosition());
            }
        }, this);
    },

    SetJettonNum: function SetJettonNum(JettonCount, _isPlay) {
        if (JettonCount <= 0) return;

        this.resetData();

        var imgList = this.convertJetton(JettonCount);

        var offsetX;
        var oneW = 0;
        var cloneObj = null;
        var nTotalNum = imgList.length;
        // console.log(":::SetJettonNum::JettonCount:",JettonCount);
        for (var k = 0; k < nTotalNum; k++) {
            // console.log("::imgList[j]:11111111:",imgList[k]);
            cloneObj = this.createJetton("Textures/Icon/" + imgList[k], true);
            offsetX = Math.floor(k / oneColCount) * cloneObj.width;
            var posY = k % oneColCount * oneHeight;
            // console.log("::posY::",posY);
            cloneObj.setPosition(cc.p(-1 * offsetX, posY));
            if (_isPlay) {
                cloneObj.opacity = 0;
            } else {
                cloneObj.opacity = 255;
            }
            oneW = cloneObj.width;
        }

        this.updateLabelContent(JettonCount);

        this._curJettonsWidth = (Math.floor(nTotalNum / oneColCount) + 1) * cloneObj.width;
    },

    hideLabel: function hideLabel() {
        this.MoneyCount.node.active = false;
        this.bg.node.active = false;
    },

    getInterval: function getInterval() {
        return this._curJettonsWidth;
    },

    createJetton: function createJetton(_img, _addList) {
        // console.log(":::_img:::",_img);
        var result;
        if (this._jettonPool.length > 0) {
            result = this._jettonPool.pop();
        } else {
            result = UITools.onCloneInstantiate(this.JettonItem, this.node, cc.p(0, 0));
        }
        if (result.parent == null) this.node.addChild(result);
        result.setPosition(0, 0);
        UITools.SetSpriteImg(result.getComponent("cc.Sprite"), _img);
        if (_addList == true) this._jettonList.push(result);

        return result;
    },

    convertJetton: function convertJetton(_count) {
        var remainJettons = _count;
        var imgList = [];
        for (var i = 0; i < baseJetton.length; ++i) {
            var count = Math.floor(remainJettons / baseJetton[i]);
            if (count > 0) {
                for (var j = 0; j < count; j++) {
                    imgList.push(imgJetton[i]);
                }
                remainJettons -= count * baseJetton[i];
            }
            if (remainJettons <= 0) break;
        }

        return imgList;
    },

    playUpdatePool: function playUpdatePool() {
        var jettonItem;
        var offsetX;
        var speed = 0.5 / this._jettonList.length;
        speed = speed > 0.2 ? 0.2 : speed;
        for (var i = 0; i < this._jettonList.length; i++) {
            jettonItem = this._jettonList[i];
            offsetX = Math.floor(i / oneColCount) * jettonItem.width;
            jettonItem.getComponent("JettonItem").playAniUpdatePool(i * .01, .2);
        }
    },

    playToPool: function playToPool() {
        var jettonItem;
        var offsetX;
        var speed = 0.5 / this._jettonList.length;
        speed = speed > 0.2 ? 0.2 : speed;
        for (var i = 0; i < this._jettonList.length; i++) {
            jettonItem = this._jettonList[i];
            offsetX = Math.floor(i / oneColCount) * jettonItem.width;
            jettonItem.getComponent("JettonItem").playAniToOverlap(cc.p(-1 * offsetX, i % oneColCount * 3), i * .01, .2);
        }
    },

    addConvertList: function addConvertList(_count, _tarPos) {
        var curData = {};
        curData.imgList = this.convertJetton(_count);
        curData.targetPos = _tarPos;
        this._roundOverDataList.push(curData);
    },

    playConvertToWallet: function playConvertToWallet() {
        this.hideLabel();

        var startPos = cc.p(0, 0);
        if (this._jettonList.length > 0) startPos = this._jettonList[0].getPosition();

        this._toWalletList = [];
        var curConvertData;
        var imgList;
        var jettonObj;
        var speed = 0.5 / this._roundOverDataList.length;
        speed = speed > 0.2 ? 0.2 : speed;
        for (var i = 0; i < this._roundOverDataList.length; i++) {
            curConvertData = this._roundOverDataList[i];
            imgList = curConvertData.imgList;
            for (var j = 0; j < imgList.length; j++) {
                jettonObj = this.createJetton("Textures/Icon/" + imgList[j], false);
                jettonObj.setPosition(startPos);
                jettonObj.opacity = 0;
                this._toWalletList.push(jettonObj);
                jettonObj.getComponent("JettonItem").playAniToWallet(curConvertData.targetPos, j * .01, .2, this._playToWalletComplete);
            }
        }

        //fadeOut the jettons
        var jettonItem;
        this._jettonList.reverse();
        speed = 0.5 / this._jettonList.length;
        speed = speed > 0.2 ? 0.2 : speed;
        for (var i = 0; i < this._jettonList.length; i++) {
            jettonItem = this._jettonList[i];
            jettonItem.getComponent("JettonItem").playAniToFadeOut(i * .01, .2, this._playToPosComplete);
        }
    },

    updateToWalletPos: function updateToWalletPos(_pos) {
        var jettonItem;
        for (var i = 0; i < this._toWalletList.length; i++) {
            jettonItem = this._toWalletList[i];
            jettonItem.setPosition(_pos);
        }
    },

    getLabelWidth: function getLabelWidth() {
        return this.bg.node.width;
    },

    getTotalWidth: function getTotalWidth() {
        return this.bg.node.width + this._curJettonsWidth;
    },

    updateLabelContent: function updateLabelContent(JettonCount) {
        UITools.onSetUILabelString(this.MoneyCount, UITools.onNumTransfer(JettonCount));
        this.bg.node.width = oneJettonWidth + this.MoneyCount.node.width + 10;
        this.MoneyCount.node.setPosition(oneJettonWidth, 0);
    },

    resetData: function resetData() {
        var curJettonItem;
        while (this._jettonList.length) {
            curJettonItem = this._jettonList.pop();
            curJettonItem.stopAllActions();
            this._jettonPool.push(curJettonItem);
            this.node.removeChild(curJettonItem);
        }
        this.node.stopAllActions();
    }
});

cc._RF.pop();
},{"Config":"Config","UITools":"UITools"}],"MusicManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, '7b4cbK938xMCJOpqIAx31gl', 'MusicManager');
// Scripts/Manager/MusicManager.js

"use strict";

/*
    zjh
 */
var UITools = require("UITools");
var Config = require('Config');

var MusicManager = cc.Class({
    extends: cc.Component,

    properties: {},

    // use this for initialization
    onLoad: function onLoad() {},
    onInit: function onInit(music) {
        //0,玩家操作条播放到一半的时候播放的声音
        this.curMusic = music;
        // //console.log("NetWorkManager.onInit")
    },
    //播放提示音
    playHintMusic: function playHintMusic() {
        var audioUrl = this.curMusic[0];
        if (audioUrl) {
            this._playSFX(audioUrl, true);
        }
    },

    // 播放按钮声音
    PlayClickSound: function PlayClickSound() {
        var audioUrl = this.getUrl("dianji");
        this._playSFX(audioUrl, true);
    },
    //返回、关闭
    PlayCloseSound: function PlayCloseSound() {
        var audioUrl = this.getUrl("fanhui");
        this._playSFX(audioUrl, true);
    },

    //播放错误声音-
    playErrorSound: function playErrorSound() {
        var audioUrl = this.getUrl("cuowu");
        this._playSFX(audioUrl, true);
    },

    //播放错误声音-
    playRightSound: function playRightSound() {
        var audioUrl = this.getUrl("zhengque");
        this._playSFX(audioUrl, true);
    },

    getUrl: function getUrl(url) {
        return cc.url.raw("resources/Sound/" + url + ".mp3");
    },

    // 而音效则可以同时播放多个。播放背景音乐.mp3
    // 播放背景音乐
    playBackMusic: function playBackMusic() {
        if (Global.gameManager.onGetGameState() == Config.GameStateType.GAME_PLAY_CARDS_STATE) return;
        //if(1 == Global.playerInfo.bgSound){
        if (1 == UITools.GameLocalStorage.get("bgSound")) {
            var audioUrl = this.getUrl("login");
            // console.log(audioUrl);
            this.onStopMusic();
            this.bgMusicID = cc.audioEngine.play(audioUrl, true);
        }
    },
    // 通过名字播放音效
    PlayNameSound: function PlayNameSound(url) {
        var isPlay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var audioUrl = this.getUrl(url);
        this._playSFX(audioUrl, isPlay);
    },

    // 播放音效
    _playSFX: function _playSFX(url, isPlay) {
        //if(1 == Global.playerInfo.actSound && true == isPlay && Global.isRuningInBackGround == false){
        if (1 == UITools.GameLocalStorage.get("actSound") && true == isPlay && Global.isRuningInBackGround == false) {
            if (UITools.IsRealObj(url)) {
                cc.audioEngine.play(url, false);
            }
        }
    },
    // 停止背景音乐的播放
    onStopMusic: function onStopMusic() {
        if (this.bgMusicID >= 0) {
            cc.audioEngine.stop(this.bgMusicID);
        }
    },

    // 暂停所有音乐
    pauseAll: function pauseAll() {
        cc.audioEngine.pauseAll();
    },
    // 恢复所有音效
    resumeAll: function resumeAll() {
        cc.audioEngine.resumeAll();
    }

});

cc._RF.pop();
},{"Config":"Config","UITools":"UITools"}],"Name":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'bc3cemJI19JiYDWi1k/a++0', 'Name');
// Scripts/GameData/config/Name.js

"use strict";

var data = [];
data["0"] = {
		cnfamily: "支",
		cnmale: "邑",
		cnfemale: "斌",
		enfamily: "阿博特",
		enmale: "艾比盖",
		enfemale: "埃达"
};
data["1"] = {
		cnfamily: "余",
		cnmale: "乾",
		cnfemale: "莹",
		enfamily: "阿贝",
		enmale: "爱得莱",
		enfemale: "爱得拉"
};
data["2"] = {
		cnfamily: "贲",
		cnmale: "绯",
		cnfemale: "妍",
		enfamily: "亚伯拉",
		enmale: "爱尔柏",
		enfemale: "阿芙拉"
};
data["3"] = {
		cnfamily: "赵",
		cnmale: "擎汉",
		cnfemale: "鸣凤",
		enfamily: "艾奇逊",
		enmale: "贝齐",
		enfemale: "阿加莎"
};
data["4"] = {
		cnfamily: "慕",
		cnmale: "豪英",
		cnfemale: "不二",
		enfamily: "阿克曼",
		enmale: "贝蒂",
		enfemale: "爱葛妮"
};
data["5"] = {
		cnfamily: "巫",
		cnmale: "剑愁",
		cnfemale: "茗",
		enfamily: "亚当",
		enmale: "比尤莱",
		enfemale: "亚莉克"
};
data["6"] = {
		cnfamily: "太叔",
		cnmale: "一笑",
		cnfemale: "颖",
		enfamily: "亚当斯",
		enmale: "布莱兹",
		enfemale: "艾丽斯"
};
data["7"] = {
		cnfamily: "方",
		cnmale: "逊",
		cnfemale: "嫣",
		enfamily: "艾迪生",
		enmale: "布伦达",
		enfemale: "爱玛"
};
data["8"] = {
		cnfamily: "诸",
		cnmale: "蹇",
		cnfemale: "无颜",
		enfamily: "阿狄森",
		enmale: "布里奇",
		enfemale: "奥尔瑟"
};
data["9"] = {
		cnfamily: "元",
		cnmale: "涔",
		cnfemale: "千愁",
		enfamily: "艾狄生",
		enmale: "布鲁克",
		enfemale: "阿尔娃"
};
data["10"] = {
		cnfamily: "邓",
		cnmale: "酬海",
		cnfemale: "摇伽",
		enfamily: "阿德拉",
		enmale: "西莱斯",
		enfemale: "阿蜜莉"
};
data["11"] = {
		cnfamily: "孙",
		cnmale: "成败",
		cnfemale: "敏",
		enfamily: "阿德莱",
		enmale: "夏洛特",
		enfemale: "艾咪"
};
data["12"] = {
		cnfamily: "萧",
		cnmale: "冥幽",
		cnfemale: "盈",
		enfamily: "阿道夫",
		enmale: "谢里尔",
		enfemale: "阿娜丝"
};
data["13"] = {
		cnfamily: "乔",
		cnmale: "天问",
		cnfemale: "芫",
		enfamily: "阿格尼",
		enmale: "克里斯",
		enfemale: "安德烈"
};
data["14"] = {
		cnfamily: "尉迟",
		cnmale: "紊",
		cnfemale: "莫言",
		enfamily: "艾伯特",
		enmale: "克莱儿",
		enfemale: "安妮"
};
data["15"] = {
		cnfamily: "柳",
		cnmale: "剑",
		cnfemale: "稚晴",
		enfamily: "奥尔科",
		enmale: "克莱拉",
		enfemale: "安娜"
};
data["16"] = {
		cnfamily: "朱",
		cnmale: "臻",
		cnfemale: "菲鹰",
		enfamily: "奥尔丁",
		enmale: "潼恩",
		enfemale: "安纳贝"
};
data["17"] = {
		cnfamily: "卜",
		cnmale: "复天",
		cnfemale: "莆",
		enfamily: "奥尔德",
		enmale: "德博拉",
		enfemale: "安东妮"
};
data["18"] = {
		cnfamily: "单",
		cnmale: "忘幽",
		cnfemale: "樱",
		enfamily: "亚历克",
		enmale: "多洛雷",
		enfemale: "艾谱莉"
};
data["19"] = {
		cnfamily: "李",
		cnmale: "士萧",
		cnfemale: "凤",
		enfamily: "亚历山",
		enmale: "多明尼",
		enfemale: "爱勒贝"
};
data["20"] = {
		cnfamily: "姚",
		cnmale: "山河",
		cnfemale: "无色",
		enfamily: "阿尔弗",
		enmale: "多拉",
		enfemale: "艾琳娜"
};
data["21"] = {
		cnfamily: "燕",
		cnmale: "凡",
		cnfemale: "英姑",
		enfamily: "艾尔弗",
		enmale: "桃乐斯",
		enfemale: "艾丝翠"
};
data["22"] = {
		cnfamily: "东方",
		cnmale: "鞯",
		cnfemale: "冰颜",
		enfamily: "艾丽丝",
		enmale: "伊甸",
		enfemale: "亚特兰"
};
data["23"] = {
		cnfamily: "叶",
		cnmale: "珩",
		cnfemale: "姝",
		enfamily: "阿丽丝",
		enmale: "伊迪丝",
		enfemale: "阿西娜"
};
data["24"] = {
		cnfamily: "尤",
		cnmale: "严青",
		cnfemale: "荧",
		enfamily: "阿利克",
		enmale: "伊莲恩",
		enfemale: "奥德丽"
};
data["25"] = {
		cnfamily: "顾",
		cnmale: "成危",
		cnfemale: "珠",
		enfamily: "艾尔索",
		enmale: "艾琳诺",
		enfemale: "奥劳拉"
};
data["26"] = {
		cnfamily: "杭",
		cnmale: "中道",
		cnfemale: "亚男",
		enfamily: "阿利",
		enmale: "艾伦",
		enfemale: "芭芭拉"
};
data["27"] = {
		cnfamily: "周",
		cnmale: "仇天",
		cnfemale: "若颜",
		enfamily: "阿米利",
		enmale: "艾尔玛",
		enfemale: "碧翠丝"
};
data["28"] = {
		cnfamily: "邵",
		cnmale: "嵩",
		cnfemale: "无心",
		enfamily: "安德森",
		enmale: "艾西",
		enfemale: "贝琳达"
};
data["29"] = {
		cnfamily: "牧",
		cnmale: "达",
		cnfemale: "涟妖",
		enfamily: "安德鲁",
		enmale: "埃尔韦",
		enfemale: "贝拉"
};
data["30"] = {
		cnfamily: "诸葛",
		cnmale: "鹤",
		cnfemale: "彤",
		enfamily: "安",
		enmale: "费滋",
		enfemale: "柏妮丝"
};
data["31"] = {
		cnfamily: "唐",
		cnmale: "不斜",
		cnfemale: "萤",
		enfamily: "安娜",
		enmale: "弗朗西",
		enfemale: "柏莎"
};
data["32"] = {
		cnfamily: "许",
		cnmale: "成风",
		cnfemale: "洙",
		enfamily: "安妮",
		enmale: "弗莉达",
		enfemale: "百丽儿"
};
data["33"] = {
		cnfamily: "穆",
		cnmale: "道天",
		cnfemale: "素素",
		enfamily: "安东尼",
		enmale: "菲蕾德",
		enfemale: "贝丝"
};
data["34"] = {
		cnfamily: "洪",
		cnmale: "一斩",
		cnfemale: "飞飞",
		enfamily: "安托瓦",
		enmale: "盖尔",
		enfemale: "贝芙"
};
data["35"] = {
		cnfamily: "郑",
		cnmale: "豪",
		cnfemale: "藏鸟",
		enfamily: "安东尼",
		enmale: "乔治亚",
		enfemale: "布兰琪"
};
data["36"] = {
		cnfamily: "狄",
		cnmale: "烙",
		cnfemale: "虔纹",
		enfamily: "阿拉贝",
		enmale: "杰拉尔",
		enfemale: "卡米拉"
};
data["37"] = {
		cnfamily: "侯",
		cnmale: "鞅",
		cnfemale: "桐",
		enfamily: "阿奇博",
		enmale: "吉榭尔",
		enfemale: "坎蒂丝"
};
data["38"] = {
		cnfamily: "夏侯",
		cnmale: "不可",
		cnfemale: "莺",
		enfamily: "阿姆斯",
		enmale: "葛罗瑞",
		enfemale: "卡拉"
};
data["39"] = {
		cnfamily: "吕",
		cnmale: "成仁",
		cnfemale: "竺",
		enfamily: "阿诺德",
		enmale: "格拉迪",
		enfemale: "卡萝"
};
data["40"] = {
		cnfamily: "尹",
		cnmale: "道消",
		cnfemale: "若男",
		enfamily: "阿瑟",
		enmale: "葛莉谢",
		enfemale: "卡罗琳"
};
data["41"] = {
		cnfamily: "包",
		cnmale: "不二",
		cnfemale: "妙芹",
		enfamily: "阿特利",
		enmale: "葛佳丝",
		enfemale: "凯瑟琳"
};
data["42"] = {
		cnfamily: "王",
		cnmale: "裘",
		cnfemale: "若冰",
		enfamily: "奥古斯",
		enmale: "汉纳",
		enfemale: "凯丝"
};
data["43"] = {
		cnfamily: "宋",
		cnmale: "冥",
		cnfemale: "若魔",
		enfamily: "奥古斯",
		enmale: "海柔尔",
		enfemale: "塞西莉"
};
data["44"] = {
		cnfamily: "秋",
		cnmale: "霸",
		cnfemale: "芝",
		enfamily: "奥斯汀",
		enmale: "赫瑟尔",
		enfemale: "夏洛特"
};
data["45"] = {
		cnfamily: "欧阳",
		cnmale: "不正",
		cnfemale: "瑛",
		enfamily: "奥斯汀",
		enmale: "赫达",
		enfemale: "绮莉"
};
data["46"] = {
		cnfamily: "曹",
		cnmale: "无施",
		cnfemale: "萝",
		enfamily: "白壁德",
		enmale: "海伦",
		enfemale: "克洛怡"
};
data["47"] = {
		cnfamily: "堪",
		cnmale: "道罡",
		cnfemale: "灭男",
		enfamily: "巴比",
		enmale: "海洛伊",
		enfemale: "克莱儿"
};
data["48"] = {
		cnfamily: "诸",
		cnmale: "无剑",
		cnfemale: "珊珊",
		enfamily: "巴比特",
		enmale: "胡尔达",
		enfemale: "克莱拉"
};
data["49"] = {
		cnfamily: "冯",
		cnmale: "匪",
		cnfemale: "嫣娆",
		enfamily: "巴赫",
		enmale: "埃达",
		enfemale: "克莱曼"
};
data["50"] = {
		cnfamily: "庞",
		cnmale: "惮",
		cnfemale: "绾绾",
		enfamily: "培根",
		enmale: "艾尔玛",
		enfemale: "康斯坦"
};
data["51"] = {
		cnfamily: "仲",
		cnmale: "寇",
		cnfemale: "芷",
		enfamily: "鲍德温",
		enmale: "伊莎蓓",
		enfemale: "科拉"
};
data["52"] = {
		cnfamily: "皇甫",
		cnmale: "无声",
		cnfemale: "璎",
		enfamily: "巴纳德",
		enmale: "杰奎琳",
		enfemale: "卡洛儿"
};
data["53"] = {
		cnfamily: "严",
		cnmale: "不斜",
		cnfemale: "翠",
		enfamily: "巴尼",
		enmale: "乔",
		enfemale: "可妮莉"
};
data["54"] = {
		cnfamily: "汪",
		cnmale: "不凡",
		cnfemale: "高丽",
		enfamily: "巴雷特",
		enmale: "琼",
		enfemale: "黛西"
};
data["55"] = {
		cnfamily: "左",
		cnmale: "断天",
		cnfemale: "如雪",
		enfamily: "巴雷特",
		enmale: "希伯来",
		enfemale: "黛儿"
};
data["56"] = {
		cnfamily: "陈",
		cnmale: "戾",
		cnfemale: "唯雪",
		enfamily: "巴里",
		enmale: "乔伊",
		enfemale: "黛娜"
};
data["57"] = {
		cnfamily: "叶",
		cnmale: "雍",
		cnfemale: "艳血",
		enfamily: "巴特",
		enmale: "乔伊斯",
		enfemale: "黛芙妮"
};
data["58"] = {
		cnfamily: "宫",
		cnmale: "博",
		cnfemale: "姿",
		enfamily: "巴塞洛",
		enmale: "朱恩",
		enfemale: "达莲娜"
};
data["59"] = {
		cnfamily: "上官",
		cnmale: "百招",
		cnfemale: "芙",
		enfamily: "巴特利",
		enmale: "卡玛",
		enfemale: "潼恩"
};
data["60"] = {
		cnfamily: "华",
		cnmale: "靖仇",
		cnfemale: "萃",
		enfamily: "巴顿",
		enmale: "凯伦",
		enfemale: "黛碧"
};
data["61"] = {
		cnfamily: "祁",
		cnmale: "不尤",
		cnfemale: "妖丽",
		enfamily: "拜耳",
		enmale: "凯伊",
		enfemale: "迪得莉"
};
data["62"] = {
		cnfamily: "石",
		cnmale: "远侵",
		cnfemale: "雪一",
		enfamily: "鲍尔",
		enmale: "金百莉",
		enfemale: "迪丽雅"
};
data["63"] = {
		cnfamily: "卫",
		cnmale: "瑛",
		cnfemale: "菲音",
		enfamily: "蒲福",
		enmale: "吉蒂",
		enfemale: "丹尼丝"
};
data["64"] = {
		cnfamily: "阮",
		cnmale: "鑫",
		cnfemale: "绝音",
		enfamily: "比尔德",
		enmale: "克里斯",
		enfemale: "黛安娜"
};
data["65"] = {
		cnfamily: "宁",
		cnmale: "匕",
		cnfemale: "茈",
		enfamily: "博福特",
		enmale: "罗瑞尔",
		enfemale: "黛娜"
};
data["66"] = {
		cnfamily: "司马",
		cnmale: "千万",
		cnfemale: "芾",
		enfamily: "比彻",
		enmale: "罗伦",
		enfemale: "唐娜"
};
data["67"] = {
		cnfamily: "陶",
		cnmale: "若风",
		cnfemale: "柔",
		enfamily: "贝克",
		enmale: "李",
		enfemale: "多拉"
};
data["68"] = {
		cnfamily: "禹",
		cnmale: "千筹",
		cnfemale: "三颜",
		enfamily: "贝基",
		enmale: "盖尔",
		enfemale: "多琳"
};
data["69"] = {
		cnfamily: "崔",
		cnmale: "一刀",
		cnfemale: "茗茗",
		enfamily: "比尔博",
		enmale: "林赛",
		enfemale: "多莉丝"
};
data["70"] = {
		cnfamily: "蒋",
		cnmale: "铭",
		cnfemale: "如冰",
		enfamily: "贝尔",
		enmale: "洛兰",
		enfemale: "桃乐斯"
};
data["71"] = {
		cnfamily: "郦",
		cnmale: "靖",
		cnfemale: "血茗",
		enfamily: "贝拉米",
		enmale: "璐易丝",
		enfemale: "尔莎"
};
data["72"] = {
		cnfamily: "仇",
		cnmale: "弼",
		cnfemale: "涫",
		enfamily: "贝尔",
		enmale: "莉迪亚",
		enfemale: "伊甸"
};
data["73"] = {
		cnfamily: "司空",
		cnmale: "随阴",
		cnfemale: "湘",
		enfamily: "贝洛克",
		enmale: "玛佩尔",
		enfemale: "伊迪丝"
};
data["74"] = {
		cnfamily: "姜",
		cnmale: "若剑",
		cnfemale: "沁",
		enfamily: "本",
		enmale: "玛德琳",
		enfemale: "艾德文"
};
data["75"] = {
		cnfamily: "屈",
		cnmale: "断秋",
		cnfemale: "代男",
		enfamily: "本尼迪",
		enmale: "穆得",
		enfemale: "艾琳"
};
data["76"] = {
		cnfamily: "吉",
		cnmale: "碧空",
		cnfemale: "荧荧",
		enfamily: "本杰明",
		enmale: "塞尔特",
		enfemale: "艾琳诺"
};
data["77"] = {
		cnfamily: "沈",
		cnmale: "霆",
		cnfemale: "如娆",
		enfamily: "贝内特",
		enmale: "麦格",
		enfemale: "伊丽莎"
};
data["78"] = {
		cnfamily: "童",
		cnmale: "紊",
		cnfemale: "凤妖",
		enfamily: "本森",
		enmale: "梅根",
		enfemale: "埃拉"
};
data["79"] = {
		cnfamily: "祖",
		cnmale: "碧",
		cnfemale: "秀",
		enfamily: "本瑟姆",
		enmale: "玛希",
		enfemale: "艾尔玛"
};
data["80"] = {
		cnfamily: "鲜于",
		cnmale: "一手",
		cnfemale: "襄",
		enfamily: "伯克利",
		enmale: "玛莉提",
		enfemale: "爱尔莎"
};
data["81"] = {
		cnfamily: "柏",
		cnmale: "若之",
		cnfemale: "芹",
		enfamily: "边沁",
		enmale: "纳塔利",
		enfemale: "艾西"
};
data["82"] = {
		cnfamily: "项",
		cnmale: "断缘",
		cnfemale: "踏歌",
		enfamily: "贝克莱",
		enmale: "诺玛",
		enfemale: "艾娃"
};
data["83"] = {
		cnfamily: "钮",
		cnmale: "仇血",
		cnfemale: "赛凤",
		enfamily: "伯纳尔",
		enmale: "诺维雅",
		enfemale: "埃米莉"
};
data["84"] = {
		cnfamily: "韩",
		cnmale: "驳",
		cnfemale: "如音",
		enfamily: "伯纳德",
		enmale: "奥蒂列",
		enfemale: "埃玛"
};
data["85"] = {
		cnfamily: "颜",
		cnmale: "钧",
		cnfemale: "若血",
		enfamily: "伯纳尔",
		enmale: "欧尔佳",
		enfemale: "艾丽卡"
};
data["86"] = {
		cnfamily: "武",
		cnmale: "捕",
		cnfemale: "蓉",
		enfamily: "伯特",
		enmale: "普鲁登",
		enfemale: "艾丝特"
};
data["87"] = {
		cnfamily: "长孙",
		cnmale: "三毒",
		cnfemale: "香",
		enfamily: "伯莎",
		enmale: "普莉斯",
		enfemale: "尤多拉"
};
data["88"] = {
		cnfamily: "章",
		cnmale: "亿先",
		cnfemale: "衫",
		enfamily: "伯蒂",
		enmale: "波比",
		enfemale: "尤妮斯"
};
data["89"] = {
		cnfamily: "董",
		cnmale: "道之",
		cnfemale: "芙蓉",
		enfamily: "伯特伦",
		enmale: "罗伯塔",
		enfemale: "伊文捷"
};
data["90"] = {
		cnfamily: "龚",
		cnmale: "万声",
		cnfemale: "柏柳",
		enfamily: "贝色麦",
		enmale: "罗克珊",
		enfemale: "伊芙"
};
data["91"] = {
		cnfamily: "杨",
		cnmale: "疾",
		cnfemale: "一曲",
		enfamily: "贝丝",
		enmale: "鲁思",
		enfemale: "伊夫林"
};
data["92"] = {
		cnfamily: "白",
		cnmale: "隶",
		cnfemale: "雪冥",
		enfamily: "贝西墨",
		enmale: "丝柏凌",
		enfemale: "梵妮"
};
data["93"] = {
		cnfamily: "轩辕",
		cnmale: "败",
		cnfemale: "青",
		enfamily: "贝西",
		enmale: "斯泰西",
		enfemale: "费怡"
};
data["94"] = {
		cnfamily: "潘",
		cnmale: "三德",
		cnfemale: "玲",
		enfamily: "比顿",
		enmale: "丝特勒",
		enfemale: "弗罗拉"
};
data["95"] = {
		cnfamily: "粱",
		cnmale: "人达",
		cnfemale: "珊",
		enfamily: "白求恩",
		enmale: "托比",
		enfemale: "弗罗伦"
};
data["96"] = {
		cnfamily: "程",
		cnmale: "剑心",
		cnfemale: "雁开",
		enfamily: "贝齐",
		enmale: "厄休拉",
		enfemale: "弗莉达"
};
data["97"] = {
		cnfamily: "秦",
		cnmale: "万天",
		cnfemale: "艳一",
		enfamily: "贝蒂",
		enmale: "维隆卡",
		enfemale: "菲蕾德"
};
data["98"] = {
		cnfamily: "韶",
		cnmale: "威",
		cnfemale: "灵煌",
		enfamily: "比尔",
		enmale: "维多利",
		enfemale: "嘉比里"
};
data["99"] = {
		cnfamily: "闾丘",
		cnmale: "沅",
		cnfemale: "冰姬",
		enfamily: "比利",
		enmale: "维基",
		enfemale: "姬玛"
};
data["100"] = {
		cnfamily: "彭",
		cnmale: "悲",
		cnfemale: "卿",
		enfamily: "比勒尔",
		enmale: "维文",
		enfemale: "珍妮芙"
};
data["101"] = {
		cnfamily: "罗",
		cnmale: "一德",
		cnfemale: "灵",
		enfamily: "布莱克",
		enmale: "威尼弗",
		enfemale: "姬儿"
};
data["102"] = {
		cnfamily: "荣",
		cnmale: "人英",
		cnfemale: "琳",
		enfamily: "布莱克",
		enmale: "桑席",
		enfemale: "格拉迪"
};
data["103"] = {
		cnfamily: "何",
		cnmale: "剑成",
		cnfemale: "东蒽",
		enfamily: "布卢默",
		enmale: "耶达",
		enfemale: "葛瑞丝"
};
data["104"] = {
		cnfamily: "郜",
		cnmale: "送终",
		cnfemale: "宝川",
		enfamily: "布洛姆",
		enmale: "依耶芙",
		enfemale: "葛莉谢"
};
data["105"] = {
		cnfamily: "东郭",
		cnmale: "祥",
		cnfemale: "宫苴",
		enfamily: "布龙菲",
		enmale: "",
		enfemale: "葛佳丝"
};
data["106"] = {
		cnfamily: "昌",
		cnmale: "翎",
		cnfemale: "绝音",
		enfamily: "布卢尔",
		enmale: "",
		enfemale: "关德琳"
};
data["107"] = {
		cnfamily: "席",
		cnmale: "羿",
		cnfemale: "清",
		enfamily: "布劳",
		enmale: "",
		enfemale: "汉纳"
};
data["108"] = {
		cnfamily: "荀",
		cnmale: "老九",
		cnfemale: "绫",
		enfamily: "布卢姆",
		enmale: "",
		enfemale: "哈莉特"
};
data["109"] = {
		cnfamily: "施",
		cnmale: "人杰",
		cnfemale: "莛",
		enfamily: "鲍勃",
		enmale: "",
		enfemale: "赫瑟尔"
};
data["110"] = {
		cnfamily: "蔺",
		cnmale: "剑封",
		cnfemale: "沉鱼",
		enfamily: "博比",
		enmale: "",
		enfemale: "赫蒂"
};
data["111"] = {
		cnfamily: "令狐",
		cnmale: "绝山",
		cnfemale: "宝莹",
		enfamily: "博斯韦",
		enmale: "",
		enfemale: "海伦"
};
data["112"] = {
		cnfamily: "马",
		cnmale: "誉",
		cnfemale: "涔雨",
		enfamily: "鲍恩",
		enmale: "",
		enfemale: "海洛伊"
};
data["113"] = {
		cnfamily: "阎",
		cnmale: "戎",
		cnfemale: "邪欢",
		enfamily: "波义耳",
		enmale: "",
		enfemale: "希尔达"
};
data["114"] = {
		cnfamily: "羊",
		cnmale: "储",
		cnfemale: "惠",
		enfamily: "鲍曼",
		enmale: "",
		enfemale: "希拉瑞"
};
data["115"] = {
		cnfamily: "孔",
		cnmale: "老五",
		cnfemale: "翎",
		enfamily: "波伊尔",
		enmale: "",
		enfemale: "汉妮"
};
data["116"] = {
		cnfamily: "徐",
		cnmale: "人雄",
		cnfemale: "葶",
		enfamily: "布拉德",
		enmale: "",
		enfemale: "埃达"
};
data["117"] = {
		cnfamily: "淳于",
		cnmale: "万言",
		cnfemale: "落雁",
		enfamily: "布雷",
		enmale: "",
		enfemale: "艾娜"
};
data["118"] = {
		cnfamily: "酆",
		cnmale: "绝义",
		cnfemale: "不弱",
		enfamily: "布鲁斯",
		enmale: "",
		enfemale: "英格丽"
};
data["119"] = {
		cnfamily: "贾",
		cnmale: "枫",
		cnfemale: "太君",
		enfamily: "布里奇",
		enmale: "",
		enfemale: "艾琳"
};
data["120"] = {
		cnfamily: "於",
		cnmale: "擎",
		cnfemale: "老姆",
		enfamily: "布赖特",
		enmale: "",
		enfemale: "爱莉丝"
};
data["121"] = {
		cnfamily: "魏",
		cnmale: "靳",
		cnfemale: "荟",
		enfamily: "布罗德",
		enmale: "",
		enfemale: "艾尔玛"
};
data["122"] = {
		cnfamily: "邱",
		cnmale: "老四",
		cnfemale: "丝",
		enfamily: "白朗蒂",
		enmale: "",
		enfemale: "伊莎蓓"
};
data["123"] = {
		cnfamily: "南宫",
		cnmale: "元龙",
		cnfemale: "芮",
		enfamily: "勃朗特",
		enmale: "",
		enfemale: "艾薇"
};
data["124"] = {
		cnfamily: "鲍",
		cnmale: "绝悟",
		cnfemale: "凡英",
		enfamily: "布鲁克",
		enmale: "",
		enfemale: "杰奎琳"
};
data["125"] = {
		cnfamily: "江",
		cnmale: "沧海",
		cnfemale: "不惜",
		enfamily: "布朗",
		enmale: "",
		enfemale: "婕咪"
};
data["126"] = {
		cnfamily: "惠",
		cnmale: "凛",
		cnfemale: "莫茗",
		enfamily: "布朗",
		enmale: "",
		enfemale: "珍"
};
data["127"] = {
		cnfamily: "戚",
		cnmale: "荆",
		cnfemale: "黎云",
		enfamily: "布朗宁",
		enmale: "",
		enfemale: "珍妮特"
};
data["128"] = {
		cnfamily: "闵",
		cnmale: "汲",
		cnfemale: "筝",
		enfamily: "勃朗宁",
		enmale: "",
		enfemale: "珍尼丝"
};
data["129"] = {
		cnfamily: "百里",
		cnmale: "十三",
		cnfemale: "姒",
		enfamily: "布鲁斯",
		enmale: "",
		enfemale: "琴"
};
data["130"] = {
		cnfamily: "岑",
		cnmale: "成威",
		cnfemale: "赛君",
		enfamily: "布鲁诺",
		enmale: "",
		enfemale: "姬儿"
};
data["131"] = {
		cnfamily: "黎",
		cnmale: "绝施",
		cnfemale: "可仁",
		enfamily: "布赖恩",
		enmale: "",
		enfemale: "乔"
};
data["132"] = {
		cnfamily: "甄",
		cnmale: "万仇",
		cnfemale: "莫英",
		enfamily: "布赖斯",
		enmale: "",
		enfemale: "琼"
};
data["133"] = {
		cnfamily: "谢",
		cnmale: "涛",
		cnfemale: "凤凰",
		enfamily: "巴克",
		enmale: "",
		enfemale: "乔安娜"
};
data["134"] = {
		cnfamily: "樊",
		cnmale: "丑",
		cnfemale: "真",
		enfamily: "巴克耳",
		enmale: "",
		enfemale: "希伯来"
};
data["135"] = {
		cnfamily: "单于",
		cnmale: "邴",
		cnfemale: "苠",
		enfamily: "布尔沃",
		enmale: "",
		enfemale: "贾思琳"
};
data["136"] = {
		cnfamily: "雷",
		cnmale: "如豹",
		cnfemale: "闭月",
		enfamily: "布尔韦",
		enmale: "",
		enfemale: "乔蒂"
};
data["137"] = {
		cnfamily: "鄂",
		cnmale: "成协",
		cnfemale: "可兰",
		enfamily: "布尼安",
		enmale: "",
		enfemale: "约瑟芬"
};
data["138"] = {
		cnfamily: "魏",
		cnmale: "乘风",
		cnfemale: "朝雪",
		enfamily: "伯克",
		enmale: "",
		enfemale: "朱蒂斯"
};
data["139"] = {
		cnfamily: "邹",
		cnmale: "万怨",
		cnfemale: "一寡",
		enfamily: "琼斯",
		enmale: "",
		enfemale: "朱蒂"
};
data["140"] = {
		cnfamily: "温",
		cnmale: "卿",
		cnfemale: "贞",
		enfamily: "伯恩",
		enmale: "",
		enfemale: "朱莉娅"
};
data["141"] = {
		cnfamily: "宇文",
		cnmale: "坤",
		cnfemale: "绮",
		enfamily: "伯恩斯",
		enmale: "",
		enfemale: "朱莉"
};
data["142"] = {
		cnfamily: "汤",
		cnmale: "糜",
		cnfemale: "羞花",
		enfamily: "彭斯",
		enmale: "",
		enfemale: "朱丽叶"
};
data["143"] = {
		cnfamily: "夏",
		cnmale: "连虎",
		cnfemale: "可燕",
		enfamily: "巴特勒",
		enmale: "",
		enfemale: "朱恩"
};
data["144"] = {
		cnfamily: "家",
		cnmale: "不评",
		cnfemale: "老太",
		enfamily: "勃特勒",
		enmale: "",
		enfemale: "卡玛"
};
data["145"] = {
		cnfamily: "卓",
		cnmale: "乘云",
		cnfemale: "颜演",
		enfamily: "拜伦",
		enmale: "",
		enfemale: "凯伦"
};
data["146"] = {
		cnfamily: "凌",
		cnmale: "万恶",
		cnfemale: "珍",
		enfamily: "卡拉米",
		enmale: "",
		enfemale: "凯瑟琳"
};
data["147"] = {
		cnfamily: "赫连",
		cnmale: "豁",
		cnfemale: "淇",
		enfamily: "坎普",
		enmale: "",
		enfemale: "凯莉"
};
data["148"] = {
		cnfamily: "滕",
		cnmale: "耷",
		cnfemale: "不愁",
		enfamily: "凯雷",
		enmale: "",
		enfemale: "金百莉"
};
data["149"] = {
		cnfamily: "高",
		cnmale: "松",
		cnfemale: "可愁",
		enfamily: "凯里",
		enmale: "",
		enfemale: "吉蒂"
};
data["150"] = {
		cnfamily: "封",
		cnmale: "似狮",
		cnfemale: "茹嫣",
		enfamily: "卡尔",
		enmale: "",
		enfemale: "罗拉"
};
data["151"] = {
		cnfamily: "窦",
		cnmale: "老三",
		cnfemale: "幻然",
		enfamily: "卡莱尔",
		enmale: "",
		enfemale: "罗瑞尔"
};
data["152"] = {
		cnfamily: "霍",
		cnmale: "世开",
		cnfemale: "宛",
		enfamily: "卡门",
		enmale: "",
		enfemale: "罗伦"
};
data["153"] = {
		cnfamily: "乐正",
		cnmale: "恶天",
		cnfemale: "荠",
		enfamily: "卡内基",
		enmale: "",
		enfemale: "李"
};
data["154"] = {
		cnfamily: "聂",
		cnmale: "焱",
		cnfemale: "盛男",
		enfamily: "卡罗琳",
		enmale: "",
		enfemale: "莉娜"
};
data["155"] = {
		cnfamily: "蔡",
		cnmale: "磬",
		cnfemale: "可冥",
		enfamily: "卡彭特",
		enmale: "",
		enfemale: "利昂娜"
};
data["156"] = {
		cnfamily: "宓",
		cnmale: "井",
		cnfemale: "丹妗",
		enfamily: "查理",
		enmale: "",
		enfemale: "雷思丽"
};
data["157"] = {
		cnfamily: "翟",
		cnmale: "大楚",
		cnfemale: "幻悲",
		enfamily: "卡丽",
		enmale: "",
		enfemale: "列蒂西"
};
data["158"] = {
		cnfamily: "虞",
		cnmale: "广山",
		cnfemale: "娩",
		enfamily: "嘉利",
		enmale: "",
		enfemale: "李莉斯"
};
data["159"] = {
		cnfamily: "子车",
		cnmale: "剑鬼",
		cnfemale: "琦",
		enfamily: "卡罗尔",
		enmale: "",
		enfemale: "丽莲"
};
data["160"] = {
		cnfamily: "廉",
		cnmale: "灭龙",
		cnfemale: "青荷",
		enfamily: "卡特",
		enmale: "",
		enfemale: "莉萨"
};
data["161"] = {
		cnfamily: "田",
		cnmale: "虔",
		cnfemale: "梨愁",
		enfamily: "凯瑟琳",
		enmale: "",
		enfemale: "莉斯"
};
data["162"] = {
		cnfamily: "符",
		cnmale: "函",
		cnfemale: "缘郡",
		enfamily: "塞西利",
		enmale: "",
		enfemale: "洛兰"
};
data["163"] = {
		cnfamily: "苏",
		cnmale: "富",
		cnfemale: "幻雪",
		enfamily: "张伯伦",
		enmale: "",
		enfemale: "琳"
};
data["164"] = {
		cnfamily: "柯",
		cnmale: "定帮",
		cnfemale: "莞",
		enfamily: "卓别麟",
		enmale: "",
		enfemale: "玛佩尔"
};
data["165"] = {
		cnfamily: "慕容",
		cnmale: "不言",
		cnfemale: "衣",
		enfamily: "查普林",
		enmale: "",
		enfemale: "玛琪"
};
data["166"] = {
		cnfamily: "毕",
		cnmale: "远锋",
		cnfemale: "清涟",
		enfamily: "查普曼",
		enmale: "",
		enfemale: "玛吉"
};
data["167"] = {
		cnfamily: "万",
		cnmale: "剑身",
		cnfemale: "不悔",
		enfamily: "查尔斯",
		enmale: "",
		enfemale: "梅蜜"
};
data["168"] = {
		cnfamily: "刘",
		cnmale: "契",
		cnfemale: "冥茗",
		enfamily: "查利",
		enmale: "",
		enfemale: "曼蒂"
};
data["169"] = {
		cnfamily: "范",
		cnmale: "翰",
		cnfemale: "幻嫣",
		enfamily: "夏洛特",
		enmale: "",
		enfemale: "玛西亚"
};
data["170"] = {
		cnfamily: "莫",
		cnmale: "乌",
		cnfemale: "菀",
		enfamily: "夏洛蒂",
		enmale: "",
		enfemale: "玛丽安"
};
data["171"] = {
		cnfamily: "司徒",
		cnmale: "伟帮",
		cnfemale: "沂",
		enfamily: "查理",
		enmale: "",
		enfemale: "玛格丽"
};
data["172"] = {
		cnfamily: "郝",
		cnmale: "追命",
		cnfemale: "一兰",
		enfamily: "查尔斯",
		enmale: "",
		enfemale: "玛丽亚"
};
data["173"] = {
		cnfamily: "支",
		cnmale: "远望",
		cnfemale: "不乐",
		enfamily: "乔叟",
		enmale: "",
		enfemale: "马丽娜"
};
data["174"] = {
		cnfamily: "景",
		cnmale: "无敌",
		cnfemale: "溪灵",
		enfamily: "切斯特",
		enmale: "",
		enfemale: "玛乔丽"
};
data["175"] = {
		cnfamily: "鲁",
		cnmale: "罡",
		cnfemale: "葵阴",
		enfamily: "蔡尔德",
		enmale: "",
		enfemale: "马莎"
};
data["176"] = {
		cnfamily: "缪",
		cnmale: "遥",
		cnfemale: "素",
		enfamily: "蔡尔德",
		enmale: "",
		enfemale: "玛蒂娜"
};
data["177"] = {
		cnfamily: "阳佟",
		cnmale: "焦",
		cnfemale: "苡",
		enfamily: "克赖斯",
		enmale: "",
		enfemale: "玛丽"
};
data["178"] = {
		cnfamily: "史",
		cnmale: "大有",
		cnfemale: "如花",
		enfamily: "克里琴",
		enmale: "",
		enfemale: "穆琳"
};
data["179"] = {
		cnfamily: "咎",
		cnmale: "难敌",
		cnfemale: "起眸",
		enfamily: "克里斯",
		enmale: "",
		enfemale: "梅薇思"
};
data["180"] = {
		cnfamily: "詹",
		cnmale: "远山",
		cnfemale: "惋清",
		enfamily: "克里斯",
		enmale: "",
		enfemale: "玛可欣"
};
data["181"] = {
		cnfamily: "韦",
		cnmale: "半鬼",
		cnfemale: "灭绝",
		enfamily: "克里斯",
		enmale: "",
		enfemale: "梅"
};
data["182"] = {
		cnfamily: "宗",
		cnmale: "鸿",
		cnfemale: "愫",
		enfamily: "克里斯",
		enmale: "",
		enfemale: "蒙莉萨"
};
data["183"] = {
		cnfamily: "归海",
		cnmale: "萧",
		cnfemale: "怡",
		enfamily: "丘奇",
		enmale: "",
		enfemale: "玛希"
};
data["184"] = {
		cnfamily: "邬",
		cnmale: "奎",
		cnfemale: "聋五",
		enfamily: "丘吉尔",
		enmale: "",
		enfemale: "玛莉提"
};
data["185"] = {
		cnfamily: "管",
		cnmale: "高烽",
		cnfemale: "惋庭",
		enfamily: "锡西",
		enmale: "",
		enfemale: "梅莉"
};
data["186"] = {
		cnfamily: "钱",
		cnmale: "难破",
		cnfemale: "太英",
		enfamily: "克拉彭",
		enmale: "",
		enfemale: "米歇尔"
};
data["187"] = {
		cnfamily: "苗",
		cnmale: "广缘",
		cnfemale: "夜阑",
		enfamily: "克拉拉",
		enmale: "",
		enfemale: "蜜雪莉"
};
data["188"] = {
		cnfamily: "宣",
		cnmale: "行天",
		cnfemale: "涑",
		enfamily: "克莱尔",
		enmale: "",
		enfemale: "蜜妮安"
};
data["189"] = {
		cnfamily: "司空",
		cnmale: "胜",
		cnfemale: "悒",
		enfamily: "克拉丽",
		enmale: "",
		enfemale: "穆得莉"
};
data["190"] = {
		cnfamily: "安",
		cnmale: "嚣",
		cnfemale: "绣连",
		enfamily: "克拉克",
		enmale: "",
		enfemale: "米兰达"
};
data["191"] = {
		cnfamily: "卢",
		cnmale: "稀",
		cnfemale: "香芦",
		enfamily: "克莱门",
		enmale: "",
		enfemale: "蜜莉恩"
};
data["192"] = {
		cnfamily: "吴",
		cnmale: "自中",
		cnfemale: "太清",
		enfamily: "克里曼",
		enmale: "",
		enfemale: "摩黛丝"
};
data["193"] = {
		cnfamily: "方",
		cnmale: "难摧",
		cnfemale: "藏今",
		enfamily: "克莱门",
		enmale: "",
		enfemale: "茉伊拉"
};
data["194"] = {
		cnfamily: "郁",
		cnmale: "天与",
		cnfemale: "兰",
		enfamily: "科克尔",
		enmale: "",
		enfemale: "茉莉"
};
data["195"] = {
		cnfamily: "西门",
		cnmale: "浩天",
		cnfemale: "芳",
		enfamily: "科菲",
		enmale: "",
		enfemale: "梦娜"
};
data["196"] = {
		cnfamily: "常",
		cnmale: "鹰",
		cnfemale: "金连",
		enfamily: "科尔克",
		enmale: "",
		enfemale: "莫妮卡"
};
data["197"] = {
		cnfamily: "经",
		cnmale: "骁",
		cnfemale: "飞凤",
		enfamily: "科尔里",
		enmale: "",
		enfemale: "穆丽儿"
};
data["198"] = {
		cnfamily: "张",
		cnmale: "班",
		cnfemale: "善斓",
		enfamily: "柯勒律",
		enmale: "",
		enfemale: "玛瑞"
};
data["199"] = {
		cnfamily: "任",
		cnmale: "天川",
		cnfemale: "幻姬",
		enfamily: "柯林斯",
		enmale: "",
		enfemale: "玛拉"
};
data["200"] = {
		cnfamily: "嵇",
		cnmale: "难胜",
		cnfemale: "澜",
		enfamily: "康芒斯",
		enmale: "",
		enfemale: "蜜尔娜"
};
data["201"] = {
		cnfamily: "左丘",
		cnmale: "天抒",
		cnfemale: "芸",
		enfamily: "科南",
		enmale: "",
		enfemale: "南希"
};
data["202"] = {
		cnfamily: "于",
		cnmale: "天寿",
		cnfemale: "大凄",
		enfamily: "康格里",
		enmale: "",
		enfemale: "娜娥迷"
};
data["203"] = {
		cnfamily: "房",
		cnmale: "卿",
		cnfemale: "无春",
		enfamily: "康尼",
		enmale: "",
		enfemale: "纳塔利"
};
data["204"] = {
		cnfamily: "喻",
		cnmale: "鲂",
		cnfemale: "善愁",
		enfamily: "康纳",
		enmale: "",
		enfemale: "娜提雅"
};
data["205"] = {
		cnfamily: "袁",
		cnmale: "仰",
		cnfemale: "茹妖",
		enfamily: "康拉德",
		enmale: "",
		enfemale: "内丽"
};
data["206"] = {
		cnfamily: "邢",
		cnmale: "大开",
		cnfemale: "蓝",
		enfamily: "康斯坦",
		enmale: "",
		enfemale: "妮可"
};
data["207"] = {
		cnfamily: "伯赏",
		cnmale: "德地",
		cnfemale: "笙",
		enfamily: "库克",
		enmale: "",
		enfemale: "妮可拉"
};
data["208"] = {
		cnfamily: "傅",
		cnmale: "天奇",
		cnfemale: "傻姑",
		enfamily: "库珀",
		enmale: "",
		enfemale: "妮娜"
};
data["209"] = {
		cnfamily: "裘",
		cnmale: "无血",
		cnfemale: "紫烟",
		enfamily: "科波菲",
		enmale: "",
		enfemale: "诺拉"
};
data["210"] = {
		cnfamily: "俞",
		cnmale: "城",
		cnfemale: "善若",
		enfamily: "柯顿",
		enmale: "",
		enfemale: "诺维雅"
};
data["211"] = {
		cnfamily: "柳",
		cnmale: "剑",
		cnfemale: "香魔",
		enfamily: "科弗代",
		enmale: "",
		enfemale: "妮蒂亚"
};
data["212"] = {
		cnfamily: "向",
		cnmale: "伊",
		cnfemale: "斓",
		enfamily: "考珀",
		enmale: "",
		enfemale: "奥克塔"
};
data["213"] = {
		cnfamily: "巫马",
		cnmale: "傀儡",
		cnfemale: "忻",
		enfamily: "克雷吉",
		enmale: "",
		enfemale: "奥蒂列"
};
data["214"] = {
		cnfamily: "赫",
		cnmale: "德天",
		cnfemale: "蛟凤",
		enfamily: "克兰",
		enmale: "",
		enfemale: "奥蒂莉"
};
data["215"] = {
		cnfamily: "费",
		cnmale: "半仙",
		cnfemale: "双双",
		enfamily: "克赖顿",
		enmale: "",
		enfemale: "欧尔佳"
};
data["216"] = {
		cnfamily: "唐",
		cnmale: "聋五",
		cnfemale: "嫣然",
		enfamily: "克罗夫",
		enmale: "",
		enfemale: "奥丽芙"
};
data["217"] = {
		cnfamily: "裴",
		cnmale: "康",
		cnfemale: "魂幽",
		enfamily: "克罗夫",
		enmale: "",
		enfemale: "奥丽薇"
};
data["218"] = {
		cnfamily: "谷粱",
		cnmale: "筮",
		cnfemale: "纹",
		enfamily: "克伦威",
		enmale: "",
		enfemale: "奥菲莉"
};
data["219"] = {
		cnfamily: "连",
		cnmale: "栾",
		cnfemale: "芯",
		enfamily: "克罗宁",
		enmale: "",
		enfemale: "佩格"
};
data["220"] = {
		cnfamily: "解",
		cnmale: "羊青",
		cnfemale: "莹芝",
		enfamily: "克洛宁",
		enmale: "",
		enfemale: "蓓姬"
};
data["221"] = {
		cnfamily: "纪",
		cnmale: "世平",
		cnfemale: "汝燕",
		enfamily: "坎伯兰",
		enmale: "",
		enfemale: "帕梅拉"
};
data["222"] = {
		cnfamily: "薛",
		cnmale: "一鸣",
		cnfemale: "阑悦",
		enfamily: "柯姆",
		enmale: "",
		enfemale: "潘多拉"
};
data["223"] = {
		cnfamily: "陆",
		cnmale: "如花",
		cnfemale: "藏花",
		enfamily: "戴西",
		enmale: "",
		enfemale: "派翠西"
};
data["224"] = {
		cnfamily: "公西",
		cnmale: "阁",
		cnfemale: "雯",
		enfamily: "道尔顿",
		enmale: "",
		enfemale: "赛拉"
};
data["225"] = {
		cnfamily: "齐",
		cnmale: "勒",
		cnfemale: "紫",
		enfamily: "丹",
		enmale: "",
		enfemale: "佩儿"
};
data["226"] = {
		cnfamily: "应",
		cnmale: "厉",
		cnfemale: "中蓝",
		enfamily: "丹尼尔",
		enmale: "",
		enfemale: "佩内洛"
};
data["227"] = {
		cnfamily: "骆",
		cnmale: "牛青",
		cnfemale: "玉兰",
		enfamily: "丹聂耳",
		enmale: "",
		enfemale: "潘妮"
};
data["228"] = {
		cnfamily: "贺",
		cnmale: "世德",
		cnfemale: "阑香",
		enfamily: "丹尼尔",
		enmale: "",
		enfemale: "菲莉帕"
};
data["229"] = {
		cnfamily: "翁",
		cnmale: "文龙",
		cnfemale: "妖妖",
		enfamily: "达尔文",
		enmale: "",
		enfemale: "菲碧"
};
data["230"] = {
		cnfamily: "公冶",
		cnmale: "三问",
		cnfemale: "若",
		enfamily: "戴维",
		enmale: "",
		enfemale: "菲妮克"
};
data["231"] = {
		cnfamily: "伍",
		cnmale: "穆",
		cnfemale: "茈",
		enfamily: "戴维",
		enmale: "",
		enfemale: "菲丽丝"
};
data["232"] = {
		cnfamily: "丁",
		cnmale: "炳",
		cnfemale: "太兰",
		enfamily: "迪福",
		enmale: "",
		enfemale: "珀莉"
};
data["233"] = {
		cnfamily: "车",
		cnmale: "戎",
		cnfemale: "婷冉",
		enfamily: "迪莉娅",
		enmale: "",
		enfemale: "波比"
};
data["234"] = {
		cnfamily: "孟",
		cnmale: "开山",
		cnfemale: "岂愈",
		enfamily: "丹尼斯",
		enmale: "",
		enfemale: "普莉玛"
};
data["235"] = {
		cnfamily: "段",
		cnmale: "世立",
		cnfemale: "一凤",
		enfamily: "杜瓦",
		enmale: "",
		enfemale: "普莉斯"
};
data["236"] = {
		cnfamily: "濮阳",
		cnmale: "元正",
		cnfemale: "弱",
		enfamily: "昆西",
		enmale: "",
		enfemale: "昆娜"
};
data["237"] = {
		cnfamily: "",
		cnmale: "非笑",
		cnfemale: "芷",
		enfamily: "迪尤尔",
		enmale: "",
		enfemale: "昆蒂娜"
};
data["238"] = {
		cnfamily: "",
		cnmale: "扬",
		cnfemale: "寡妇",
		enfamily: "杜威",
		enmale: "",
		enfemale: "瑞琪儿"
};
data["239"] = {
		cnfamily: "",
		cnmale: "斩",
		cnfemale: "秋尽",
		enfamily: "迪克",
		enmale: "",
		enfemale: "瑞伊"
};
data["240"] = {
		cnfamily: "",
		cnmale: "天德",
		cnfemale: "紫伊",
		enfamily: "狄更斯",
		enmale: "",
		enfemale: "蕾娜塔"
};
data["241"] = {
		cnfamily: "",
		cnmale: "中恶",
		cnfemale: "芸遥",
		enfamily: "迪肯斯",
		enmale: "",
		enfemale: "蕾妮"
};
data["242"] = {
		cnfamily: "",
		cnmale: "浩阑",
		cnfemale: "萍",
		enfamily: "迪基",
		enmale: "",
		enfemale: "莉达"
};
data["243"] = {
		cnfamily: "",
		cnmale: "蓝血",
		cnfemale: "颜",
		enfamily: "狄龙",
		enmale: "",
		enfemale: "莉娃"
};
data["244"] = {
		cnfamily: "",
		cnmale: "垣",
		cnfemale: "外绣",
		enfamily: "多宾",
		enmale: "",
		enfemale: "罗莎琳"
};
data["245"] = {
		cnfamily: "",
		cnmale: "颤",
		cnfemale: "凤灵",
		enfamily: "多德",
		enmale: "",
		enfemale: "罗丝"
};
data["246"] = {
		cnfamily: "",
		cnmale: "铁身",
		cnfemale: "清炎",
		enfamily: "道尔蒂",
		enmale: "",
		enfemale: "鲁思玛"
};
data["247"] = {
		cnfamily: "",
		cnmale: "延恶",
		cnfemale: "行云",
		enfamily: "陶赫蒂",
		enmale: "",
		enfemale: "罗克珊"
};
data["248"] = {
		cnfamily: "",
		cnmale: "士晋",
		cnfemale: "颦",
		enfamily: "多利",
		enmale: "",
		enfemale: "露比"
};
data["249"] = {
		cnfamily: "",
		cnmale: "无招",
		cnfemale: "艳",
		enfamily: "多恩",
		enmale: "",
		enfemale: "莎碧娜"
};
data["250"] = {
		cnfamily: "",
		cnmale: "师",
		cnfemale: "不平",
		enfamily: "多拉",
		enmale: "",
		enfemale: "莎莉"
};
data["251"] = {
		cnfamily: "",
		cnmale: "孱",
		cnfemale: "媚颜",
		enfamily: "陶丽思",
		enmale: "",
		enfemale: "莎柏琳"
};
data["252"] = {
		cnfamily: "",
		cnmale: "老黑",
		cnfemale: "清涟",
		enfamily: "多丽丝",
		enmale: "",
		enfemale: "莎洛姆"
};
data["253"] = {
		cnfamily: "",
		cnmale: "百川",
		cnfemale: "舞仙",
		enfamily: "多萝西",
		enmale: "",
		enfemale: "莎曼撤"
};
data["254"] = {
		cnfamily: "",
		cnmale: "铸海",
		cnfemale: "婴",
		enfamily: "多萝西",
		enmale: "",
		enfemale: "珊多拉"
};
data["255"] = {
		cnfamily: "",
		cnmale: "无极",
		cnfemale: "雁",
		enfamily: "道格拉",
		enmale: "",
		enfemale: "仙蒂"
};
data["256"] = {
		cnfamily: "",
		cnmale: "翼",
		cnfemale: "毒娘",
		enfamily: "道尔",
		enmale: "",
		enfemale: "莎拉"
};
data["257"] = {
		cnfamily: "",
		cnmale: "续",
		cnfemale: "问晴",
		enfamily: "多伊尔",
		enmale: "",
		enfemale: "赛拉"
};
data["258"] = {
		cnfamily: "",
		cnmale: "半邪",
		cnfemale: "苑睐",
		enfamily: "德莱登",
		enmale: "",
		enfemale: "莎芭丝"
};
data["259"] = {
		cnfamily: "",
		cnmale: "世倌",
		cnfemale: "小小",
		enfamily: "德莱塞",
		enmale: "",
		enfemale: "萨琳娜"
};
data["260"] = {
		cnfamily: "",
		cnmale: "人龙",
		cnfemale: "梦琪",
		enfamily: "屈莱顿",
		enmale: "",
		enfemale: "沙伦"
};
data["261"] = {
		cnfamily: "",
		cnmale: "鬼神",
		cnfemale: "之桃",
		enfamily: "杜波依",
		enmale: "",
		enfemale: "希拉"
};
data["262"] = {
		cnfamily: "",
		cnmale: "秋",
		cnfemale: "慕青",
		enfamily: "杜勒斯",
		enmale: "",
		enfemale: "雪莉"
};
data["263"] = {
		cnfamily: "",
		cnmale: "岩",
		cnfemale: "尔岚",
		enfamily: "邓巴",
		enmale: "",
		enfemale: "希贝儿"
};
data["264"] = {
		cnfamily: "",
		cnmale: "半山",
		cnfemale: "初夏",
		enfamily: "邓肯",
		enmale: "",
		enfemale: "西格莉"
};
data["265"] = {
		cnfamily: "",
		cnmale: "连碧",
		cnfemale: "沛菡",
		enfamily: "邓洛普",
		enmale: "",
		enfemale: "席梦娜"
};
data["266"] = {
		cnfamily: "",
		cnmale: "伯云",
		cnfemale: "傲珊",
		enfamily: "杜邦",
		enmale: "",
		enfemale: "苏菲亚"
};
data["267"] = {
		cnfamily: "",
		cnmale: "满天",
		cnfemale: "曼文",
		enfamily: "杜德",
		enmale: "",
		enfemale: "丝柏凌"
};
data["268"] = {
		cnfamily: "",
		cnmale: "傥",
		cnfemale: "乐菱",
		enfamily: "达特",
		enmale: "",
		enfemale: "丝特芬"
};
data["269"] = {
		cnfamily: "",
		cnmale: "奄",
		cnfemale: "惜文",
		enfamily: "埃迪",
		enmale: "",
		enfemale: "苏珊"
};
data["270"] = {
		cnfamily: "",
		cnmale: "一江",
		cnfemale: "香寒",
		enfamily: "艾登",
		enmale: "",
		enfemale: "苏珊娜"
};
data["271"] = {
		cnfamily: "",
		cnmale: "岱周",
		cnfemale: "新柔",
		enfamily: "埃奇沃",
		enmale: "",
		enfemale: "苏西"
};
data["272"] = {
		cnfamily: "",
		cnmale: "老头",
		cnfemale: "语蓉",
		enfamily: "伊迪",
		enmale: "",
		enfemale: "苏珊"
};
data["273"] = {
		cnfamily: "",
		cnmale: "飞扬",
		cnfemale: "海安",
		enfamily: "爱迪生",
		enmale: "",
		enfemale: "泰贝莎"
};
data["274"] = {
		cnfamily: "",
		cnmale: "乞",
		cnfemale: "夜蓉",
		enfamily: "伊迪丝",
		enmale: "",
		enfemale: "泰蜜"
};
data["275"] = {
		cnfamily: "",
		cnmale: "箴",
		cnfemale: "涵柏",
		enfamily: "埃德蒙",
		enmale: "",
		enfemale: "特莉萨"
};
data["276"] = {
		cnfamily: "",
		cnmale: "十八",
		cnfemale: "水桃",
		enfamily: "爱德华",
		enmale: "",
		enfemale: "泰丝"
};
data["277"] = {
		cnfamily: "",
		cnmale: "行恶",
		cnfemale: "醉蓝",
		enfamily: "埃菲",
		enmale: "",
		enfemale: "席拉"
};
data["278"] = {
		cnfamily: "",
		cnmale: "剑通",
		cnfemale: "语琴",
		enfamily: "艾泼斯",
		enmale: "",
		enfemale: "泰莉萨"
};
data["279"] = {
		cnfamily: "",
		cnmale: "行恶",
		cnfemale: "从彤",
		enfamily: "艾森豪",
		enmale: "",
		enfemale: "蒂法尼"
};
data["280"] = {
		cnfamily: "",
		cnmale: "剑通",
		cnfemale: "傲晴",
		enfamily: "埃兰娜",
		enmale: "",
		enfemale: "翠西"
};
data["281"] = {
		cnfamily: "",
		cnmale: "致远",
		cnfemale: "语兰",
		enfamily: "埃利诺",
		enmale: "",
		enfemale: "翠丝特"
};
data["282"] = {
		cnfamily: "",
		cnmale: "俊驰",
		cnfemale: "又菱",
		enfamily: "伊利克",
		enmale: "",
		enfemale: "杜达"
};
data["283"] = {
		cnfamily: "",
		cnmale: "雨泽",
		cnfemale: "碧彤",
		enfamily: "埃利诺",
		enmale: "",
		enfemale: "优拉"
};
data["284"] = {
		cnfamily: "",
		cnmale: "烨磊",
		cnfemale: "元霜",
		enfamily: "爱略特",
		enmale: "",
		enfemale: "优娜"
};
data["285"] = {
		cnfamily: "",
		cnmale: "晟睿",
		cnfemale: "怜梦",
		enfamily: "埃利奥",
		enmale: "",
		enfemale: "厄休拉"
};
data["286"] = {
		cnfamily: "",
		cnmale: "天佑",
		cnfemale: "紫寒",
		enfamily: "艾略特",
		enmale: "",
		enfemale: "范伦汀"
};
data["287"] = {
		cnfamily: "",
		cnmale: "文昊",
		cnfemale: "妙彤",
		enfamily: "伊丽莎",
		enmale: "",
		enfemale: "瓦勒莉"
};
data["288"] = {
		cnfamily: "",
		cnmale: "修洁",
		cnfemale: "曼易",
		enfamily: "埃拉",
		enmale: "",
		enfemale: "维拉"
};
data["289"] = {
		cnfamily: "",
		cnmale: "黎昕",
		cnfemale: "南莲",
		enfamily: "埃伦",
		enmale: "",
		enfemale: "维娜"
};
data["290"] = {
		cnfamily: "",
		cnmale: "远航",
		cnfemale: "紫翠",
		enfamily: "艾利斯",
		enmale: "",
		enfemale: "维拉妮"
};
data["291"] = {
		cnfamily: "",
		cnmale: "旭尧",
		cnfemale: "雨寒",
		enfamily: "埃尔西",
		enmale: "",
		enfemale: "维多利"
};
data["292"] = {
		cnfamily: "",
		cnmale: "鸿涛",
		cnfemale: "易烟",
		enfamily: "埃墨森",
		enmale: "",
		enfemale: "维基"
};
data["293"] = {
		cnfamily: "",
		cnmale: "伟祺",
		cnfemale: "如萱",
		enfamily: "埃米莉",
		enmale: "",
		enfemale: "维尔莉"
};
data["294"] = {
		cnfamily: "",
		cnmale: "荣轩",
		cnfemale: "若南",
		enfamily: "艾米丽",
		enmale: "",
		enfemale: "维吉妮"
};
data["295"] = {
		cnfamily: "",
		cnmale: "越泽",
		cnfemale: "寻真",
		enfamily: "埃玛",
		enmale: "",
		enfemale: "维达"
};
data["296"] = {
		cnfamily: "",
		cnmale: "浩宇",
		cnfemale: "晓亦",
		enfamily: "埃米",
		enmale: "",
		enfemale: "维文"
};
data["297"] = {
		cnfamily: "",
		cnmale: "瑾瑜",
		cnfemale: "向珊",
		enfamily: "欧内斯",
		enmale: "",
		enfemale: "华莉丝"
};
data["298"] = {
		cnfamily: "",
		cnmale: "皓轩",
		cnfemale: "慕灵",
		enfamily: "埃丝特",
		enmale: "",
		enfemale: "旺妲"
};
data["299"] = {
		cnfamily: "",
		cnmale: "擎苍",
		cnfemale: "以蕊",
		enfamily: "尤金",
		enmale: "",
		enfemale: "温迪"
};
data["300"] = {
		cnfamily: "",
		cnmale: "擎宇",
		cnfemale: "映易",
		enfamily: "尤金",
		enmale: "",
		enfemale: "温妮"
};
data["301"] = {
		cnfamily: "",
		cnmale: "志泽",
		cnfemale: "雪柳",
		enfamily: "尤菲米",
		enmale: "",
		enfemale: "赛薇亚"
};
data["302"] = {
		cnfamily: "",
		cnmale: "子轩",
		cnfemale: "海云",
		enfamily: "伊娃",
		enmale: "",
		enfemale: "芝妮雅"
};
data["303"] = {
		cnfamily: "",
		cnmale: "睿渊",
		cnfemale: "凝天",
		enfamily: "埃文",
		enmale: "",
		enfemale: "依耶塔"
};
data["304"] = {
		cnfamily: "",
		cnmale: "弘文",
		cnfemale: "沛珊",
		enfamily: "埃文思",
		enmale: "",
		enfemale: "耶达"
};
data["305"] = {
		cnfamily: "",
		cnmale: "哲瀚",
		cnfemale: "寒云",
		enfamily: "伊夫",
		enmale: "",
		enfemale: "依耶芙"
};
data["306"] = {
		cnfamily: "",
		cnmale: "雨泽",
		cnfemale: "冰旋",
		enfamily: "埃维莉",
		enmale: "",
		enfemale: "伊芳"
};
data["307"] = {
		cnfamily: "",
		cnmale: "楷瑞",
		cnfemale: "宛儿",
		enfamily: "伊夫琳",
		enmale: "",
		enfemale: "莎拉"
};
data["308"] = {
		cnfamily: "",
		cnmale: "建辉",
		cnfemale: "",
		enfamily: "伊齐基",
		enmale: "",
		enfemale: "丽诺比"
};
data["309"] = {
		cnfamily: "",
		cnmale: "晋鹏",
		cnfemale: "",
		enfamily: "范妮",
		enmale: "",
		enfemale: "若伊"
};
data["310"] = {
		cnfamily: "",
		cnmale: "天磊",
		cnfemale: "",
		enfamily: "法拉第",
		enmale: "",
		enfemale: "若娜"
};
data["311"] = {
		cnfamily: "",
		cnmale: "绍辉",
		cnfemale: "",
		enfamily: "法斯特",
		enmale: "",
		enfemale: "若拉"
};
data["312"] = {
		cnfamily: "",
		cnmale: "泽洋",
		cnfemale: "",
		enfamily: "福克纳",
		enmale: "",
		enfemale: "萌"
};
data["313"] = {
		cnfamily: "",
		cnmale: "鑫磊",
		cnfemale: "",
		enfamily: "费利克",
		enmale: "",
		enfemale: "冷"
};
data["314"] = {
		cnfamily: "",
		cnmale: "鹏煊",
		cnfemale: "",
		enfamily: "费尔顿",
		enmale: "",
		enfemale: "皇族"
};
data["315"] = {
		cnfamily: "",
		cnmale: "昊强",
		cnfemale: "",
		enfamily: "费迪南",
		enmale: "",
		enfemale: "古墓"
};
data["316"] = {
		cnfamily: "",
		cnmale: "伟宸",
		cnfemale: "",
		enfamily: "福开森",
		enmale: "",
		enfemale: "莎"
};
data["317"] = {
		cnfamily: "",
		cnmale: "博超",
		cnfemale: "",
		enfamily: "弗格森",
		enmale: "",
		enfemale: "洛"
};
data["318"] = {
		cnfamily: "",
		cnmale: "君浩",
		cnfemale: "",
		enfamily: "弗格森",
		enmale: "",
		enfemale: "专属"
};
data["319"] = {
		cnfamily: "",
		cnmale: "子骞",
		cnfemale: "",
		enfamily: "菲尔德",
		enmale: "",
		enfemale: "非主流"
};
data["320"] = {
		cnfamily: "",
		cnmale: "鹏涛",
		cnfemale: "",
		enfamily: "菲尔丁",
		enmale: "",
		enfemale: "完美"
};
data["321"] = {
		cnfamily: "",
		cnmale: "炎彬",
		cnfemale: "",
		enfamily: "芬恩",
		enmale: "",
		enfemale: "冰激凌"
};
data["322"] = {
		cnfamily: "",
		cnmale: "鹤轩",
		cnfemale: "",
		enfamily: "菲茨杰",
		enmale: "",
		enfemale: "经典"
};
data["323"] = {
		cnfamily: "",
		cnmale: "越彬",
		cnfemale: "",
		enfamily: "弗劳尔",
		enmale: "",
		enfemale: "红尘"
};
data["324"] = {
		cnfamily: "",
		cnmale: "风华",
		cnfemale: "",
		enfamily: "弗林",
		enmale: "",
		enfemale: "经典"
};
data["325"] = {
		cnfamily: "",
		cnmale: "靖琪",
		cnfemale: "",
		enfamily: "弗琳",
		enmale: "",
		enfemale: "回忆"
};
data["326"] = {
		cnfamily: "",
		cnmale: "明辉",
		cnfemale: "",
		enfamily: "福特",
		enmale: "",
		enfemale: "独恋"
};
data["327"] = {
		cnfamily: "",
		cnmale: "伟诚",
		cnfemale: "",
		enfamily: "福斯特",
		enmale: "",
		enfemale: "传说"
};
data["328"] = {
		cnfamily: "",
		cnmale: "明轩",
		cnfemale: "",
		enfamily: "福斯特",
		enmale: "",
		enfemale: "可爱"
};
data["329"] = {
		cnfamily: "",
		cnmale: "健柏",
		cnfemale: "",
		enfamily: "福勒",
		enmale: "",
		enfemale: "单身"
};
data["330"] = {
		cnfamily: "",
		cnmale: "修杰",
		cnfemale: "",
		enfamily: "福克斯",
		enmale: "",
		enfemale: "恋"
};
data["331"] = {
		cnfamily: "",
		cnmale: "志泽",
		cnfemale: "",
		enfamily: "弗朗西",
		enmale: "",
		enfemale: "千语"
};
data["332"] = {
		cnfamily: "",
		cnmale: "弘文",
		cnfemale: "",
		enfamily: "弗朗西",
		enmale: "",
		enfemale: "午夜"
};
data["333"] = {
		cnfamily: "",
		cnmale: "峻熙",
		cnfemale: "",
		enfamily: "法兰西",
		enmale: "",
		enfemale: "倾城"
};
data["334"] = {
		cnfamily: "",
		cnmale: "嘉懿",
		cnfemale: "",
		enfamily: "弗兰克",
		enmale: "",
		enfemale: "慕容"
};
data["335"] = {
		cnfamily: "",
		cnmale: "煜城",
		cnfemale: "",
		enfamily: "富兰克",
		enmale: "",
		enfemale: "欧阳"
};
data["336"] = {
		cnfamily: "",
		cnmale: "懿轩",
		cnfemale: "",
		enfamily: "弗雷德",
		enmale: "",
		enfemale: "南宫"
};
data["337"] = {
		cnfamily: "",
		cnmale: "烨伟",
		cnfemale: "",
		enfamily: "弗雷德",
		enmale: "",
		enfemale: "夏侯"
};
data["338"] = {
		cnfamily: "",
		cnmale: "苑博",
		cnfemale: "",
		enfamily: "弗里曼",
		enmale: "",
		enfemale: "春野"
};
data["339"] = {
		cnfamily: "",
		cnmale: "伟泽",
		cnfemale: "",
		enfamily: "芬克",
		enmale: "",
		enfemale: "哈利"
};
data["340"] = {
		cnfamily: "",
		cnmale: "熠彤",
		cnfemale: "",
		enfamily: "加布里",
		enmale: "",
		enfemale: "卑弥呼"
};
data["341"] = {
		cnfamily: "",
		cnmale: "鸿煊",
		cnfemale: "",
		enfamily: "加布尔",
		enmale: "",
		enfemale: "彩虹"
};
data["342"] = {
		cnfamily: "",
		cnmale: "博涛",
		cnfemale: "",
		enfamily: "加拉赫",
		enmale: "",
		enfemale: "演绎"
};
data["343"] = {
		cnfamily: "",
		cnmale: "烨霖",
		cnfemale: "",
		enfamily: "盖洛普",
		enmale: "",
		enfemale: "司马"
};
data["344"] = {
		cnfamily: "",
		cnmale: "烨华",
		cnfemale: "",
		enfamily: "高尔斯",
		enmale: "",
		enfemale: "纳兰"
};
data["345"] = {
		cnfamily: "",
		cnmale: "煜祺",
		cnfemale: "",
		enfamily: "加西亚",
		enmale: "",
		enfemale: "自由"
};
data["346"] = {
		cnfamily: "",
		cnmale: "智宸",
		cnfemale: "",
		enfamily: "加登",
		enmale: "",
		enfemale: "浪漫"
};
data["347"] = {
		cnfamily: "",
		cnmale: "正豪",
		cnfemale: "",
		enfamily: "加德纳",
		enmale: "",
		enfemale: "守护"
};
data["348"] = {
		cnfamily: "",
		cnmale: "明杰",
		cnfemale: "",
		enfamily: "加斯克",
		enmale: "",
		enfemale: "华丽"
};
data["349"] = {
		cnfamily: "",
		cnmale: "立诚",
		cnfemale: "",
		enfamily: "杰弗里",
		enmale: "",
		enfemale: "王者"
};
data["350"] = {
		cnfamily: "",
		cnmale: "立轩",
		cnfemale: "",
		enfamily: "乔迪",
		enmale: "",
		enfemale: "左岸"
};
data["351"] = {
		cnfamily: "",
		cnmale: "立辉",
		cnfemale: "",
		enfamily: "乔治",
		enmale: "",
		enfemale: "阿尔"
};
data["352"] = {
		cnfamily: "",
		cnmale: "峻熙",
		cnfemale: "",
		enfamily: "吉本",
		enmale: "",
		enfemale: "挚爱"
};
data["353"] = {
		cnfamily: "",
		cnmale: "弘文",
		cnfemale: "",
		enfamily: "吉布森",
		enmale: "",
		enfemale: "妖娆"
};
data["354"] = {
		cnfamily: "",
		cnmale: "熠彤",
		cnfemale: "",
		enfamily: "吉尔伯",
		enmale: "",
		enfemale: "天道"
};
data["355"] = {
		cnfamily: "",
		cnmale: "鸿煊",
		cnfemale: "",
		enfamily: "詹理斯",
		enmale: "",
		enfemale: "红人"
};
data["356"] = {
		cnfamily: "",
		cnmale: "烨霖",
		cnfemale: "",
		enfamily: "贾尔斯",
		enmale: "",
		enfemale: "star"
};
data["357"] = {
		cnfamily: "",
		cnmale: "鑫鹏",
		cnfemale: "",
		enfamily: "吉尔",
		enmale: "",
		enfemale: "笑傲"
};
data["358"] = {
		cnfamily: "",
		cnmale: "天思",
		cnfemale: "",
		enfamily: "季星",
		enmale: "",
		enfemale: "神圣"
};
data["359"] = {
		cnfamily: "",
		cnmale: "聪展",
		cnfemale: "",
		enfamily: "格拉德",
		enmale: "",
		enfemale: "大爱"
};
data["360"] = {
		cnfamily: "",
		cnmale: "鹏笑",
		cnfemale: "",
		enfamily: "格莱斯",
		enmale: "",
		enfemale: "天使"
};
data["361"] = {
		cnfamily: "",
		cnmale: "愚志",
		cnfemale: "",
		enfamily: "戈德温",
		enmale: "",
		enfemale: "温柔"
};
data["362"] = {
		cnfamily: "",
		cnmale: "强炫",
		cnfemale: "",
		enfamily: "葛德文",
		enmale: "",
		enfemale: "灵魂"
};
data["363"] = {
		cnfamily: "",
		cnmale: "明雪",
		cnfemale: "",
		enfamily: "戈尔德",
		enmale: "",
		enfemale: "无情"
};
data["364"] = {
		cnfamily: "",
		cnmale: "松思",
		cnfemale: "",
		enfamily: "高尔德",
		enmale: "",
		enfemale: "潇洒"
};
data["365"] = {
		cnfamily: "",
		cnmale: "源智",
		cnfemale: "",
		enfamily: "戈德史",
		enmale: "",
		enfemale: "无忧"
};
data["366"] = {
		cnfamily: "",
		cnmale: "渊思",
		cnfemale: "",
		enfamily: "哥尔斯",
		enmale: "",
		enfemale: "繁华"
};
data["367"] = {
		cnfamily: "",
		cnmale: "晓啸",
		cnfemale: "",
		enfamily: "戈斯",
		enmale: "",
		enfemale: "柔情"
};
data["368"] = {
		cnfamily: "",
		cnmale: "天宇",
		cnfemale: "",
		enfamily: "格雷斯",
		enmale: "",
		enfemale: "绝版"
};
data["369"] = {
		cnfamily: "",
		cnmale: "浩然",
		cnfemale: "",
		enfamily: "格雷西",
		enmale: "",
		enfemale: "寂寞"
};
data["370"] = {
		cnfamily: "",
		cnmale: "文轩",
		cnfemale: "",
		enfamily: "格雷汉",
		enmale: "",
		enfemale: "幻想"
};
data["371"] = {
		cnfamily: "",
		cnmale: "鹭洋",
		cnfemale: "",
		enfamily: "格兰汉",
		enmale: "",
		enfemale: "旋律"
};
data["372"] = {
		cnfamily: "",
		cnmale: "振家",
		cnfemale: "",
		enfamily: "格雷厄",
		enmale: "",
		enfemale: "优雅"
};
data["373"] = {
		cnfamily: "",
		cnmale: "乐驹",
		cnfemale: "",
		enfamily: "格兰特",
		enmale: "",
		enfemale: "精彩"
};
data["374"] = {
		cnfamily: "",
		cnmale: "晓博",
		cnfemale: "",
		enfamily: "格兰瑟",
		enmale: "",
		enfemale: "辉煌"
};
data["375"] = {
		cnfamily: "",
		cnmale: "文博",
		cnfemale: "",
		enfamily: "格雷",
		enmale: "",
		enfemale: "荣耀"
};
data["376"] = {
		cnfamily: "",
		cnmale: "昊焱",
		cnfemale: "",
		enfamily: "格林",
		enmale: "",
		enfemale: "梦之"
};
data["377"] = {
		cnfamily: "",
		cnmale: "立果",
		cnfemale: "",
		enfamily: "格雷戈",
		enmale: "",
		enfemale: "寻梦"
};
data["378"] = {
		cnfamily: "",
		cnmale: "金鑫",
		cnfemale: "",
		enfamily: "格雷沙",
		enmale: "",
		enfemale: "精英"
};
data["379"] = {
		cnfamily: "",
		cnmale: "锦程",
		cnfemale: "",
		enfamily: "格雷",
		enmale: "",
		enfemale: "supper"
};
data["380"] = {
		cnfamily: "",
		cnmale: "嘉熙",
		cnfemale: "",
		enfamily: "格罗特",
		enmale: "",
		enfemale: "记忆"
};
data["381"] = {
		cnfamily: "",
		cnmale: "鹏飞",
		cnfemale: "",
		enfamily: "冈特",
		enmale: "",
		enfemale: "伤心"
};
data["382"] = {
		cnfamily: "",
		cnmale: "子默",
		cnfemale: "",
		enfamily: "冈瑟",
		enmale: "",
		enfemale: "迷糊"
};
data["383"] = {
		cnfamily: "",
		cnmale: "思远",
		cnfemale: "",
		enfamily: "格斯",
		enmale: "",
		enfemale: "善良"
};
data["384"] = {
		cnfamily: "",
		cnmale: "浩轩",
		cnfemale: "",
		enfamily: "盖伊",
		enmale: "",
		enfemale: "安"
};
data["385"] = {
		cnfamily: "",
		cnmale: "语堂",
		cnfemale: "",
		enfamily: "哈巴卡",
		enmale: "",
		enfemale: "比利"
};
data["386"] = {
		cnfamily: "",
		cnmale: "聪健",
		cnfemale: "",
		enfamily: "哈该",
		enmale: "",
		enfemale: "琼斯"
};
data["387"] = {
		cnfamily: "",
		cnmale: "问旋",
		cnfemale: "",
		enfamily: "哈尔",
		enmale: "",
		enfemale: "卡尔"
};
data["388"] = {
		cnfamily: "",
		cnmale: "白易",
		cnfemale: "",
		enfamily: "哈利法",
		enmale: "",
		enfemale: "查理"
};
data["389"] = {
		cnfamily: "",
		cnmale: "问筠",
		cnfemale: "",
		enfamily: "哈密尔",
		enmale: "",
		enfemale: "嘉利"
};
data["390"] = {
		cnfamily: "",
		cnmale: "听白",
		cnfemale: "",
		enfamily: "汉森尔",
		enmale: "",
		enfemale: "丘奇"
};
data["391"] = {
		cnfamily: "",
		cnmale: "半雪",
		cnfemale: "",
		enfamily: "哈姆雷",
		enmale: "",
		enfemale: "丹"
};
data["392"] = {
		cnfamily: "",
		cnmale: "山柳",
		cnfemale: "",
		enfamily: "汉森",
		enmale: "",
		enfemale: "杜威"
};
data["393"] = {
		cnfamily: "",
		cnmale: "谷雪",
		cnfemale: "",
		enfamily: "汉森",
		enmale: "",
		enfemale: "迪克"
};
data["394"] = {
		cnfamily: "",
		cnmale: "靖易",
		cnfemale: "",
		enfamily: "汉萨",
		enmale: "",
		enfemale: "道尔"
};
data["395"] = {
		cnfamily: "",
		cnmale: "代桃",
		cnfemale: "",
		enfamily: "哈代哈",
		enmale: "",
		enfemale: "盖伊"
};
data["396"] = {
		cnfamily: "",
		cnmale: "冷之",
		cnfemale: "",
		enfamily: "哈罗德",
		enmale: "",
		enfemale: "娜"
};
data["397"] = {
		cnfamily: "",
		cnmale: "盼秋",
		cnfemale: "",
		enfamily: "哈珀",
		enmale: "",
		enfemale: "休"
};
data["398"] = {
		cnfamily: "",
		cnmale: "秋寒",
		cnfemale: "",
		enfamily: "哈里曼",
		enmale: "",
		enfemale: "伊凡"
};
data["399"] = {
		cnfamily: "",
		cnmale: "慕蕊",
		cnfemale: "",
		enfamily: "哈林顿",
		enmale: "",
		enfemale: "乔"
};
data["400"] = {
		cnfamily: "",
		cnmale: "海亦",
		cnfemale: "",
		enfamily: "哈灵顿",
		enmale: "",
		enfemale: "梅"
};
data["401"] = {
		cnfamily: "",
		cnmale: "初晴",
		cnfemale: "",
		enfamily: "哈里森",
		enmale: "",
		enfemale: "永恒"
};
data["402"] = {
		cnfamily: "",
		cnmale: "盼旋",
		cnfemale: "",
		enfamily: "哈罗德",
		enmale: "",
		enfemale: "小乖"
};
data["403"] = {
		cnfamily: "",
		cnmale: "幼旋",
		cnfemale: "",
		enfamily: "哈里",
		enmale: "",
		enfemale: "香远"
};
data["404"] = {
		cnfamily: "",
		cnmale: "尔蓝",
		cnfemale: "",
		enfamily: "哈特",
		enmale: "",
		enfemale: "丽影"
};
data["405"] = {
		cnfamily: "",
		cnmale: "沛山",
		cnfemale: "",
		enfamily: "哈特",
		enmale: "",
		enfemale: "莎"
};
data["406"] = {
		cnfamily: "",
		cnmale: "代丝",
		cnfemale: "",
		enfamily: "哈维",
		enmale: "",
		enfemale: "丫头"
};
data["407"] = {
		cnfamily: "",
		cnmale: "觅松",
		cnfemale: "",
		enfamily: "霍索恩",
		enmale: "",
		enfemale: "阿木"
};
data["408"] = {
		cnfamily: "",
		cnmale: "夜白",
		cnfemale: "",
		enfamily: "海登",
		enmale: "",
		enfemale: "银铃"
};
data["409"] = {
		cnfamily: "",
		cnmale: "冷安",
		cnfemale: "",
		enfamily: "海伍德",
		enmale: "",
		enfemale: "小芳"
};
data["410"] = {
		cnfamily: "",
		cnmale: "灵竹",
		cnfemale: "",
		enfamily: "黑兹利",
		enmale: "",
		enfemale: "芳芳"
};
data["411"] = {
		cnfamily: "",
		cnmale: "醉薇",
		cnfemale: "",
		enfamily: "赫士列",
		enmale: "",
		enfemale: "小八"
};
data["412"] = {
		cnfamily: "",
		cnmale: "幼南",
		cnfemale: "",
		enfamily: "赫斯特",
		enmale: "",
		enfemale: "八酱"
};
data["413"] = {
		cnfamily: "",
		cnmale: "凡梦",
		cnfemale: "",
		enfamily: "娜",
		enmale: "",
		enfemale: "喵酱"
};
data["414"] = {
		cnfamily: "",
		cnmale: "尔曼",
		cnfemale: "",
		enfamily: "赫莉",
		enmale: "",
		enfemale: "小笨蛋"
};
data["415"] = {
		cnfamily: "",
		cnmale: "念波",
		cnfemale: "",
		enfamily: "海明威",
		enmale: "",
		enfemale: "coco"
};
data["416"] = {
		cnfamily: "",
		cnmale: "迎松",
		cnfemale: "",
		enfamily: "亨利",
		enmale: "",
		enfemale: "燕尾蝶"
};
data["417"] = {
		cnfamily: "",
		cnmale: "青寒",
		cnfemale: "",
		enfamily: "亨里埃",
		enmale: "",
		enfemale: "姑娘"
};
data["418"] = {
		cnfamily: "",
		cnmale: "笑天",
		cnfemale: "",
		enfamily: "赫伯特",
		enmale: "",
		enfemale: "小妞"
};
data["419"] = {
		cnfamily: "",
		cnmale: "问安",
		cnfemale: "",
		enfamily: "赫蒂",
		enmale: "",
		enfemale: "小小"
};
data["420"] = {
		cnfamily: "",
		cnmale: "雅阳",
		cnfemale: "",
		enfamily: "休利特",
		enmale: "",
		enfemale: "玲玲"
};
data["421"] = {
		cnfamily: "",
		cnmale: "友绿",
		cnfemale: "",
		enfamily: "希克斯",
		enmale: "",
		enfemale: "啊绫"
};
data["422"] = {
		cnfamily: "",
		cnmale: "南松",
		cnfemale: "",
		enfamily: "希尔",
		enmale: "",
		enfemale: "美人"
};
data["423"] = {
		cnfamily: "",
		cnmale: "诗云",
		cnfemale: "",
		enfamily: "霍布斯",
		enmale: "",
		enfemale: "妖精"
};
data["424"] = {
		cnfamily: "",
		cnmale: "飞风",
		cnfemale: "",
		enfamily: "霍布森",
		enmale: "",
		enfemale: "娜娜"
};
data["425"] = {
		cnfamily: "",
		cnmale: "寄灵",
		cnfemale: "",
		enfamily: "霍奇",
		enmale: "",
		enfemale: "小娜"
};
data["426"] = {
		cnfamily: "",
		cnmale: "书芹",
		cnfemale: "",
		enfamily: "霍奇森",
		enmale: "",
		enfemale: "莎"
};
data["427"] = {
		cnfamily: "",
		cnmale: "水云",
		cnfemale: "",
		enfamily: "霍姆斯",
		enmale: "",
		enfemale: "小鱼"
};
data["428"] = {
		cnfamily: "",
		cnmale: "访琴",
		cnfemale: "",
		enfamily: "?福尔",
		enmale: "",
		enfemale: "潇雨"
};
data["429"] = {
		cnfamily: "",
		cnmale: "谷波",
		cnfemale: "",
		enfamily: "霍尔特",
		enmale: "",
		enfemale: "猫猫"
};
data["430"] = {
		cnfamily: "",
		cnmale: "笑白",
		cnfemale: "",
		enfamily: "胡德",
		enmale: "",
		enfemale: "玄子"
};
data["431"] = {
		cnfamily: "",
		cnmale: "妙海",
		cnfemale: "",
		enfamily: "胡佛",
		enmale: "",
		enfemale: "国宝"
};
data["432"] = {
		cnfamily: "",
		cnmale: "孤风",
		cnfemale: "",
		enfamily: "霍普",
		enmale: "",
		enfemale: "熊猫"
};
data["433"] = {
		cnfamily: "",
		cnmale: "从安",
		cnfemale: "",
		enfamily: "霍普斯",
		enmale: "",
		enfemale: "蕊"
};
data["434"] = {
		cnfamily: "",
		cnmale: "绮彤",
		cnfemale: "",
		enfamily: "霍普金",
		enmale: "",
		enfemale: "小蕊"
};
data["435"] = {
		cnfamily: "",
		cnmale: "之玉",
		cnfemale: "",
		enfamily: "霍勒斯",
		enmale: "",
		enfemale: "七夜"
};
data["436"] = {
		cnfamily: "",
		cnmale: "雨珍",
		cnfemale: "",
		enfamily: "贺拉斯",
		enmale: "",
		enfemale: "笑笑"
};
data["437"] = {
		cnfamily: "",
		cnmale: "秋白",
		cnfemale: "",
		enfamily: "霍勒斯",
		enmale: "",
		enfemale: "泪"
};
data["438"] = {
		cnfamily: "",
		cnmale: "冰安",
		cnfemale: "",
		enfamily: "贺拉斯",
		enmale: "",
		enfemale: "星星"
};
data["439"] = {
		cnfamily: "",
		cnmale: "秋白",
		cnfemale: "",
		enfamily: "霍雷肖",
		enmale: "",
		enfemale: "淑女"
};
data["440"] = {
		cnfamily: "",
		cnmale: "南风",
		cnfemale: "",
		enfamily: "霍恩比",
		enmale: "",
		enfemale: "梦"
};
data["441"] = {
		cnfamily: "",
		cnmale: "醉山",
		cnfemale: "",
		enfamily: "霍齐亚",
		enmale: "",
		enfemale: "小梦"
};
data["442"] = {
		cnfamily: "",
		cnmale: "初彤",
		cnfemale: "",
		enfamily: "豪斯",
		enmale: "",
		enfemale: "晓梦"
};
data["443"] = {
		cnfamily: "",
		cnmale: "凝海",
		cnfemale: "",
		enfamily: "豪斯曼",
		enmale: "",
		enfemale: "茉莉"
};
data["444"] = {
		cnfamily: "",
		cnmale: "映波",
		cnfemale: "",
		enfamily: "休斯敦",
		enmale: "",
		enfemale: "牡丹"
};
data["445"] = {
		cnfamily: "",
		cnmale: "平文",
		cnfemale: "",
		enfamily: "霍华德",
		enmale: "",
		enfemale: "姗姗"
};
data["446"] = {
		cnfamily: "",
		cnmale: "青文",
		cnfemale: "",
		enfamily: "豪厄斯",
		enmale: "",
		enfemale: "小珊"
};
data["447"] = {
		cnfamily: "",
		cnmale: "寻菡",
		cnfemale: "",
		enfamily: "豪厄尔",
		enmale: "",
		enfemale: "天使"
};
data["448"] = {
		cnfamily: "",
		cnmale: "沛白",
		cnfemale: "",
		enfamily: "霍伊尔",
		enmale: "",
		enfemale: "咪咪"
};
data["449"] = {
		cnfamily: "",
		cnmale: "平灵",
		cnfemale: "",
		enfamily: "哈伯德",
		enmale: "",
		enfemale: "蜜蜜"
};
data["450"] = {
		cnfamily: "",
		cnmale: "芷烟",
		cnfemale: "",
		enfamily: "赫德森",
		enmale: "",
		enfemale: "小蜜"
};
data["451"] = {
		cnfamily: "",
		cnmale: "白易",
		cnfemale: "",
		enfamily: "哈金斯",
		enmale: "",
		enfemale: "小秘"
};
data["452"] = {
		cnfamily: "",
		cnmale: "尔阳",
		cnfemale: "",
		enfamily: "休",
		enmale: "",
		enfemale: "莫莫"
};
data["453"] = {
		cnfamily: "",
		cnmale: "怜烟",
		cnfemale: "",
		enfamily: "休士",
		enmale: "",
		enfemale: "沫沫"
};
data["454"] = {
		cnfamily: "",
		cnmale: "谷槐",
		cnfemale: "",
		enfamily: "休斯",
		enmale: "",
		enfemale: "么么"
};
data["455"] = {
		cnfamily: "",
		cnmale: "觅云",
		cnfemale: "",
		enfamily: "休姆",
		enmale: "",
		enfemale: "猫猫"
};
data["456"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "休谟",
		enmale: "",
		enfemale: "美子"
};
data["457"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "汉弗莱",
		enmale: "",
		enfemale: "雯雯"
};
data["458"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "亨廷顿",
		enmale: "",
		enfemale: "小雯"
};
data["459"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "赫特",
		enmale: "",
		enfemale: "晓雯"
};
data["460"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "赫胥黎",
		enmale: "",
		enfemale: "乐乐"
};
data["461"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "赫克利",
		enmale: "",
		enfemale: "小仙"
};
data["462"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "英格索",
		enmale: "",
		enfemale: "仙儿"
};
data["463"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "欧文",
		enmale: "",
		enfemale: "格格"
};
data["464"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "艾萨克",
		enmale: "",
		enfemale: "小倩"
};
data["465"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伊莎贝",
		enmale: "",
		enfemale: "倩倩"
};
data["466"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "艾塞亚",
		enmale: "",
		enfemale: "小茜"
};
data["467"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伊凡",
		enmale: "",
		enfemale: "小倩"
};
data["468"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰克",
		enmale: "",
		enfemale: "公主"
};
data["469"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰克逊",
		enmale: "",
		enfemale: "小诺"
};
data["470"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "雅各布",
		enmale: "",
		enfemale: "小"
};
data["471"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "詹姆斯",
		enmale: "",
		enfemale: "多多"
};
data["472"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "简",
		enmale: "",
		enfemale: "汐"
};
data["473"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "贾斯帕",
		enmale: "",
		enfemale: "羊羊"
};
data["474"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰姆斯",
		enmale: "",
		enfemale: "鬼鬼"
};
data["475"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "琼",
		enmale: "",
		enfemale: "小鬼"
};
data["476"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰斐逊",
		enmale: "",
		enfemale: "雪舞"
};
data["477"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰弗逊",
		enmale: "",
		enfemale: "琪琪"
};
data["478"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "詹斯",
		enmale: "",
		enfemale: "温柔"
};
data["479"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "詹金",
		enmale: "",
		enfemale: "小姐"
};
data["480"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "詹宁斯",
		enmale: "",
		enfemale: "雪舞"
};
data["481"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "珍妮",
		enmale: "",
		enfemale: "心儿"
};
data["482"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰里迈",
		enmale: "",
		enfemale: "欣儿"
};
data["483"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰里米",
		enmale: "",
		enfemale: "馨儿"
};
data["484"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰罗姆",
		enmale: "",
		enfemale: "小静"
};
data["485"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰里",
		enmale: "",
		enfemale: "虹虹"
};
data["486"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰西",
		enmale: "",
		enfemale: "傲雪"
};
data["487"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "吉姆",
		enmale: "",
		enfemale: "扶子"
};
data["488"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杰米",
		enmale: "",
		enfemale: "素素"
};
data["489"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "琼",
		enmale: "",
		enfemale: "雨滴"
};
data["490"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔布",
		enmale: "",
		enfemale: "momo"
};
data["491"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔",
		enmale: "",
		enfemale: "诺拉"
};
data["492"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔尔",
		enmale: "",
		enfemale: "yoyo"
};
data["493"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "约翰",
		enmale: "",
		enfemale: "小夏"
};
data["494"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "约翰尼",
		enmale: "",
		enfemale: "小嫣"
};
data["495"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "约翰逊",
		enmale: "",
		enfemale: "语嫣"
};
data["496"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "约翰斯",
		enmale: "",
		enfemale: "天涯"
};
data["497"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔纳",
		enmale: "",
		enfemale: "阿欣"
};
data["498"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔纳森",
		enmale: "",
		enfemale: "青青"
};
data["499"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "琼斯",
		enmale: "",
		enfemale: "大白"
};
data["500"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "琼森",
		enmale: "",
		enfemale: "小白"
};
data["501"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔丹",
		enmale: "",
		enfemale: "白白"
};
data["502"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "约瑟夫",
		enmale: "",
		enfemale: "樱花"
};
data["503"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔希",
		enmale: "",
		enfemale: "梧桐"
};
data["504"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔舒亚",
		enmale: "",
		enfemale: "月影"
};
data["505"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "焦尔",
		enmale: "",
		enfemale: "小花"
};
data["506"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "乔伊斯",
		enmale: "",
		enfemale: "小兔"
};
data["507"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "贾德",
		enmale: "",
		enfemale: "蘑菇"
};
data["508"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朱迪思",
		enmale: "",
		enfemale: "小丫"
};
data["509"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "贾德森",
		enmale: "",
		enfemale: "晨曦"
};
data["510"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朱莉娅",
		enmale: "",
		enfemale: "如梦"
};
data["511"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朱利安",
		enmale: "",
		enfemale: "囡囡"
};
data["512"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朱莉安",
		enmale: "",
		enfemale: "海棠"
};
data["513"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朱丽叶",
		enmale: "",
		enfemale: "婷婷"
};
data["514"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朱利叶",
		enmale: "",
		enfemale: "嘟嘟"
};
data["515"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯特",
		enmale: "",
		enfemale: "兔兔"
};
data["516"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯瑟琳",
		enmale: "",
		enfemale: "糖糖"
};
data["517"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯瑟琳",
		enmale: "",
		enfemale: "三月"
};
data["518"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "卡特琳",
		enmale: "",
		enfemale: "风铃"
};
data["519"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "基茨",
		enmale: "",
		enfemale: "落落"
};
data["520"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯利",
		enmale: "",
		enfemale: "薇薇安"
};
data["521"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯洛格",
		enmale: "",
		enfemale: "罂粟"
};
data["522"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯尔森",
		enmale: "",
		enfemale: "妮子"
};
data["523"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯尔文",
		enmale: "",
		enfemale: "丹丹"
};
data["524"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯南",
		enmale: "",
		enfemale: "一一"
};
data["525"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "肯尼迪",
		enmale: "",
		enfemale: "糖果"
};
data["526"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯佩尔",
		enmale: "",
		enfemale: "菲菲"
};
data["527"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凯恩斯",
		enmale: "",
		enfemale: "羽毛"
};
data["528"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "金斯利",
		enmale: "",
		enfemale: "萝莉"
};
data["529"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "基普林",
		enmale: "",
		enfemale: "落雪"
};
data["530"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "基特",
		enmale: "",
		enfemale: "花飞"
};
data["531"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "基托",
		enmale: "",
		enfemale: "暗香"
};
data["532"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "基蒂",
		enmale: "",
		enfemale: "夏天"
};
data["533"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉姆",
		enmale: "",
		enfemale: "小妖"
};
data["534"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "兰姆",
		enmale: "",
		enfemale: "淡淡"
};
data["535"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朗伯",
		enmale: "",
		enfemale: "浅浅"
};
data["536"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "兰伯特",
		enmale: "",
		enfemale: "小可"
};
data["537"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "兰斯洛",
		enmale: "",
		enfemale: "桃子"
};
data["538"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "兰登",
		enmale: "",
		enfemale: "香香"
};
data["539"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉金",
		enmale: "",
		enfemale: "小七"
};
data["540"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉铁摩",
		enmale: "",
		enfemale: "漫漫"
};
data["541"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "劳里",
		enmale: "",
		enfemale: "华莉丝"
};
data["542"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "劳",
		enmale: "",
		enfemale: "旺妲"
};
data["543"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "劳伦斯",
		enmale: "",
		enfemale: "温妮"
};
data["544"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "劳逊",
		enmale: "",
		enfemale: "芝妮雅"
};
data["545"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "劳森",
		enmale: "",
		enfemale: "伊芳"
};
data["546"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "李科克",
		enmale: "",
		enfemale: "莎拉"
};
data["547"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "利科克",
		enmale: "",
		enfemale: "若娜"
};
data["548"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "李",
		enmale: "",
		enfemale: "席梦娜"
};
data["549"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "利",
		enmale: "",
		enfemale: "苏菲亚"
};
data["550"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莱顿",
		enmale: "",
		enfemale: "丝柏凌"
};
data["551"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莉娜",
		enmale: "",
		enfemale: "苏珊"
};
data["552"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伦纳德",
		enmale: "",
		enfemale: "苏珊娜"
};
data["553"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "利奥波",
		enmale: "",
		enfemale: "苏西"
};
data["554"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "卢",
		enmale: "",
		enfemale: "苏珊"
};
data["555"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "刘易斯",
		enmale: "",
		enfemale: "泰贝莎"
};
data["556"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "刘易士",
		enmale: "",
		enfemale: "泰蜜"
};
data["557"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莉莉",
		enmale: "",
		enfemale: "特莉萨"
};
data["558"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "林肯",
		enmale: "",
		enfemale: "泰丝"
};
data["559"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "林德伯",
		enmale: "",
		enfemale: "席拉"
};
data["560"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "林塞",
		enmale: "",
		enfemale: "泰莉萨"
};
data["561"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "利齐",
		enmale: "",
		enfemale: "蒂法尼"
};
data["562"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "劳埃德",
		enmale: "",
		enfemale: "翠西"
};
data["563"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "洛克",
		enmale: "",
		enfemale: "翠丝特"
};
data["564"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伦敦",
		enmale: "",
		enfemale: "杜达"
};
data["565"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朗费罗",
		enmale: "",
		enfemale: "优拉"
};
data["566"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "朗曼",
		enmale: "",
		enfemale: "优娜"
};
data["567"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "路易",
		enmale: "",
		enfemale: "厄休拉"
};
data["568"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "路易斯",
		enmale: "",
		enfemale: "瓦勒莉"
};
data["569"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "路易莎",
		enmale: "",
		enfemale: "维娜"
};
data["570"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "路易丝",
		enmale: "",
		enfemale: "潘妮"
};
data["571"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗厄尔",
		enmale: "",
		enfemale: "菲莉帕"
};
data["572"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗威尔",
		enmale: "",
		enfemale: "菲碧"
};
data["573"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "卢卡斯",
		enmale: "",
		enfemale: "菲丽丝"
};
data["574"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "露西亚",
		enmale: "",
		enfemale: "珀莉"
};
data["575"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "卢修斯",
		enmale: "",
		enfemale: "波比"
};
data["576"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "露西",
		enmale: "",
		enfemale: "普莉玛"
};
data["577"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "卢克",
		enmale: "",
		enfemale: "昆娜"
};
data["578"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "利利",
		enmale: "",
		enfemale: "昆蒂娜"
};
data["579"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "林奇",
		enmale: "",
		enfemale: "瑞琪儿"
};
data["580"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "林德",
		enmale: "",
		enfemale: "瑞伊"
};
data["581"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "李顿",
		enmale: "",
		enfemale: "蕾娜塔"
};
data["582"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦克亚",
		enmale: "",
		enfemale: "蕾妮"
};
data["583"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦克阿",
		enmale: "",
		enfemale: "莉达"
};
data["584"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦考利",
		enmale: "",
		enfemale: "莉娃"
};
data["585"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "利顿",
		enmale: "",
		enfemale: "罗丝"
};
data["586"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦克唐",
		enmale: "",
		enfemale: "罗克珊"
};
data["587"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦金托",
		enmale: "",
		enfemale: "露比"
};
data["588"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦克弗",
		enmale: "",
		enfemale: "莎莉"
};
data["589"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦克米",
		enmale: "",
		enfemale: "莎洛姆"
};
data["590"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦克菲",
		enmale: "",
		enfemale: "莎曼撤"
};
data["591"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马奇",
		enmale: "",
		enfemale: "珊多拉"
};
data["592"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "玛吉",
		enmale: "",
		enfemale: "仙蒂"
};
data["593"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "玛拉基",
		enmale: "",
		enfemale: "莎拉"
};
data["594"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马伦",
		enmale: "",
		enfemale: "赛拉"
};
data["595"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马洛里",
		enmale: "",
		enfemale: "萨琳娜"
};
data["596"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马尔茨",
		enmale: "",
		enfemale: "沙伦"
};
data["597"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马尔萨",
		enmale: "",
		enfemale: "希拉"
};
data["598"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马尔兹",
		enmale: "",
		enfemale: "雪莉"
};
data["599"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "曼斯菲",
		enmale: "",
		enfemale: "希贝儿"
};
data["600"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马塞勒",
		enmale: "",
		enfemale: "玛拉"
};
data["601"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马库斯",
		enmale: "",
		enfemale: "蜜尔娜"
};
data["602"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "玛格丽",
		enmale: "",
		enfemale: "南希"
};
data["603"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马杰里",
		enmale: "",
		enfemale: "娜娥迷"
};
data["604"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "玛丽亚",
		enmale: "",
		enfemale: "纳塔利"
};
data["605"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马里恩",
		enmale: "",
		enfemale: "内丽"
};
data["606"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马乔里",
		enmale: "",
		enfemale: "妮可"
};
data["607"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马克",
		enmale: "",
		enfemale: "妮可拉"
};
data["608"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马洛",
		enmale: "",
		enfemale: "妮娜"
};
data["609"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马南",
		enmale: "",
		enfemale: "诺拉"
};
data["610"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马歇尔",
		enmale: "",
		enfemale: "诺维雅"
};
data["611"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马莎",
		enmale: "",
		enfemale: "妮蒂亚"
};
data["612"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马丁",
		enmale: "",
		enfemale: "欧尔佳"
};
data["613"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "玛丽",
		enmale: "",
		enfemale: "奥丽芙"
};
data["614"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "梅斯菲",
		enmale: "",
		enfemale: "佩格"
};
data["615"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马蒂尔",
		enmale: "",
		enfemale: "蓓姬"
};
data["616"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马修",
		enmale: "",
		enfemale: "帕梅拉"
};
data["617"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫德",
		enmale: "",
		enfemale: "潘多拉"
};
data["618"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫姆",
		enmale: "",
		enfemale: "赛拉"
};
data["619"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫里斯",
		enmale: "",
		enfemale: "佩儿"
};
data["620"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马克斯",
		enmale: "",
		enfemale: "玛丽"
};
data["621"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "马克斯",
		enmale: "",
		enfemale: "穆琳"
};
data["622"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "梅",
		enmale: "",
		enfemale: "梅薇思"
};
data["623"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦卡锡",
		enmale: "",
		enfemale: "玛可欣"
};
data["624"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "麦克唐",
		enmale: "",
		enfemale: "梅"
};
data["625"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "梅格",
		enmale: "",
		enfemale: "蒙莉萨"
};
data["626"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "梅尔维",
		enmale: "",
		enfemale: "玛希"
};
data["627"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "梅雷迪",
		enmale: "",
		enfemale: "梅莉"
};
data["628"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "梅瑞狄",
		enmale: "",
		enfemale: "米歇尔"
};
data["629"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "迈卡",
		enmale: "",
		enfemale: "蜜妮安"
};
data["630"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "迈克尔",
		enmale: "",
		enfemale: "穆得莉"
};
data["631"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "迈克尔",
		enmale: "",
		enfemale: "米兰达"
};
data["632"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "米切尔",
		enmale: "",
		enfemale: "蜜莉恩"
};
data["633"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "密德尔",
		enmale: "",
		enfemale: "茉伊拉"
};
data["634"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "迈克",
		enmale: "",
		enfemale: "茉莉"
};
data["635"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "米尔",
		enmale: "",
		enfemale: "梦娜"
};
data["636"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "米尔恩",
		enmale: "",
		enfemale: "莫妮卡"
};
data["637"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "米尔顿",
		enmale: "",
		enfemale: "穆丽儿"
};
data["638"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "明妮",
		enmale: "",
		enfemale: "朱蒂"
};
data["639"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫尔",
		enmale: "",
		enfemale: "朱莉娅"
};
data["640"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "蒙德",
		enmale: "",
		enfemale: "朱莉"
};
data["641"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "门罗",
		enmale: "",
		enfemale: "朱丽叶"
};
data["642"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "蒙哥马",
		enmale: "",
		enfemale: "卡玛"
};
data["643"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "穆尔",
		enmale: "",
		enfemale: "凯伦"
};
data["644"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫尔",
		enmale: "",
		enfemale: "凯瑟琳"
};
data["645"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "摩根",
		enmale: "",
		enfemale: "凯莉"
};
data["646"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "摩利",
		enmale: "",
		enfemale: "金百莉"
};
data["647"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫里斯",
		enmale: "",
		enfemale: "吉蒂"
};
data["648"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫里森",
		enmale: "",
		enfemale: "莉娜"
};
data["649"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫尔斯",
		enmale: "",
		enfemale: "丽莲"
};
data["650"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "摩顿",
		enmale: "",
		enfemale: "莉萨"
};
data["651"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫尔顿",
		enmale: "",
		enfemale: "莉斯"
};
data["652"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "摩西",
		enmale: "",
		enfemale: "洛兰"
};
data["653"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫特利",
		enmale: "",
		enfemale: "琳"
};
data["654"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莫尔顿",
		enmale: "",
		enfemale: "玛佩尔"
};
data["655"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "默里",
		enmale: "",
		enfemale: "玛琪"
};
data["656"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "内厄姆",
		enmale: "",
		enfemale: "玛吉"
};
data["657"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "南希",
		enmale: "",
		enfemale: "梅蜜"
};
data["658"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "纳撒尼",
		enmale: "",
		enfemale: "曼蒂"
};
data["659"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尼达姆",
		enmale: "",
		enfemale: "玛西亚"
};
data["660"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尼赫迈",
		enmale: "",
		enfemale: "玛丽安"
};
data["661"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "内尔",
		enmale: "",
		enfemale: "玛丽亚"
};
data["662"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "内利",
		enmale: "",
		enfemale: "马丽娜"
};
data["663"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奈尔孙",
		enmale: "",
		enfemale: "玛乔丽"
};
data["664"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "纽曼",
		enmale: "",
		enfemale: "马莎"
};
data["665"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "牛顿",
		enmale: "",
		enfemale: "玛蒂娜"
};
data["666"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尼古拉",
		enmale: "",
		enfemale: "汉纳"
};
data["667"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尼科斯",
		enmale: "",
		enfemale: "哈莉特"
};
data["668"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尼科尔",
		enmale: "",
		enfemale: "赫瑟尔"
};
data["669"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尼克",
		enmale: "",
		enfemale: "赫蒂"
};
data["670"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尼科尔",
		enmale: "",
		enfemale: "海伦"
};
data["671"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尼克松",
		enmale: "",
		enfemale: "希尔达"
};
data["672"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "诺厄",
		enmale: "",
		enfemale: "汉妮"
};
data["673"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "诺埃尔",
		enmale: "",
		enfemale: "艾娜"
};
data["674"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "诺拉",
		enmale: "",
		enfemale: "艾琳"
};
data["675"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "娜拉",
		enmale: "",
		enfemale: "爱莉丝"
};
data["676"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "诺里斯",
		enmale: "",
		enfemale: "艾尔玛"
};
data["677"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "诺思",
		enmale: "",
		enfemale: "艾薇"
};
data["678"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "诺顿",
		enmale: "",
		enfemale: "杰奎琳"
};
data["679"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "诺伊斯",
		enmale: "",
		enfemale: "婕咪"
};
data["680"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥巴代",
		enmale: "",
		enfemale: "珍"
};
data["681"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥卡西",
		enmale: "",
		enfemale: "珍妮特"
};
data["682"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥凯西",
		enmale: "",
		enfemale: "珍尼丝"
};
data["683"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥卡姆",
		enmale: "",
		enfemale: "琴"
};
data["684"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥康纳",
		enmale: "",
		enfemale: "姬儿"
};
data["685"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥利弗",
		enmale: "",
		enfemale: "乔"
};
data["686"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥尼尔",
		enmale: "",
		enfemale: "琼"
};
data["687"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥尼恩",
		enmale: "",
		enfemale: "阿芙拉"
};
data["688"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥兰多",
		enmale: "",
		enfemale: "阿加莎"
};
data["689"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奥斯卡",
		enmale: "",
		enfemale: "艾丽斯"
};
data["690"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "欧文",
		enmale: "",
		enfemale: "爱玛"
};
data["691"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "帕尔默",
		enmale: "",
		enfemale: "阿尔娃"
};
data["692"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "潘西",
		enmale: "",
		enfemale: "艾咪"
};
data["693"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "帕克",
		enmale: "",
		enfemale: "安妮"
};
data["694"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "帕特里",
		enmale: "",
		enfemale: "安娜"
};
data["695"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "佩德",
		enmale: "",
		enfemale: "艾谱莉"
};
data["696"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "佩特",
		enmale: "",
		enfemale: "艾琳娜"
};
data["697"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "佩兴斯",
		enmale: "",
		enfemale: "阿西娜"
};
data["698"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "帕特里",
		enmale: "",
		enfemale: "奥德丽"
};
data["699"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "保罗",
		enmale: "",
		enfemale: "芭芭拉"
};
data["700"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "皮科尔",
		enmale: "",
		enfemale: "贝琳达"
};
data["701"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "皮尔逊",
		enmale: "",
		enfemale: "贝拉"
};
data["702"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "佩格",
		enmale: "",
		enfemale: "柏莎"
};
data["703"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "佩吉",
		enmale: "",
		enfemale: "百丽儿"
};
data["704"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "佩恩",
		enmale: "",
		enfemale: "贝丝"
};
data["705"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "皮普斯",
		enmale: "",
		enfemale: "贝芙"
};
data["706"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "佩皮斯",
		enmale: "",
		enfemale: "布兰琪"
};
data["707"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "珀金",
		enmale: "",
		enfemale: "卡米拉"
};
data["708"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "彼得",
		enmale: "",
		enfemale: "坎蒂丝"
};
data["709"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "佩蒂",
		enmale: "",
		enfemale: "卡拉"
};
data["710"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "菲利蒙",
		enmale: "",
		enfemale: "卡萝"
};
data["711"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "菲利普",
		enmale: "",
		enfemale: "卡罗琳"
};
data["712"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "皮尔斯",
		enmale: "",
		enfemale: "凯瑟琳"
};
data["713"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "皮古",
		enmale: "",
		enfemale: "凯丝"
};
data["714"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "庇古",
		enmale: "",
		enfemale: "夏洛特"
};
data["715"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "皮特曼",
		enmale: "",
		enfemale: "绮莉"
};
data["716"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "波",
		enmale: "",
		enfemale: "克洛怡"
};
data["717"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "波利特",
		enmale: "",
		enfemale: "克莱儿"
};
data["718"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "波利",
		enmale: "",
		enfemale: "克莱拉"
};
data["719"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "波普",
		enmale: "",
		enfemale: "卡洛儿"
};
data["720"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "蒲柏",
		enmale: "",
		enfemale: "黛西"
};
data["721"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "庞德",
		enmale: "",
		enfemale: "黛儿"
};
data["722"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "鲍威尔",
		enmale: "",
		enfemale: "黛娜"
};
data["723"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "普赖斯",
		enmale: "",
		enfemale: "黛芙妮"
};
data["724"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "普里斯",
		enmale: "",
		enfemale: "达莲娜"
};
data["725"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "普里斯",
		enmale: "",
		enfemale: "潼恩"
};
data["726"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "普里特",
		enmale: "",
		enfemale: "黛碧"
};
data["727"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "帕利策",
		enmale: "",
		enfemale: "迪得莉"
};
data["728"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "普里策",
		enmale: "",
		enfemale: "迪丽雅"
};
data["729"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "普兰",
		enmale: "",
		enfemale: "丹尼丝"
};
data["730"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "普尔曼",
		enmale: "",
		enfemale: ""
};
data["731"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "奎勒",
		enmale: "",
		enfemale: ""
};
data["732"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉格伦",
		enmale: "",
		enfemale: ""
};
data["733"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗利",
		enmale: "",
		enfemale: ""
};
data["734"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉尔夫",
		enmale: "",
		enfemale: ""
};
data["735"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉曼",
		enmale: "",
		enfemale: ""
};
data["736"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "冉斯登",
		enmale: "",
		enfemale: ""
};
data["737"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉姆斯",
		enmale: "",
		enfemale: ""
};
data["738"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉菲尔",
		enmale: "",
		enfemale: ""
};
data["739"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉菲尔",
		enmale: "",
		enfemale: ""
};
data["740"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "瑞利",
		enmale: "",
		enfemale: ""
};
data["741"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "雷利",
		enmale: "",
		enfemale: ""
};
data["742"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "雷蒙德",
		enmale: "",
		enfemale: ""
};
data["743"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "里德",
		enmale: "",
		enfemale: ""
};
data["744"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "丽贝卡",
		enmale: "",
		enfemale: ""
};
data["745"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "里德",
		enmale: "",
		enfemale: ""
};
data["746"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "雷诺兹",
		enmale: "",
		enfemale: ""
};
data["747"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗兹",
		enmale: "",
		enfemale: ""
};
data["748"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "里斯",
		enmale: "",
		enfemale: ""
};
data["749"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "理嘉图",
		enmale: "",
		enfemale: ""
};
data["750"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "李嘉图",
		enmale: "",
		enfemale: ""
};
data["751"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "理查",
		enmale: "",
		enfemale: ""
};
data["752"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "理查兹",
		enmale: "",
		enfemale: ""
};
data["753"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "理查森",
		enmale: "",
		enfemale: ""
};
data["754"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗布",
		enmale: "",
		enfemale: ""
};
data["755"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗宾斯",
		enmale: "",
		enfemale: ""
};
data["756"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗伯特",
		enmale: "",
		enfemale: ""
};
data["757"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗伯逊",
		enmale: "",
		enfemale: ""
};
data["758"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗宾",
		enmale: "",
		enfemale: ""
};
data["759"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗宾森",
		enmale: "",
		enfemale: ""
};
data["760"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗宾逊",
		enmale: "",
		enfemale: ""
};
data["761"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "洛克菲",
		enmale: "",
		enfemale: ""
};
data["762"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗吉尔",
		enmale: "",
		enfemale: ""
};
data["763"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗杰",
		enmale: "",
		enfemale: ""
};
data["764"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗兰",
		enmale: "",
		enfemale: ""
};
data["765"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗密欧",
		enmale: "",
		enfemale: ""
};
data["766"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗斯福",
		enmale: "",
		enfemale: ""
};
data["767"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗莎",
		enmale: "",
		enfemale: ""
};
data["768"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗塞蒂",
		enmale: "",
		enfemale: ""
};
data["769"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗瑟琳",
		enmale: "",
		enfemale: ""
};
data["770"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗斯",
		enmale: "",
		enfemale: ""
};
data["771"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗塞蒂",
		enmale: "",
		enfemale: ""
};
data["772"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗赛蒂",
		enmale: "",
		enfemale: ""
};
data["773"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗伊",
		enmale: "",
		enfemale: ""
};
data["774"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "鲁道夫",
		enmale: "",
		enfemale: ""
};
data["775"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "腊斯克",
		enmale: "",
		enfemale: ""
};
data["776"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉斯金",
		enmale: "",
		enfemale: ""
};
data["777"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗斯金",
		enmale: "",
		enfemale: ""
};
data["778"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "罗素",
		enmale: "",
		enfemale: ""
};
data["779"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉塞尔",
		enmale: "",
		enfemale: ""
};
data["780"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "鲁思",
		enmale: "",
		enfemale: ""
};
data["781"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "卢瑟福",
		enmale: "",
		enfemale: ""
};
data["782"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "拉瑟福",
		enmale: "",
		enfemale: ""
};
data["783"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "塞恩思",
		enmale: "",
		enfemale: ""
};
data["784"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "森次巴",
		enmale: "",
		enfemale: ""
};
data["785"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "索尔兹",
		enmale: "",
		enfemale: ""
};
data["786"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨莉",
		enmale: "",
		enfemale: ""
};
data["787"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨洛美",
		enmale: "",
		enfemale: ""
};
data["788"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨姆",
		enmale: "",
		enfemale: ""
};
data["789"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨姆森",
		enmale: "",
		enfemale: ""
};
data["790"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "塞缪尔",
		enmale: "",
		enfemale: ""
};
data["791"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "桑德",
		enmale: "",
		enfemale: ""
};
data["792"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "桑迪",
		enmale: "",
		enfemale: ""
};
data["793"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨皮尔",
		enmale: "",
		enfemale: ""
};
data["794"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨拉",
		enmale: "",
		enfemale: ""
};
data["795"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨洛扬",
		enmale: "",
		enfemale: ""
};
data["796"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨罗扬",
		enmale: "",
		enfemale: ""
};
data["797"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沙逊",
		enmale: "",
		enfemale: ""
};
data["798"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "索尔",
		enmale: "",
		enfemale: ""
};
data["799"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "索耶",
		enmale: "",
		enfemale: ""
};
data["800"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨克斯",
		enmale: "",
		enfemale: ""
};
data["801"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯科特",
		enmale: "",
		enfemale: ""
};
data["802"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "司各脱",
		enmale: "",
		enfemale: ""
};
data["803"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯克利",
		enmale: "",
		enfemale: ""
};
data["804"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "西尼尔",
		enmale: "",
		enfemale: ""
};
data["805"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "瑟维斯",
		enmale: "",
		enfemale: ""
};
data["806"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "莎士比",
		enmale: "",
		enfemale: ""
};
data["807"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "夏普",
		enmale: "",
		enfemale: ""
};
data["808"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "肖",
		enmale: "",
		enfemale: ""
};
data["809"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "雪莱",
		enmale: "",
		enfemale: ""
};
data["810"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "谢利",
		enmale: "",
		enfemale: ""
};
data["811"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "谢里登",
		enmale: "",
		enfemale: ""
};
data["812"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "谢立丹",
		enmale: "",
		enfemale: ""
};
data["813"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "舍伍德",
		enmale: "",
		enfemale: ""
};
data["814"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "悉尼",
		enmale: "",
		enfemale: ""
};
data["815"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "锡特尼",
		enmale: "",
		enfemale: ""
};
data["816"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "赛拉斯",
		enmale: "",
		enfemale: ""
};
data["817"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "西蒙",
		enmale: "",
		enfemale: ""
};
data["818"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "辛普森",
		enmale: "",
		enfemale: ""
};
data["819"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "辛克莱",
		enmale: "",
		enfemale: ""
};
data["820"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "史沫特",
		enmale: "",
		enfemale: ""
};
data["821"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯梅德",
		enmale: "",
		enfemale: ""
};
data["822"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "史密斯",
		enmale: "",
		enfemale: ""
};
data["823"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯莫利",
		enmale: "",
		enfemale: ""
};
data["824"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯摩莱",
		enmale: "",
		enfemale: ""
};
data["825"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯诺",
		enmale: "",
		enfemale: ""
};
data["826"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨默菲",
		enmale: "",
		enfemale: ""
};
data["827"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "索莫费",
		enmale: "",
		enfemale: ""
};
data["828"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "索菲娅",
		enmale: "",
		enfemale: ""
};
data["829"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "索菲",
		enmale: "",
		enfemale: ""
};
data["830"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "索锡",
		enmale: "",
		enfemale: ""
};
data["831"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "骚塞",
		enmale: "",
		enfemale: ""
};
data["832"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯潘塞",
		enmale: "",
		enfemale: ""
};
data["833"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯宾塞",
		enmale: "",
		enfemale: ""
};
data["834"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯彭德",
		enmale: "",
		enfemale: ""
};
data["835"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯潘塞",
		enmale: "",
		enfemale: ""
};
data["836"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯宾塞",
		enmale: "",
		enfemale: ""
};
data["837"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯普林",
		enmale: "",
		enfemale: ""
};
data["838"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯蒂尔",
		enmale: "",
		enfemale: ""
};
data["839"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯梯尔",
		enmale: "",
		enfemale: ""
};
data["840"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯坦贝",
		enmale: "",
		enfemale: ""
};
data["841"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯坦培",
		enmale: "",
		enfemale: ""
};
data["842"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯特拉",
		enmale: "",
		enfemale: ""
};
data["843"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯蒂芬",
		enmale: "",
		enfemale: ""
};
data["844"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "史蒂芬",
		enmale: "",
		enfemale: ""
};
data["845"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯蒂芬",
		enmale: "",
		enfemale: ""
};
data["846"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "史蒂文",
		enmale: "",
		enfemale: ""
};
data["847"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "史迪威",
		enmale: "",
		enfemale: ""
};
data["848"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯通",
		enmale: "",
		enfemale: ""
};
data["849"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯托",
		enmale: "",
		enfemale: ""
};
data["850"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯特雷",
		enmale: "",
		enfemale: ""
};
data["851"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯特朗",
		enmale: "",
		enfemale: ""
};
data["852"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "司徒雷",
		enmale: "",
		enfemale: ""
};
data["853"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯图尔",
		enmale: "",
		enfemale: ""
};
data["854"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨里",
		enmale: "",
		enfemale: ""
};
data["855"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "萨利",
		enmale: "",
		enfemale: ""
};
data["856"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "苏珊",
		enmale: "",
		enfemale: ""
};
data["857"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "苏珊娜",
		enmale: "",
		enfemale: ""
};
data["858"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯威特",
		enmale: "",
		enfemale: ""
};
data["859"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯维夫",
		enmale: "",
		enfemale: ""
};
data["860"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯威夫",
		enmale: "",
		enfemale: ""
};
data["861"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "斯温伯",
		enmale: "",
		enfemale: ""
};
data["862"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "史文朋",
		enmale: "",
		enfemale: ""
};
data["863"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "西蒙斯",
		enmale: "",
		enfemale: ""
};
data["864"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "泰特",
		enmale: "",
		enfemale: ""
};
data["865"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "泰勒",
		enmale: "",
		enfemale: ""
};
data["866"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "特德",
		enmale: "",
		enfemale: ""
};
data["867"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "坦普尔",
		enmale: "",
		enfemale: ""
};
data["868"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "坦尼森",
		enmale: "",
		enfemale: ""
};
data["869"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "丁尼生",
		enmale: "",
		enfemale: ""
};
data["870"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "特里",
		enmale: "",
		enfemale: ""
};
data["871"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "撒克里",
		enmale: "",
		enfemale: ""
};
data["872"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "西奥多",
		enmale: "",
		enfemale: ""
};
data["873"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "特里萨",
		enmale: "",
		enfemale: ""
};
data["874"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "托马斯",
		enmale: "",
		enfemale: ""
};
data["875"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "汤普森",
		enmale: "",
		enfemale: ""
};
data["876"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "汤姆森",
		enmale: "",
		enfemale: ""
};
data["877"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "索罗",
		enmale: "",
		enfemale: ""
};
data["878"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "梭洛",
		enmale: "",
		enfemale: ""
};
data["879"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "桑代克",
		enmale: "",
		enfemale: ""
};
data["880"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "蒂莫西",
		enmale: "",
		enfemale: ""
};
data["881"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "泰特斯",
		enmale: "",
		enfemale: ""
};
data["882"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "托拜厄",
		enmale: "",
		enfemale: ""
};
data["883"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "托比",
		enmale: "",
		enfemale: ""
};
data["884"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "托兰",
		enmale: "",
		enfemale: ""
};
data["885"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "汤姆",
		enmale: "",
		enfemale: ""
};
data["886"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "汤姆林",
		enmale: "",
		enfemale: ""
};
data["887"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "汤米",
		enmale: "",
		enfemale: ""
};
data["888"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "托尼",
		enmale: "",
		enfemale: ""
};
data["889"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "图尔斯",
		enmale: "",
		enfemale: ""
};
data["890"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "陶特",
		enmale: "",
		enfemale: ""
};
data["891"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "托因比",
		enmale: "",
		enfemale: ""
};
data["892"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "特雷西",
		enmale: "",
		enfemale: ""
};
data["893"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "特里维",
		enmale: "",
		enfemale: ""
};
data["894"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "特罗洛",
		enmale: "",
		enfemale: ""
};
data["895"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "杜鲁门",
		enmale: "",
		enfemale: ""
};
data["896"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "特纳",
		enmale: "",
		enfemale: ""
};
data["897"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "塔特尔",
		enmale: "",
		enfemale: ""
};
data["898"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "吐温",
		enmale: "",
		enfemale: ""
};
data["899"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "特温",
		enmale: "",
		enfemale: ""
};
data["900"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "泰勒",
		enmale: "",
		enfemale: ""
};
data["901"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尤利塞",
		enmale: "",
		enfemale: ""
};
data["902"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "瓦伦丁",
		enmale: "",
		enfemale: ""
};
data["903"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "范",
		enmale: "",
		enfemale: ""
};
data["904"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伏恩",
		enmale: "",
		enfemale: ""
};
data["905"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "维布伦",
		enmale: "",
		enfemale: ""
};
data["906"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "凡勃伦",
		enmale: "",
		enfemale: ""
};
data["907"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "维克托",
		enmale: "",
		enfemale: ""
};
data["908"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "文森特",
		enmale: "",
		enfemale: ""
};
data["909"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "瓦奥莱",
		enmale: "",
		enfemale: ""
};
data["910"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "弗吉尼",
		enmale: "",
		enfemale: ""
};
data["911"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃格特",
		enmale: "",
		enfemale: ""
};
data["912"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "瓦格纳",
		enmale: "",
		enfemale: ""
};
data["913"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃克",
		enmale: "",
		enfemale: ""
};
data["914"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃克利",
		enmale: "",
		enfemale: ""
};
data["915"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "华莱土",
		enmale: "",
		enfemale: ""
};
data["916"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃利斯",
		enmale: "",
		enfemale: ""
};
data["917"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃波尔",
		enmale: "",
		enfemale: ""
};
data["918"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃尔什",
		enmale: "",
		enfemale: ""
};
data["919"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃尔特",
		enmale: "",
		enfemale: ""
};
data["920"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃尔顿",
		enmale: "",
		enfemale: ""
};
data["921"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃德",
		enmale: "",
		enfemale: ""
};
data["922"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃纳",
		enmale: "",
		enfemale: ""
};
data["923"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃伦",
		enmale: "",
		enfemale: ""
};
data["924"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "华盛顿",
		enmale: "",
		enfemale: ""
};
data["925"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃特",
		enmale: "",
		enfemale: ""
};
data["926"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃特斯",
		enmale: "",
		enfemale: ""
};
data["927"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "瓦特",
		enmale: "",
		enfemale: ""
};
data["928"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "韦布",
		enmale: "",
		enfemale: ""
};
data["929"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "韦伯斯",
		enmale: "",
		enfemale: ""
};
data["930"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "韦尔斯",
		enmale: "",
		enfemale: ""
};
data["931"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "韦斯利",
		enmale: "",
		enfemale: ""
};
data["932"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "惠特利",
		enmale: "",
		enfemale: ""
};
data["933"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "惠勒",
		enmale: "",
		enfemale: ""
};
data["934"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "惠特",
		enmale: "",
		enfemale: ""
};
data["935"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "怀特黑",
		enmale: "",
		enfemale: ""
};
data["936"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "怀特海",
		enmale: "",
		enfemale: ""
};
data["937"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "惠特曼",
		enmale: "",
		enfemale: ""
};
data["938"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "惠蒂尔",
		enmale: "",
		enfemale: ""
};
data["939"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "怀特",
		enmale: "",
		enfemale: ""
};
data["940"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威尔科",
		enmale: "",
		enfemale: ""
};
data["941"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "魏尔德",
		enmale: "",
		enfemale: ""
};
data["942"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "王尔德",
		enmale: "",
		enfemale: ""
};
data["943"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "怀尔德",
		enmale: "",
		enfemale: ""
};
data["944"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威廉明",
		enmale: "",
		enfemale: ""
};
data["945"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威尔",
		enmale: "",
		enfemale: ""
};
data["946"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威拉德",
		enmale: "",
		enfemale: ""
};
data["947"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威廉",
		enmale: "",
		enfemale: ""
};
data["948"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威尔莫",
		enmale: "",
		enfemale: ""
};
data["949"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威尔逊",
		enmale: "",
		enfemale: ""
};
data["950"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "温泽",
		enmale: "",
		enfemale: ""
};
data["951"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "温莎",
		enmale: "",
		enfemale: ""
};
data["952"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威尼弗",
		enmale: "",
		enfemale: ""
};
data["953"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃德豪",
		enmale: "",
		enfemale: ""
};
data["954"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃尔夫",
		enmale: "",
		enfemale: ""
};
data["955"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "渥拉斯",
		enmale: "",
		enfemale: ""
};
data["956"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃拉斯",
		enmale: "",
		enfemale: ""
};
data["957"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伍德",
		enmale: "",
		enfemale: ""
};
data["958"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伍尔夫",
		enmale: "",
		enfemale: ""
};
data["959"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伍莱",
		enmale: "",
		enfemale: ""
};
data["960"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "伍利",
		enmale: "",
		enfemale: ""
};
data["961"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "沃兹沃",
		enmale: "",
		enfemale: ""
};
data["962"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "渥兹华",
		enmale: "",
		enfemale: ""
};
data["963"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "华兹沃",
		enmale: "",
		enfemale: ""
};
data["964"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "赖特",
		enmale: "",
		enfemale: ""
};
data["965"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "怀阿特",
		enmale: "",
		enfemale: ""
};
data["966"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "怀亚特",
		enmale: "",
		enfemale: ""
};
data["967"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "魏克利",
		enmale: "",
		enfemale: ""
};
data["968"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "威克利",
		enmale: "",
		enfemale: ""
};
data["969"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "怀尔德",
		enmale: "",
		enfemale: ""
};
data["970"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "耶鲁",
		enmale: "",
		enfemale: ""
};
data["971"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "耶尔",
		enmale: "",
		enfemale: ""
};
data["972"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "耶茨",
		enmale: "",
		enfemale: ""
};
data["973"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "夏芝",
		enmale: "",
		enfemale: ""
};
data["974"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "耶基斯",
		enmale: "",
		enfemale: ""
};
data["975"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "扬",
		enmale: "",
		enfemale: ""
};
data["976"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "尤尔",
		enmale: "",
		enfemale: ""
};
data["977"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "扎卡赖",
		enmale: "",
		enfemale: ""
};
data["978"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "赞格威",
		enmale: "",
		enfemale: ""
};
data["979"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "泽卡赖",
		enmale: "",
		enfemale: ""
};
data["980"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "泽弗奈",
		enmale: "",
		enfemale: ""
};
data["981"] = {
		cnfamily: "",
		cnmale: "",
		cnfemale: "",
		enfamily: "齐默尔",
		enmale: "",
		enfemale: ""
};
module.exports = data;

cc._RF.pop();
},{}],"NetworkContentPanel":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ec05fRrD1NG46rxNkP4W0Ic', 'NetworkContentPanel');
// Scripts/UI/Component/NetworkContentPanel.js

"use strict";

var UITools = require("UITools");
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {
        // console.log("onLoad");
        this.delayTime = 25;
    },

    onInit: function onInit() {
        this.scheduleOnce(this.onClosePanel, this.delayTime);
    },

    // 启用面板
    onEnable: function onEnable() {
        // console.log("onEnable");
        this.node.on(cc.Node.EventType.TOUCH_END, this.stopPropagationHandler, this); // 阻止鼠标穿透
    },

    // 阻止面板穿透
    stopPropagationHandler: function stopPropagationHandler(evt) {
        evt.stopPropagation();
    },

    // 禁用面板
    onDisable: function onDisable() {
        // console.log("onDisable");
        this.unschedule(this.onClosePanel, this);
        cc.removeSelf();
    },

    // 关闭面板
    onClosePanel: function onClosePanel() {
        UITools.GamePublicTipsLabel("网络错误,连接失败");
        this.node.active = false;
    }

});

cc._RF.pop();
},{"UITools":"UITools"}],"NodeScale":[function(require,module,exports){
"use strict";
cc._RF.push(module, '5dfcdMyq1RAbZE1E5w60JuG', 'NodeScale');
// Scripts/Other/NodeScale.js

'use strict';

cc.Class({
    extends: cc.Component,

    properties: {
        pressedScale: 1,
        transDuration: 0
    },

    // use this for initialization
    onLoad: function onLoad() {
        var self = this;
        self.initScale = this.node.scale;
        self.scaleDownAction = cc.scaleTo(self.transDuration, self.pressedScale);
        self.scaleUpAction = cc.scaleTo(self.transDuration, self.initScale);
        function onTouchDown(event) {
            this.stopAllActions();
            this.runAction(self.scaleDownAction);
        }
        function onTouchUp(event) {
            this.stopAllActions();
            this.runAction(self.scaleUpAction);
        }
        this.node.on('touchstart', onTouchDown, this.node);
        this.node.on('touchend', onTouchUp, this.node);
        this.node.on('touchcancel', onTouchUp, this.node);
    }

});

cc._RF.pop();
},{}],"Pay":[function(require,module,exports){
"use strict";
cc._RF.push(module, '55ec0r7QdZGsrGqJ2LwtIRM', 'Pay');
// Scripts/GameData/config/Pay.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Price: "6",
		Gems: "60000",
		Days: "0",
		Icon: "2007",
		hot: "",
		Tips: ""
};
data["2"] = {
		PID: "2",
		Price: "30",
		Gems: "300000",
		Days: "0",
		Icon: "2007",
		hot: "",
		Tips: ""
};
data["3"] = {
		PID: "3",
		Price: "68",
		Gems: "680000",
		Days: "0",
		Icon: "2007",
		hot: "",
		Tips: ""
};
data["4"] = {
		PID: "4",
		Price: "128",
		Gems: "1280000",
		Days: "0",
		Icon: "2007",
		hot: "",
		Tips: ""
};
data["5"] = {
		PID: "5",
		Price: "328",
		Gems: "3280000",
		Days: "0",
		Icon: "2007",
		hot: "",
		Tips: ""
};
data["6"] = {
		PID: "6",
		Price: "648",
		Gems: "6480000",
		Days: "0",
		Icon: "2007",
		hot: "",
		Tips: ""
};
module.exports = data;

cc._RF.pop();
},{}],"PlayHistoryFightCardPanelJS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '0bfd5UEvkBAWo2YSbEUiUW0', 'PlayHistoryFightCardPanelJS');
// Scripts/UI/HistoryPlayCards/PlayHistoryFightCardPanelJS.js

"use strict";

var UITools = require('UITools');
var BaseUIPanel = require("BaseUIPanel");
var Config = require("Config");
var TableFlags = Config.TableFlags;
var moment = require("Moment");
var PokerJS = require('PokerJS');
var CrdPokerConfig = PokerJS.CRD_POKER;

// 播放类型
var PLAY_TYPE_CONFIG = cc.Enum({
    NONE: 0,
    PLAY_TYPE: 1, //播放
    PAUSE_TYPE: 2 });
var ZORDER_SHOW = cc.Enum({
    NONE: 0,
    ONE: 1,
    TWO: 2,
    THREE: 3,
    FOUR: 4,
    FIVE: 5,
    SIX: 6,
    SEVEN: 7
});
// 播放间隔
var PLAYER_COUNT = 9; //玩家数量
// const PLAY_INTERVAL = 100; //时间间隔毫秒
var ACTION_TIME = 2; //行动时间 毫秒

cc.Class({
    extends: BaseUIPanel,
    properties: {

        panelBg: cc.Sprite,
        playerFightObj: cc.Prefab,
        selfFightObj: cc.Prefab,
        playerInfoList: [cc.Node], //玩家1 到 9节点
        publicCardList: [cc.Node], //公用牌节点
        shareGroup: cc.Node, //分享按钮组
        shareBtn: cc.Button, //分享按钮（ios）
        palyBtn: cc.Button, //播放按钮
        pauseBtn: cc.Button, //暂停按钮
        playCtrlBtnGroup: [cc.Button], //播放控制按钮组 翻牌，转牌，河牌
        timeLabel: cc.Label, //时间显示
        progressIcon: cc.ProgressBar, //进度条遮罩
        moneyPoolList: [],
        MoneyPoolLayer_top: cc.Node, //主池和边池的显示层
        MoneyPoolLayer_bottom: cc.Node,
        MoneyPool: cc.Prefab, //money显示
        // 动画层
        Animationlayer: cc.Node, //动画层
        RoundOverMask: cc.Sprite, //结算显示手牌遮罩
        playerSeatContainer: cc.Node,
        infoLabel: cc.Label, //盲注显示
        PubCrdNd: cc.Node, //公共牌节点
        moneyPoolContainer: cc.Node,
        uiContainer_top: cc.Node,
        uiContainer_bottom: cc.Node,
        playCtrlNode: cc.Node },

    onSetHistoryData: function onSetHistoryData(data) {
        this.onSetPlayData(data);
    },

    // 获取玩家的控制器和节点
    getPlayerInfoCtrlAndNode: function getPlayerInfoCtrlAndNode(uid) {
        var curObj;
        for (var i = 0; i < this.fightInfoJSList.length; i++) {
            curObj = this.fightInfoJSList[i];
            if (curObj.targetCtrl.curPlayerData) {
                if (uid == curObj.targetCtrl.curPlayerData.uid) {
                    return curObj;
                }
            }
        }
        return null;
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.PositionConfig = { "2": [0, 1, 0, 0, 0, 0, 1, 0, 0], "3": [0, 1, 0, 0, 0, 0, 1, 0, 1],
            "6": [1, 1, 0, 1, 1, 0, 1, 0, 1], "9": [1, 1, 1, 1, 1, 1, 1, 1, 1] };
        this.timeID1 = 0; //动画延时结束时间ID
        this.timeID2 = 0; //动画延时结束时间ID
        this.timeID3 = 0; //动画延时结束时间ID
        this.timeID4 = 0; //动画延时结束时间ID
        this.timeID5 = 0; //动画延时结束时间ID
        this.isExistNewGuideState = false;
        this._allPlayerRaiseCount = 0;
        this.progressWidth = 1300;
        this.playerNodeList = [];
        this.fightInfoJSList = []; // Component: PlayerFightInfo, 对应　PlayerInfo1　～　PlayerInfo9
        this.pubCrdsJSList = []; //公用牌里面每张牌的控制器
        this.curCardLsit = []; //存储上一次公用牌的数据
        this.isShowCard = true; //是否可以亮牌
        this.curActionCtrl = null;
        UITools.onSetNodeVisible(this.shareGroup, false);
        this.inItPrefabObject();
    },

    // 初始化清理，每次穿新数据的时候调用
    inItCleanData: function inItCleanData() {
        this.actionIndex = 0;
        this.roundIndex = 0;
        this._curInterval = 0;
        this.actionTime = 0; //当前玩家的行动时间计算
        this.curShowTime = 0; //总时长
        this.isPauseState = false; //是否暂停状态
        this.curActionList = []; //当前回合的行动列表
        this.curRoomData = null;
        this.playCardIndex = 0; //
        this.progressIcon.progress = 0;
        this.isShowCard = true;
        // 隐藏按钮组的显示
        for (var i = 0; i < this.playCtrlBtnGroup.length; i++) {
            UITools.onSetNodeVisible(this.playCtrlBtnGroup[i].node, false);
        }
        var ctrl;
        for (var i = 0; i < this.pubCrdsJSList.length; i++) {
            ctrl = this.pubCrdsJSList[i];
            ctrl.onClearData();
        }
    },

    // 阻止穿透
    stopPropagationHandler: function stopPropagationHandler(_event) {
        _event.stopPropagation();
    },

    // 设置遮罩层的显示
    onSetRoundMaskState: function onSetRoundMaskState(isShow) {
        if (this.RoundOverMask) {
            UITools.onSetNodeVisible(this.RoundOverMask.node, isShow);
        }
    },

    // 初始化预知对象
    inItPrefabObject: function inItPrefabObject() {
        var curCloneObj = this.playerFightObj;
        var curTargetObj = {};
        var curObj, ctrl;
        for (var i = 0; i < this.playerInfoList.length; i++) {
            curTargetObj = {};
            if (i == this.playerInfoList.length - 1) {
                curCloneObj = this.selfFightObj;
            }
            curObj = UITools.onCloneInstantiate(curCloneObj, this.playerInfoList[i], cc.p(0, 0), true);
            ctrl = UITools.onGetNodeCompontent(curObj, 'HistoryPlayerCtrlJS');
            ctrl.onInitParent(this, i);
            curTargetObj.targetObj = curObj;
            curTargetObj.targetCtrl = ctrl;
            this.playerNodeList.push(curTargetObj);
        }
        // 获取每张公用牌的控制器
        for (var i = 0; i < this.publicCardList.length; i++) {
            ctrl = UITools.onGetNodeCompontent(this.publicCardList[i], 'CardItemControl');
            this.pubCrdsJSList.push(ctrl);
        }
    },

    // 设置播放数据
    onSetPlayData: function onSetPlayData(playData) {
        this.inItCleanData();
        // console.log(":::onSetFightData:::",playData);
        this.onInitRoomData(playData);
    },
    // 格式化房间数据
    onInitRoomData: function onInitRoomData(playData) {
        // console.log(":::onSetFightData:::",playData);
        this.curRoomData = Global.simulateFightManager.onSetFightData(playData);
        // cc.log("当前房间的 dealerSeat " + this.curRoomData.dealerSeat);
        var curSeatMax = this.curRoomData.seatMax;
        if (curSeatMax <= 0) {
            curSeatMax = "9";
        }
        var curList = this.PositionConfig[curSeatMax];
        if (curList == null) {
            curList = this.PositionConfig["9"];
        }
        this.fightInfoJSList = [];
        var curValue = 0;
        var curData;
        for (var i = 0; i < curList.length; i++) {
            curValue = curList[i];
            curData = this.playerNodeList[i];
            if (1 == curValue) {
                this.fightInfoJSList.push(curData);
                UITools.onSetNodeVisible(curData.targetObj, true);
            } else {
                UITools.onSetNodeVisible(curData.targetObj, false);
            }
        }

        if (this.curRoomData.actions) {
            var curTime = this.curRoomData.actions.length * ACTION_TIME;
            this.curShowTime = curTime;
            var str = curTime * 1000;
            UITools.onSetUILabelString(this.timeLabel, moment(str).format("mm:ss"));
            this.onSetBtnPostion();
        }
        // 开始
        this.onStarCardClick();
    },

    // 更新河牌，翻牌，转牌按钮的坐标
    onSetBtnPostion: function onSetBtnPostion() {
        var curWidth = this.progressWidth / this.curShowTime;
        // console.log("::::curWidth:::",curWidth);
        // 更新按钮组的显示和位置设置
        if (this.curRoomData.rounds.length > 1) {
            var len = this.curRoomData.rounds.length - 1;
            var curCount = 0;
            for (var i = 0; i < len; i++) {
                var curBtn = this.playCtrlBtnGroup[i];
                UITools.onSetNodeVisible(curBtn.node, true);
                curCount += this.curRoomData.rounds[i];
                var num = curCount * ACTION_TIME;
                var pos = num * curWidth;
                UITools.onSetNodePosition(curBtn.node, cc.p(pos, curBtn.node.position.y));
            }
        }
    },

    // 初始化玩家数据。。
    initPlayerData: function initPlayerData() {
        var realPaly = this.curRoomData.RealPlay;

        this.pot = [];
        this._allPlayerRaiseCount = 0;

        var curData,
            curCtrl = null;
        for (var i = 0; i < realPaly.length; i++) {
            curData = realPaly[i];
            curData.roundBet = 0;
            curData.MyShowBetIn = 0;
            curData.chip = curData.startChip;
            this.initData(curData);
            curData.bet = 0;
            if (-1 == curData.showIndex) {
                curCtrl = this.fightInfoJSList[this.fightInfoJSList.length - 1].targetCtrl;
            } else {
                curCtrl = this.fightInfoJSList[curData.showIndex].targetCtrl;
            }
            if (curCtrl) {
                curCtrl.initPlayerData(curData);
            }
        }
    },

    // 初始化玩家的钱包括要下的新手盲 大盲，小忙和ANTE
    initData: function initData(curData) {
        var ante = parseInt(this.curRoomData.ante);
        var curBigBlind = parseInt(this.curRoomData.bigBlind);
        var curSmallBlind = parseInt(this.curRoomData.smallBlind);
        if (ante && ante > 0) {
            var curMoney = parseInt(curData.startChip) - ante;
            if (curMoney > 0) {
                curData.chip = curMoney;
                // curData.roundBet += ante;
                this._allPlayerRaiseCount += ante;
            } else {
                // curData.roundBet += curData.startChip;
                this._allPlayerRaiseCount += curData.startChip;
                curData.chip = 0;
            }
        }
        if (curData.seat == this.curRoomData.bigBlindSeat) {
            var curchip = curData.chip;
            if (curchip > 0 && curchip > curBigBlind) {
                var curMoney = curchip - curBigBlind;
                curData.MyShowBetIn = curBigBlind;
                curData.roundBet += curBigBlind;
                this._allPlayerRaiseCount += curBigBlind;
                curData.chip = curMoney;
            } else {
                curData.MyShowBetIn = curchip;
                curData.roundBet += curchip;
                this._allPlayerRaiseCount += curchip;
                curData.chip = 0;
            }
        }
        if (curData.seat == this.curRoomData.smallBlindSeat) {
            var curchip = curData.chip;
            if (curchip > 0 && curchip > curSmallBlind) {
                var curMoney = curchip - curSmallBlind;
                curData.MyShowBetIn = curSmallBlind;
                curData.roundBet += curSmallBlind;
                this._allPlayerRaiseCount += curSmallBlind;
                curData.chip = curMoney;
            } else {
                curData.MyShowBetIn = curData.chip;
                curData.roundBet += curData.chip;
                this._allPlayerRaiseCount += curData.chip;
                curData.chip = 0;
            }
        }
        // 新手盲
        if (curData.newBlind) {
            var curchip = curData.chip;
            if (curchip > 0 && curchip > curData.newBlind) {
                var curMoney = curchip - parseInt(curData.newBlind);
                curData.MyShowBetIn = parseInt(curData.newBlind);
                curData.roundBet += parseInt(curData.newBlind);
                this._allPlayerRaiseCount += parseInt(curData.newBlind);
                curData.chip = curMoney;
            } else {
                curData.MyShowBetIn = curData.chip;
                curData.roundBet += curData.chip;
                this._allPlayerRaiseCount += curData.chip;
                curData.chip = 0;
            }
        }
    },

    // 玩家跳播数据。。
    initJumpData: function initJumpData() {
        var realPaly = this.curRoomData.RealPlay;
        this._allPlayerRaiseCount = 0;

        this.pot = [];
        var curData,
            curCtrl = null;
        var len = realPaly.length;
        for (var i = 0; i < len; i++) {
            curData = realPaly[i];
            curData.roundBet = 0;
            curData.chip = curData.startChip;
            curData.MyShowBetIn = 0;
            this.initData(curData);

            var curNum = 0;
            for (var a = 0; a < this.roundIndex; a++) {
                curNum += parseInt(this.curRoomData.rounds[a]);
            }
            var actionList = this.curRoomData.actions.slice(0, curNum);
            var actionData = null;
            curData.allMyBetIn = 0;
            curData.action = 0;
            var moneyNum = 0;
            for (var j = 0; j < actionList.length; j++) {
                actionData = actionList[j];
                if (actionData.seat == curData.seat && !!actionData.num) {
                    moneyNum += parseInt(actionData.num);
                }
                if (actionData.seat == curData.seat && actionData.action == 1) {
                    curData.action = actionData.action;
                }
            }
            this._allPlayerRaiseCount += parseInt(moneyNum);
            if (curData.chip > 0 && curData.chip > moneyNum) {
                var curMoney = curData.chip - moneyNum;
                curData.chip = curMoney;
            } else {
                curData.chip = 0;
            }
            if (-1 == curData.showIndex) {
                curCtrl = this.fightInfoJSList[this.fightInfoJSList.length - 1].targetCtrl;
            } else {
                curCtrl = this.fightInfoJSList[curData.showIndex].targetCtrl;
            }
            if (curCtrl) {
                curCtrl.onSetJumpData(curData);
            }
        }
        this.setBlindData(this._allPlayerRaiseCount);
    },

    resetTimeOut: function resetTimeOut() {
        if (this.timeID1 > 0) {
            clearTimeout(this.timeID1);
        }
        if (this.timeID2 > 0) {
            clearTimeout(this.timeID2);
        }
        if (this.timeID3 > 0) {
            clearTimeout(this.timeID3);
        }
        if (this.timeID4 > 0) {
            clearTimeout(this.timeID4);
        }
        if (this.timeID5 > 0) {
            clearTimeout(this.timeID5);
        }
        this.timeID1 = 0;
        this.timeID2 = 0;
        this.timeID3 = 0;
        this.timeID4 = 0;
        this.timeID5 = 0;
    },

    // 开始前清理
    publicClean: function publicClean() {
        this.roundIndex = 0;
        this.actionIndex = 0;
        this.actionTime = 0; //当前玩家的行动时间计算
        this.playCardIndex = 0;
        this.curActionCtrl = null;
        if (this.timeID > 0) {
            clearTimeout(this.timeID);
        }
        this.timeID = 0;
        this.resetTimeOut();
        this.isShowCard = true;
        this.setItemZorder(null, false);
        this.onSetRoundMaskState(false);
        this.unscheduleAllCallbacks();
        this.stopAnimations();
        this.MoneyPoolLayer_top.removeAllChildren();
        this.MoneyPoolLayer_bottom.removeAllChildren();
        var ctrl;
        for (var i = 0; i < this.pubCrdsJSList.length; i++) {
            ctrl = this.pubCrdsJSList[i];
            ctrl.ResetCrdPos();
            ctrl.allClearCardData();
        }
        var curData,
            curCtrl = null;
        for (var i = 0; i < this.fightInfoJSList.length; i++) {
            curCtrl = this.fightInfoJSList[i].targetCtrl;
            if (curCtrl) {
                curCtrl.onGameOverClean();
            }
        }
        this.UpCardAry = [];
        this.curCardLsit = [];
        this.curActionList = [];
        this.TableAllMoney = 0;
        this._allPlayerRaiseCount = 0;
    },

    // 开始
    onStarCardClick: function onStarCardClick() {
        if (true == this.isPauseState) {
            this.onResumeFun();
        }
        this._curInterval = 0;
        this.publicClean();
        this.initPlayerData();
        // 更新大小盲注的显示；暂时没有写
        this.setBlindData(this._allPlayerRaiseCount);
        if (this.curRoomData.rounds) {
            var actionNum = this.curRoomData.rounds[this.actionIndex];
            this.curActionList = this.curRoomData.actions.slice(this.actionIndex, actionNum);
        }
        this.onStartPlay();
    },

    // 翻牌
    onPerflopClick: function onPerflopClick() {
        Global.musicManager.PlayClickSound();
        this.onSetJumpCount(1);
    },
    // 转牌
    onTurnClick: function onTurnClick() {
        Global.musicManager.PlayClickSound();
        this.onSetJumpCount(2);
    },
    // 河牌
    onRiverClick: function onRiverClick() {
        Global.musicManager.PlayClickSound();
        this.onSetJumpCount(3);
    },

    // 设置跳牌的索引
    onSetJumpCount: function onSetJumpCount(curIndex) {
        if (true == this.isPauseState) {
            this.onResumeFun();
        }
        this.publicClean();
        this.actionTime = 0;
        this.roundIndex = curIndex;
        this.initJumpData();
        this.onSetPublicCard();
        this.curCardLsit = this.curRoomData.showCard;
        this.setPubCardData();
        this.onUpdatePublicData();
        this.onCleanPlayerData();
        this.onStartPlay();
    },
    // 开始播放
    onStartPlay: function onStartPlay() {
        if (true == this.isExistNewGuideState) {
            return;
        }
        UITools.onSetNodeVisible(this.palyBtn.node, false);
        UITools.onSetNodeVisible(this.pauseBtn.node, true);
        this.isPauseState = false; //是否暂停状态
        this.onUpdateProgress();
        this.actionTime = 0;
        this.unscheduleAllCallbacks();
        // 暂停
        // this.schedule(this.onUpdateTime.bind(this),0.05);
        cc.director.getScheduler().schedule(this.onUpdateTime.bind(this), this, 0.05);
        this.updatePlayerActionTime();
    },

    onUpdateTime: function onUpdateTime(dt) {
        this._curInterval += dt;
        this.actionTime += dt;
        if (this.actionTime >= ACTION_TIME) {
            this.actionTime = 0;
            this.updateActionPlayer();
        }
        this.onUpdateProgress();
    },

    // 更新进度
    onUpdateProgress: function onUpdateProgress() {
        // console.log(":::this._curInterval:::",this._curInterval,this.curShowTime);
        var progress = this._curInterval / this.curShowTime;
        this.progressIcon.progress = progress;
    },

    // 下一个行动
    onNextAction: function onNextAction() {
        // console.log("::;onNextAction::;",this.curActionList.length);
        this.actionIndex += 1;
        if (this.actionIndex < this.curActionList.length) {
            this.updatePlayerActionTime();
        } else {
            // 清理筹码显示 和飞筹码
            this.onCleanPlayerData();
            this.roundIndex += 1;
            if (this.roundIndex < this.curRoomData.rounds.length) {
                this.onSetPublicCard();
                this.setPubCardData();
                this.onUpdatePublicData(true);
            } else {
                this.actionTime = 0;
                this.unscheduleAllCallbacks();
                this.roundIndex -= 1;
                this._curInterval = this.curShowTime;
                this.progressIcon.progress = 1;
                this.onRauseCallBack();
                if (this.curRoomData.allPubCrds && this.curRoomData.allPubCrds.length == 5) {
                    this.roundIndex = 3;
                    this.onSetPublicCard();
                    this.setPubCardData();
                }
                // 游戏结束
                this.onGameOver();
            }
        }
    },

    // 更新公用数据
    onUpdatePublicData: function onUpdatePublicData(isShow) {
        this.actionIndex = 0;
        this.actionTime = 0; //当前玩家的行动时间计算
        var actionNum = this.curRoomData.rounds[this.roundIndex];
        var backNum = 0;
        for (var i = 0; i < this.roundIndex; i++) {
            backNum += this.curRoomData.rounds[i];
        }
        var count = backNum + actionNum;
        this.curActionList = this.curRoomData.actions.slice(backNum, count);
        if (!isShow) {
            this._curInterval = backNum * ACTION_TIME;
        }
        this.updatePlayerActionTime();
    },
    // 设置公用牌
    onSetPublicCard: function onSetPublicCard() {
        if (1 == this.roundIndex) {
            this.curRoomData.showCard = this.curRoomData.allPubCrds.slice(0, 3);
        } else if (2 == this.roundIndex) {
            this.curRoomData.showCard = this.curRoomData.allPubCrds.slice(0, 4);
        } else if (3 == this.roundIndex) {
            this.curRoomData.showCard = this.curRoomData.allPubCrds.slice(0, 5);
        }
    },

    // 更新玩家的行动时间
    updatePlayerActionTime: function updatePlayerActionTime() {
        var actionObj = this.curActionList[this.actionIndex]; //当前回合的行动列表
        if (!actionObj) {
            console.log("::;updatePlayerActionTime:11:;", this.curActionList, this.actionIndex, actionObj);
            return;
        }
        var curData,
            curCtrl = null;
        var realPaly = this.curRoomData.RealPlay;
        for (var i = 0; i < realPaly.length; i++) {
            curData = realPaly[i];
            if (curData.uid == undefined) continue; //初始化的时候不需要此判断，更新的时候需要
            if (actionObj.seat == curData.seat) {
                var curTarget = this.getPlayerInfoCtrlAndNode(curData.uid);
                curCtrl = curTarget.targetCtrl;
                this.curActionCtrl = curCtrl;
                if (curCtrl) {
                    curCtrl.onAddActionTime(20);
                    break;
                }
            }
        }
    },

    // 更新行动的玩家
    updateActionPlayer: function updateActionPlayer() {
        var actionObj = this.curActionList[this.actionIndex]; //当前回合的行动列表
        if (!actionObj) {
            // console.log("::;updateActionPlayer:22:;",this.curActionList,this.actionIndex,actionObj);
            return;
        }
        var curData,
            curCtrl = null;
        var realPaly = this.curRoomData.RealPlay;
        for (var i = 0; i < realPaly.length; i++) {
            curData = realPaly[i];
            if (curData.uid == undefined) continue; //初始化的时候不需要此判断，更新的时候需要
            if (actionObj.seat == curData.seat) {
                var curTarget = this.getPlayerInfoCtrlAndNode(curData.uid);
                curCtrl = curTarget.targetCtrl;
                if (curCtrl) {
                    curData.action = actionObj.action;
                    curCtrl.onChangActionflagImg(actionObj.action);
                    if (actionObj.num) {
                        curCtrl.setJettonShow(actionObj.num);
                        this._allPlayerRaiseCount += parseInt(actionObj.num);
                        this.setBlindData(this._allPlayerRaiseCount);
                    }
                    break;
                }
            }
        }
        // 更新下一个行动
        this.onNextAction();
    },

    // 设置盲注数据
    setBlindData: function setBlindData(totalMoney) {
        if (this.isExistNewGuideState) {
            UITools.onSetNodeVisible(this.infoLabel.node, false);
            return;
        }
        var smallBlind = 0;
        var bigBlind = 0;
        var curAnte = 0;
        if (!!this.curRoomData.matchPid) {
            smallBlind = this.curRoomData.smallBlind;
            bigBlind = this.curRoomData.bigBlind;
            if (!!this.curRoomData.ante) {
                curAnte = this.curRoomData.ante;
            }
        } else {
            var roomInf = this.curRoomData.configInfo;
            if (roomInf) {
                smallBlind = roomInf.smallBlind;
                bigBlind = roomInf.bigBlind;
                curAnte = roomInf.ante;
            }
        }

        this.curRoomData.bigBlind = bigBlind;
        this.curRoomData.smallBlind = smallBlind;
        this._roomName = UITools.getRoomName(this.curRoomData);
        this._totalMoney = totalMoney > 0 ? "  " + "底池:" + UITools.onNumTransfer(totalMoney) : "";

        var anteStr = curAnte == 0 ? "" : "  Ante：" + curAnte;
        this._totalMoney = totalMoney > 0 ? "  " + "底池:" + UITools.onNumTransfer(totalMoney) : "";
        if (this.curRoomData.matchId == "0") {
            var str = this._roomName + '  盲注:' + UITools.onNumTransfer(this.curRoomData.smallBlind) + '/' + UITools.onNumTransfer(this.curRoomData.bigBlind) + anteStr + this._totalMoney;
            UITools.onSetUILabelString(this.infoLabel, str);
        }

        UITools.onSetNodeVisible(this.infoLabel.node, true);
    },

    // 设置玩家卡牌的显示(亮牌)
    onSetPlayerCardShow: function onSetPlayerCardShow() {
        var isSipping = this.curRoomData.hasShowdown;
        if (!isSipping) return; //没有发生斗牌不亮牌
        var curData,
            curCtrl = null;
        var realPaly = this.curRoomData.RealPlay;
        for (var i = 0; i < realPaly.length; i++) {
            curData = realPaly[i];
            if (curData.uid == undefined || curData.IsPlayerSelf()) continue;
            if (curData.action != Config.GameActionType.FOLD) {
                var curTarget = this.getPlayerInfoCtrlAndNode(curData.uid);
                curCtrl = curTarget.targetCtrl;
                if (curCtrl) {
                    curCtrl.onSetCardData(true, curData.showCard);
                }
            }
        }
    },

    // 结算状态
    onGameOver: function onGameOver() {
        this.endRound();
        if (false == this.isPlayAnimIng) {
            this.onSetPlayerCardShow();
            this.fightCardOver();
        } else {
            this.isShowCard = false;
        }
    },

    // 清理玩家数据
    onCleanPlayerData: function onCleanPlayerData() {
        this.makePot();
        // 更新主池边池的存储
        this.onJettonClear();
        this.curActionCtrl = null;
        this.isPlayAnimIng = false;
        var curData,
            curCtrl = null;
        for (var i = 0; i < this.fightInfoJSList.length; i++) {
            curCtrl = this.fightInfoJSList[i].targetCtrl;
            if (curCtrl) {
                curCtrl.onCleanPlayerData();
            }
        }
    },

    // 筹码清理
    onJettonClear: function onJettonClear() {
        if (this.currentGuideId == 15) return; //第十五新手引导不清理
        //update the money'pool
        if (this.curRoomData.HasTableFlag(TableFlags.TABLE_FLAG_POT)) {
            this.refreshMoneyPool();
            this.curRoomData.RemoveTableFlag(TableFlags.TABLE_FLAG_POT);
        }
        var curCtrl,
            curData = null;
        var realPaly = this.curRoomData.RealPlay;
        for (var i = 0; i < realPaly.length; i++) {
            curData = realPaly[i];
            if (curData.uid == undefined) continue;
            var curTarget = this.getPlayerInfoCtrlAndNode(curData.uid);
            curCtrl = curTarget.targetCtrl;
            if (curCtrl && curCtrl.curPlayerData != null && curCtrl.curPlayerData.uid > 0) {
                var pos = this.moneyPoolList.length > 4 ? this.MoneyPoolLayer_bottom.getPosition() : this.MoneyPoolLayer_top.getPosition();
                if (this.moneyPoolList.length > 0) pos.x += this.moneyPoolList[this.moneyPoolList.length - 1].getPosition().x;
                curCtrl.clearShowJetton(pos);
            }
        }
        if (Global.isRuningInBackGround == false) {
            setTimeout(this.updatePlayPoolAnimation.bind(this), 500);
        }
    },

    // 更新主池边池的显示
    updatePlayPoolAnimation: function updatePlayPoolAnimation() {
        var moneyObj,
            moneyCtrl = null;
        for (var i = 0; i < this.moneyPoolList.length; i++) {
            moneyObj = this.moneyPoolList[i];
            moneyObj.active = true;
            moneyCtrl = UITools.onGetNodeCompontent(moneyObj, "MoneyPollControl");
            moneyCtrl.playUpdatePool();
        }
    },

    // 刷新主池
    refreshMoneyPool: function refreshMoneyPool(_isInit) {
        if (_isInit == null) _isInit = false;
        var potArr = this.pot;
        this.MoneyPoolLayer_top.removeAllChildren();
        this.MoneyPoolLayer_bottom.removeAllChildren();
        this.moneyPoolList = [];
        var moneyObj,
            moneyCtrl = null;
        this.TableAllMoney = 0;
        var lastMoneyPool;
        var totalWidth_top = 0;
        var totalWidth_bottom = 0;
        var curContainer;
        var allowPlay;
        for (var i = 0; i < potArr.length; i++) {
            curContainer = i > 3 ? this.MoneyPoolLayer_bottom : this.MoneyPoolLayer_top;
            moneyObj = UITools.onCloneInstantiate(this.MoneyPool, curContainer, cc.p(0, 0));
            moneyCtrl = UITools.onGetNodeCompontent(moneyObj, "MoneyPollControl");
            allowPlay = Global.isRuningInBackGround == false && i == potArr.length - 1 && _isInit == false;
            moneyCtrl.SetJettonNum(potArr[i], allowPlay);
            if (lastMoneyPool != null) moneyObj.setPosition(lastMoneyPool.getPosition().x + lastMoneyPool.getComponent("MoneyPollControl").getLabelWidth() + moneyCtrl.getInterval(), 0);
            this.TableAllMoney += potArr[i];
            this.moneyPoolList.push(moneyObj);
            lastMoneyPool = i == 3 ? null : moneyObj;
            if (i > 3) {
                totalWidth_bottom += moneyCtrl.getTotalWidth();
            } else {
                totalWidth_top += moneyCtrl.getTotalWidth();
            }

            moneyObj.active = Global.isRuningInBackGround == true || _isInit == true;
        }

        this.MoneyPoolLayer_top.setPosition((Global.statgeWidth - totalWidth_top) / 2 - Global.statgeWidth / 2, 130);
        this.MoneyPoolLayer_bottom.setPosition((Global.statgeWidth - totalWidth_bottom) / 2 - Global.statgeWidth / 2, -105);
    },

    // 设置公用牌数据
    setPubCardData: function setPubCardData() {
        this.isPlayAnimation = true;
        if (this.curRoomData.showCard.length == this.curCardLsit.length) {
            this.isPlayAnimation = false;
        }
        this.curCardLsit = this.curRoomData.showCard;
        if (this.curCardLsit.length == 0) return;

        if (this.isPlayAnimIng) {
            return;
        }
        this.setPlayerPubData(true);
    },

    setPlayerPubData: function setPlayerPubData(isPlay) {
        var self = this;
        // console.log(":::setPlayerPubData:::",this.isPlayAnimation);
        if (false == this.isPlayAnimation) {
            self.updatePublicState(this.curCardLsit.length);
            self.playCardIndex = this.curCardLsit.length;
        } else {
            var curTime = 0;
            this.isPlayAnimIng = true;
            if (self.playCardIndex < 3) {
                if (self.playCardIndex == 0) {
                    curTime = 0;
                } else if (self.playCardIndex == 1) {
                    curTime = 0.2;
                } else if (self.playCardIndex == 2) {
                    curTime = 0.2;
                }
            } else {
                if (true == isPlay) {
                    curTime = 0.1;
                } else {
                    curTime = 0.5;
                }
            }
            var callback = function callback() {
                self.pubCrdsJSList[self.playCardIndex].onSetData(self.curCardLsit[self.playCardIndex], true);
                self.playCardIndex++;
                self.onPlayPubAni();
            };
            setTimeout(callback, curTime * 1000);
        }
        var curTarget = this.getPlayerInfoCtrlAndNode(Global.playerInfo.uid);
        if (curTarget) {
            var js = curTarget.targetCtrl;
            js.RefCrdType(this.curRoomData.showCard);
        }
    },

    // 播放公用牌动画
    onPlayPubAni: function onPlayPubAni() {
        // console.log("::this.playCardIndex ::",this.playCardIndex,this.curCardLsit.length);
        if (this.playCardIndex < this.curCardLsit.length) {
            this.setPlayerPubData(false);
        } else {
            this.isPlayAnimIng = false;
        }
        if (false == this.isPlayAnimIng && false == this.isShowCard) {
            // 播放亮牌动画
            this.onSetPlayerCardShow();
            this.fightCardOver();
        }
    },

    // 更新公用牌状态
    updatePublicState: function updatePublicState(num) {
        var self = this;
        for (var i = 0; i < num; i++) {
            self.pubCrdsJSList[i].onSetData(this.curCardLsit[i], false);
        }
    },

    // 打牌是否结束播放动画
    fightCardOver: function fightCardOver() {
        this.setBlindData();
        if (Global.isRuningInBackGround == false) {
            this.showOverAnima();
        }
        if (!this.isExistNewGuideState) {
            var self = this;
            var callback = function callback() {
                self.onGameOverClean();
            };
            this.timeID = setTimeout(callback, 4000);
        }
    },
    // 游戏结束清理
    onGameOverClean: function onGameOverClean() {
        this.publicClean();
        var curData,
            curCtrl = null;
        for (var i = 0; i < this.fightInfoJSList.length; i++) {
            curCtrl = this.fightInfoJSList[i].targetCtrl;
            if (curCtrl) {
                curCtrl.gameOverUpdateMoney();
            }
        }
    },
    //结算动画
    showOverAnima: function showOverAnima() {
        // console.log("播放结算动画");
        var self = this;
        var nNum = 1;
        var delyTM = 1000; //间隔时间(毫秒)
        self.isCanPlay = true;
        var isSipping = this.curRoomData.hasShowdown;
        var isPlay = self.isExistNewGuideState;
        // console.log("isSipping :: ",isSipping);
        var RoundOverJn = self.curRoomData.GetRoundOverJn();
        var len = RoundOverJn.length;
        // 显示赢的玩家的数据
        var winList = []; //赢的列表
        var flatList = []; //平的列表
        var curReal = this.curRoomData.RealPlay;
        for (var i = 0; i < curReal.length; i++) {
            var curCtrl = null;
            var realData = curReal[i];
            if (realData.uid == undefined) continue;
            var curTarget = self.getPlayerInfoCtrlAndNode(realData.uid);
            curCtrl = curTarget.targetCtrl;
            // 弃牌的情况如果玩家亮牌了这种情况包括有玩家弃牌之后然后其他玩家又Allin了 还有后卫玩家没有亮牌的情况
            if (self && self.curRoomData && self.curRoomData.showCard) {
                curCtrl.ShowMyCrdType(realData.showCard, self.curRoomData.showCard, false);
            }
        }
        // 对参与结算的玩家亮牌
        for (var i = 0; i < len; i++) {
            var curData = RoundOverJn[i];
            var nResut = self.curRoomData.GetJnResult(curData.uid);
            var curCtrl = null;
            var isShowWinState = false;
            if (nResut >= 0) {
                isShowWinState = true;
            }
            var curTarget = self.getPlayerInfoCtrlAndNode(curData.uid);
            curCtrl = curTarget.targetCtrl;
            if (!!curCtrl) {
                curCtrl.stopAnimations();
                if (self && self.curRoomData.showCard) {
                    curCtrl.ShowMyCrdType(curData.showCard, self.curRoomData.showCard, isShowWinState);
                }
            }
        }

        // 对参与结算的人进行分类播动画
        for (var i = 0; i < len; ++i) {
            var curData = RoundOverJn[i];
            if (!curData || curData.uid == undefined) continue;
            var nResut = self.curRoomData.GetJnResult(curData.uid);
            if (nResut > 0) {
                winList.push(curData);
            } else if (nResut == 0) {
                flatList.push(curData);
            }
        }
        // 平局人列表动画
        for (var i = 0; i < flatList.length; i++) {
            if (len == 1) {
                var curData = flatList[i];
                var nResut = self.curRoomData.GetJnResult(curData.uid);
                var curTarget = self.getPlayerInfoCtrlAndNode(curData.uid);
                var curCtrl = curTarget.targetCtrl;
                var vSeat = curTarget.targetObj;
                if (curData.IsPlayerSelf()) {
                    if (!isPlay) self.onPlayWinAnimation(0);
                    self.onSetRoundMaskState(true);
                    if (!!vSeat) self.setItemZorder(vSeat.parent, true);
                    self.playAnimationAndJettons(curCtrl, Math.abs(nResut), false);
                }
            } else {
                var curData = flatList[i];
                var nResut = self.curRoomData.GetJnResult(curData.uid);
                var curTarget = self.getPlayerInfoCtrlAndNode(curData.uid);
                var curCtrl = curTarget.targetCtrl;
                var vSeat = curTarget.targetObj;
                if (!!curCtrl) {
                    curCtrl.stopAnimations();
                    var CrdVal = null;
                    if (self && self.curRoomData && self.curRoomData.showCard) {
                        CrdVal = curCtrl.onPlayUpPokerAni(curData.showCard, self.curRoomData.showCard, true);
                    }
                    if (!isPlay) self.showCrdTypeAnima(CrdVal);
                    var nDelayTM = 0;
                    if (CrdVal && CrdVal.OutPkr >= CrdPokerConfig.POKER_FULL_HOUSE) {
                        nDelayTM = 2000;
                    }
                    if (!isPlay) {
                        self.timeID2 = setTimeout(function () {
                            self.onPlayWinAnimation(1);
                        }, nDelayTM);
                    }
                    self.onSetRoundMaskState(true);
                    if (!!vSeat) self.setItemZorder(vSeat.parent, true);
                    self.playAnimationAndJettons(curCtrl, Math.abs(nResut), false);
                }
            }
            break;
        }
        if (flatList.length > 1) return; //平局了之后就不向下播了
        var isPlayJettonAni = false;
        // 赢钱人列表动画
        for (var i = 0; i < winList.length; i++) {
            var curData = winList[i];
            var nResut = self.curRoomData.GetJnResult(curData.uid);
            if (curData.IsPlayerSelf()) {
                var curTarget = self.getPlayerInfoCtrlAndNode(curData.uid);
                var curCtrl = curTarget.targetCtrl;
                var vSeat = curTarget.targetObj;
                curCtrl.stopAnimations();
                self.timeID1 = setTimeout(function () {
                    if (!!curCtrl) {
                        var CrdVal = null;
                        if (self.curRoomData.showCard) {
                            CrdVal = curCtrl.onPlayUpPokerAni(curData.showCard, self.curRoomData.showCard, isSipping);
                        }
                        if (!isPlay) {
                            if (isPlayJettonAni == false) {
                                self.showCrdTypeAnima(CrdVal);
                            }
                        }
                        var nDelayTM = 0;
                        if (CrdVal && CrdVal.OutPkr >= CrdPokerConfig.POKER_FULL_HOUSE) {
                            nDelayTM = 2000;
                        }
                        if (!isPlay) {
                            if (nDelayTM > 0) {
                                self.timeID2 = setTimeout(function () {
                                    Global.musicManager.PlayNameSound('ying');
                                    self.onPlayWinAnimation(0);
                                }, nDelayTM);
                            } else {
                                Global.musicManager.PlayNameSound('ying');
                                self.onPlayWinAnimation(0);
                            }
                        }
                        self.setItemZorder(vSeat.parent, true);
                        self.onSetRoundMaskState(true);
                        self.playAnimationAndJettons(curCtrl, Math.abs(nResut), isPlayJettonAni);
                        isPlayJettonAni = true;
                    }
                }, nNum * delyTM);
            } else {
                var curTarget = self.getPlayerInfoCtrlAndNode(curData.uid);
                var curCtrl = curTarget.targetCtrl;
                var vSeat = curTarget.targetObj;
                curCtrl.stopAnimations();
                self.timeID3 = setTimeout(function () {
                    var CrdVal = null;
                    // isShow的意思是是否显示赢的牌型资源
                    if (self && self.curRoomData && self.curRoomData.showCard) {
                        CrdVal = curCtrl.onPlayUpPokerAni(curData.showCard, self.curRoomData.showCard, isSipping);
                    }
                    if (!isPlay) {
                        if (isPlayJettonAni == false) {
                            self.showCrdTypeAnima(CrdVal);
                        }
                    }
                    self.setItemZorder(vSeat.parent, true);
                    self.onSetRoundMaskState(true);
                    self.playAnimationAndJettons(curCtrl, Math.abs(nResut), isPlayJettonAni);
                    isPlayJettonAni = true;
                }, nNum * delyTM);
            }
            ++nNum;
            break;
        }
    },

    // 播放更新钱和筹码动画
    playAnimationAndJettons: function playAnimationAndJettons(curCtrl, curValue, isPlayJetton) {
        var self = this;
        self.timeID4 = setTimeout(function () {
            curCtrl.ShowWinAnma(curValue);
            if (isPlayJetton == false) {
                self.accountJettons();
            }
        }, 500);
    },

    //adjusting the showObject's Zorder when the end of fight
    setItemZorder: function setItemZorder(_seat, _isEnd) {
        if (!this.playerInfoList) return;
        for (var i = 0; i < this.playerInfoList.length; i++) {
            this.playerInfoList[i].parent = this.playerSeatContainer;
            this.playerInfoList[i].setLocalZOrder(ZORDER_SHOW.ONE);
        }
        if (_isEnd == true) {
            if (_seat != null) _seat.parent = this.node;
            this.playerSeatContainer.setLocalZOrder(ZORDER_SHOW.ONE);
            _seat.setLocalZOrder(ZORDER_SHOW.TWO);
            this.moneyPoolContainer.setLocalZOrder(ZORDER_SHOW.TWO);
            this.PubCrdNd.setLocalZOrder(ZORDER_SHOW.THREE);
            this.uiContainer_top.setLocalZOrder(ZORDER_SHOW.FOUR);
            this.Animationlayer.setLocalZOrder(ZORDER_SHOW.FIVE);
        } else {
            this.PubCrdNd.setLocalZOrder(ZORDER_SHOW.NONE);
            this.playerSeatContainer.setLocalZOrder(ZORDER_SHOW.ONE);
            this.moneyPoolContainer.setLocalZOrder(ZORDER_SHOW.TWO);
            this.Animationlayer.setLocalZOrder(ZORDER_SHOW.THREE);
            this.uiContainer_bottom.setLocalZOrder(ZORDER_SHOW.FOUR);
            this.uiContainer_top.setLocalZOrder(ZORDER_SHOW.FIVE);
        }
        this.playCtrlNode.setLocalZOrder(ZORDER_SHOW.SIX);
    },

    accountJettons: function accountJettons() {
        var curData = null;
        this.clearMoneyPoolCache();
        if (!this.curRoomData) return;
        var RoundOverJn = this.curRoomData.GetRoundOverJn();
        var curSeat;
        var getJetton;
        var curMoneyPool;
        for (var i = 0; i < RoundOverJn.length; ++i) {
            curData = RoundOverJn[i];
            if (!curData) continue;

            var tarPos;
            var curTarget = this.getPlayerInfoCtrlAndNode(curData.uid);
            curSeat = curTarget.targetObj;
            for (var j = 0; j < this.moneyPoolList.length; j++) {
                curMoneyPool = this.moneyPoolList[j];
                if (curSeat == null) continue;
                tarPos = curSeat.parent.getPosition();
                tarPos = UITools.local2local(this.playerSeatContainer, curMoneyPool, tarPos);
                getJetton = this.curRoomData.IsCanFlyCoin(j, curData.uid);
                if (getJetton > 0) {
                    curMoneyPool.getComponent("MoneyPollControl").addConvertList(getJetton, tarPos);
                }
            }
        }
        //play the animations
        Global.musicManager.PlayNameSound('choumafei');
        var curMoneyPool;
        for (var i = 0; i < this.moneyPoolList.length; i++) {
            curMoneyPool = this.moneyPoolList[i];
            curMoneyPool.getComponent("MoneyPollControl").playConvertToWallet();
        }
    },

    clearMoneyPoolCache: function clearMoneyPoolCache() {
        var curMoneyPool;
        if (!this.moneyPoolList) return;
        for (var i = 0; i < this.moneyPoolList.length; i++) {
            curMoneyPool = this.moneyPoolList[i];
            curMoneyPool.getComponent("MoneyPollControl")._roundOverDataList = [];
        }
    },

    //显示牌型动画
    showCrdTypeAnima: function showCrdTypeAnima(CrdVal) {
        if (!CrdVal) return;
        var self = this;
        var animType = CrdVal.OutPkr;
        // console.log("::animType::",animType);
        var animPath = "";
        if (animType == CrdPokerConfig.POKER_FULL_HOUSE) {
            animPath = "animations/hulujiemian/donghua-hulu";
        } else if (animType == CrdPokerConfig.POKER_FOUR_KIND) {
            animPath = "animations/jinggangjiemian/donghua-jinggang";
        } else if (animType == CrdPokerConfig.POKER_STRAIGHT_FLUSH) {
            animPath = "animations/tonghuashunjiemian/tonghuashunjiemian";
        } else if (animType == CrdPokerConfig.POKER_ROYAL_FLUSH) {
            animPath = "animations/huangjiatonghuashun/huangjiatonghuashun";
        }
        if (animPath != "") {
            Global.musicManager.PlayNameSound("tsbx");
            Global.animationManager.playAnimation(animPath, self.Animationlayer, function (_res) {});
        }
    },

    // 播放胜利动画
    onPlayWinAnimation: function onPlayWinAnimation(nType) {
        var self = this;
        var animPath = "";
        var pos = cc.p(0, 230);
        if (nType == 0) {
            animPath = "animations/win/donghua-win0";
            pos = cc.p(0, 240);
        } else if (nType == 1) {
            animPath = "animations/pingju/pingju";
        }
        if (animPath != "") {
            if (!this.isCanPlay) {
                this.onSetRoundMaskState(false);
                return;
            }
            Global.animationManager.playAnimation(animPath, self.Animationlayer, function (_res) {
                self._curAnimation = _res;
                self._curPath = animPath;
            }, pos, true);
        }
    },
    //关闭动画
    stopAnimations: function stopAnimations() {
        this.isCanPlay = false;
        if (!!this._curAnimation) {
            Global.animationManager.stopAnimation(this._curPath, this._curAnimation);
        }
        this._curAnimation = null;
        this._curPath = "";
        this.Animationlayer.removeAllChildren();
    },

    //显示参与组成牌型的牌
    UpPubCard: function UpPubCard(cardAry) {

        var self = this;
        self.UpCardAry = cardAry;

        for (var j = 0; j < self.pubCrdsJSList.length; ++j) {
            var cardControl = self.pubCrdsJSList[j];
            if (cardControl.GetCardNum() <= 0) continue;

            if (this.isInUpCard(cardControl.GetCardNum())) {
                cardControl.onPlayerAni();
                cardControl.onSetMaskShow(false);
            } else {
                cardControl.ResetCrdPos();
                cardControl.onSetMaskShow(true);
            }
        }
    },

    //可以跳起的牌
    isInUpCard: function isInUpCard(nNum) {
        if (this.UpCardAry.length <= 0) return false;

        for (var i = 0; i < this.UpCardAry.length; ++i) {
            var nCrdNum = this.UpCardAry[i];
            if (nCrdNum.indx == nNum) {
                return true;
            }
        }
        return false;
    },

    // 修改座位没有玩家的时候图标的显示
    // --------------------点击事件------\\\\\\\\\\\\\---------------------------
    //播放 
    onPlayClick: function onPlayClick(evt) {
        Global.musicManager.PlayClickSound();
        if (true == this.isPauseState) {
            this.onResumeFun();
        } else {
            this.publicClean();

            this.onStarCardClick();
        }
    },
    // 恢复
    onResumeFun: function onResumeFun() {
        // cc.director.resume();
        cc.director.getScheduler().resumeTarget(this);
        this.isPauseState = false;
        UITools.onSetNodeVisible(this.palyBtn.node, false);
        UITools.onSetNodeVisible(this.pauseBtn.node, true);
        if (this.curActionCtrl) {
            this.curActionCtrl.getProgressControl().resumeScheduler();
        }
    },
    // 
    onRauseCallBack: function onRauseCallBack() {
        UITools.onSetNodeVisible(this.pauseBtn.node, false);
        UITools.onSetNodeVisible(this.palyBtn.node, true);
    },

    // 暂停
    onPauseClick: function onPauseClick(evt) {
        Global.musicManager.PlayClickSound();
        this.isPauseState = true;
        this.onRauseCallBack();
        // cc.director.pause();
        cc.director.getScheduler().pauseTarget(this);
        if (this.curActionCtrl) {
            this.curActionCtrl.getProgressControl().pauseScheduler();
        }
    },

    // qq
    onTencentClick: function onTencentClick() {
        Global.musicManager.PlayClickSound();
        var str = this.onShareMessage();
    },

    // 微信
    onWeChatClick: function onWeChatClick() {
        Global.musicManager.PlayClickSound();
        var str = this.onShareMessage();
    },

    // 朋友圈
    onCircelClick: function onCircelClick() {
        Global.musicManager.PlayClickSound();
        var str = this.onShareMessage();
    },

    // 新浪
    onSinaClick: function onSinaClick() {
        Global.musicManager.PlayClickSound();
        var str = this.onShareMessage();
    },

    onShareMessage: function onShareMessage() {
        var gameId = this.historyPlayData.curId;
        var uid = Global.playerInfo.uid;
        var str = "http://192.168.1.185:3000/share/" + gameId + "/" + uid;
        console.log(":::v::;:str::", str);
        return str;
    },

    // 分享按钮
    shareButtonClick: function shareButtonClick() {
        Global.musicManager.PlayClickSound();
        UITools.onSetNodeVisible(this.shareGroup, true);
    },

    // 取消分享背景
    onCancelShareClick: function onCancelShareClick() {
        UITools.onSetNodeVisible(this.shareGroup, false);
    },

    // 关闭面板
    onClosePanel: function onClosePanel(isOpen) {
        Global.musicManager.playBackMusic();
        if (true == this.isPauseState) {
            this.onResumeFun();
        }
        Global.uiManager.closePanel(Global.uiManager.PLAYCARDVIDEOS_PANEL, true);
        if (1 != isOpen) {
            Global.uiManager.openPanel(Global.uiManager.HISTORYPLAYCARDS_PANEL, true);
        }
    },

    /**
     * 计算主池和边池
     * @returns 无
     */
    makePot: function makePot() {
        var betMap = {};
        var gamerBet = [];
        var curData,
            actionData = null;
        var realPaly = this.curRoomData.RealPlay;
        var len = realPaly.length;
        var actionList = [];
        var curNum = 0;
        if (this.roundIndex >= this.curRoomData.rounds) {
            this.roundIndex = this.curRoomData.rounds.length - 1;
        }
        for (var i = 0; i <= this.roundIndex; i++) {
            curNum += parseInt(this.curRoomData.rounds[i]);
        }
        actionList = this.curRoomData.actions.slice(0, curNum);
        for (var i = 0; i < len; i++) {
            curData = realPaly[i];
            if (curData.uid == undefined) continue;
            var bet = parseInt(curData.roundBet);
            for (var j = 0; j < actionList.length; j++) {
                actionData = actionList[j];
                if (actionData.seat == curData.seat && !!actionData.num) {
                    bet += parseInt(actionData.num);
                }
            }
            curData.bet = bet;
        }
        //所有相同的投注额进行分组累加
        for (var i = 0; i < len; i++) {
            curData = realPaly[i];
            if (curData.uid == undefined) continue;
            var bet = parseInt(curData.bet);
            if (!bet) continue;
            gamerBet.push(bet);
            if (curData.action === Config.GameActionType.FOLD) continue;
            if (!!betMap[bet]) betMap[bet]++;else betMap[bet] = 1;
        }

        //生成各池对应的投注额并排序
        this.potBet = [];
        for (var key in betMap) {
            this.potBet.push(parseInt(key));
        }
        this.potBet.sort(function (a, b) {
            return a > b;
        });

        //生成主池和边池,0号位置是主池, 其它边池
        var curPot = [];
        var lastBet = 0;
        for (var i = 0; i < this.potBet.length; i++) {
            var bet = this.potBet[i];
            var potBet = 0;
            for (var j = 0; j < gamerBet.length; j++) {
                if (gamerBet[j] >= lastBet) potBet += Math.min(bet, gamerBet[j]) - lastBet;
            }
            curPot.push(potBet);
            lastBet = bet;
        }
        // console.log("::this.pot:::",this.pot);
        if (this.curRoomData.checkPotEqual(curPot, this.pot) == false) {
            this.pot = curPot;
            this.curRoomData.SetTableFlag(TableFlags.TABLE_FLAG_POT);
        }
    },

    // 牌局结束时调用
    endRound: function endRound() {
        //计算牌型分
        var scoreMap = {}; //分数分布
        var self = this;
        var unFoldNum = 0;
        var curData;
        var realPaly = this.curRoomData.RealPlay;
        for (var i = 0; i < realPaly.length; i++) {
            curData = realPaly[i];
            if (curData.uid == undefined) continue;
            if (curData.action !== Config.GameActionType.FOLD) {
                unFoldNum++;
                var CardAry = PokerJS.makeSurePoker(curData.showCard.concat(this.curRoomData.showCard));
                var score = CardAry.Value;
                scoreMap[score] = scoreMap[score] || [];
                scoreMap[score].push(curData);
            }
        }
        var rank = []; //分数排行
        for (var key in scoreMap) {
            rank.push(parseInt(key));
        }
        rank.sort(function (a, b) {
            return a < b;
        });
        //按分数从高到低开始分钱
        var result = [];
        var minB = 0;
        for (var r = 0; r < rank.length; r++) {
            var gamers = scoreMap[rank[r]];
            //从主池依次往上对每个池进行瓜分
            for (var b = minB; b < this.pot.length; b++) {
                //统计有几个人够资格分这个池
                var minBet = this.potBet[b];
                var temp = [];
                for (var p = 0; p < gamers.length; p++) {
                    if (gamers[p].bet >= minBet) temp.push(gamers[p]);
                }
                var cnt = temp.length;
                if (cnt <= 0) {
                    //这几个人已经把能参与的池分配完毕了，不用再循环后边的池了，可以后边的人继续了
                    break;
                }
                //有资格的人正式瓜分本池
                var bet = Math.floor(this.pot[b] / cnt);
                for (var t = 0; t < cnt; t++) {
                    var gamer = temp[t];
                    result.push([gamer.uid, b, bet]);
                }
                minB = b + 1; //这个池已经空了，不再进行结算
            }
        }
        // console.log(":::result:::",result);
        if (unFoldNum > 1) {
            this.curRoomData.hasShowdown = true;
        } else {
            this.curRoomData.hasShowdown = false;
        }
        this.curRoomData.onSetResult(result);
        this.curRoomData.SetRoundOverJn();
    },

    // ---------------|||||||||||||||||||---新手引导--------------------

    // 同时执行三个玩家的操作
    updatePlayerAction: function updatePlayerAction(actionList) {
        var len = actionList.length;
        var actionObj = null;
        var isOver = false;
        var count = 0;
        // console.log("::;actionList:22:;",actionList);
        var curData,
            curCtrl = null;
        var realPaly = this.curRoomData.RealPlay;
        for (var i = 0; i < realPaly.length; i++) {
            curData = realPaly[i];
            if (curData.uid == undefined) continue; //初始化的时候不需要此判断，更新的时候需要
            for (var j = 0; j < len; j++) {
                actionObj = actionList[j];
                if (actionObj.seat == curData.seat) {
                    count++;
                    var curTarget = this.getPlayerInfoCtrlAndNode(curData.uid);
                    curCtrl = curTarget.targetCtrl;
                    if (curCtrl) {
                        curData.action = actionObj.action;
                        curCtrl.onChangActionflagImg(actionObj.action);
                        // console.log("::;curData.action::",curData.action,actionObj.num);
                        if (actionObj.num) {
                            curCtrl.setJettonShow(actionObj.num);
                        }
                    }
                }
                if (count == len) {
                    isOver = true;
                    break;
                }
            }
            if (true == isOver) break;
        }
    },

    // 跳过新手引导
    onCloseGuide: function onCloseGuide() {
        this.onGameOverClean();
        UITools.onSetNodeVisible(this.playerSeatContainer, false);
        this.onClosePanel(1);
    },

    clearAllData: function clearAllData() {}

});

cc._RF.pop();
},{"BaseUIPanel":"BaseUIPanel","Config":"Config","Moment":"Moment","PokerJS":"PokerJS","UITools":"UITools"}],"PlayerInfoCacheManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, '1c784MDWHNLpZRngqC/rhD4', 'PlayerInfoCacheManager');
// Scripts/Manager/PlayerInfoCacheManager.js

"use strict";

/**
* Created by PC on 2017/5/4.
*/

/*
* 'uid', 'nick', 'sex', 'avatar', 'gold', 'bean', 'flower', 'gameCount', 'winCount', 'maxWinBet', 'preFlopCallRaise', 'preFlopRaise', 'preFlopCall',
* 'inFlopFold', 'preFlopNoRaise', 'inFlopRaise', 'inFlopAnteBet', 'inFlopAnteNoBet', 'postFlopRaise', 'postFlopCall'
* */
var PlayerInfoCacheManager = cc.Class({
    properties: {
        cacheDict: [],
        _callback: null,
        getResult: [],
        _waitList: [],
        _isRequesting: false
    },

    getPlayerInfo: function getPlayerInfo(_uids, _keys, _callback) {

        if (this._isRequesting == true) {
            this._waitList.push({ uids: _uids, keys: _keys, callback: _callback });
            return;
        }

        this._isRequesting = true;

        var uid;
        var info;
        var requestUid = [];
        var requestKey = [];
        this.getResult = [];
        for (var i = 0; i < _uids.length; i++) {
            uid = _uids[i];
            info = null;
            if (this.cacheDict.hasOwnProperty(uid) == true) {
                info = this.cacheDict[uid];
            }

            if (info == null) {
                requestUid.push(uid);
                requestKey = _keys;
            } else if (this.checkHasProperty(info, _keys, requestKey) == true) {
                requestUid.push(uid);
            } else {
                this.getResult.push(info);
            }
        }

        //check the all item either or not in the resultlist
        if (this.getResult.length == _uids.length && _callback != null) {
            _callback(this.getResult);
            this._isRequesting = false;
            this.requestNext();
        } else {
            this._callback = _callback;
            var data = {};
            data.uids = requestUid;
            data.keys = requestKey;
            Global.messageManager.getPlayerInfo(data, this.requirePlayerInfo.bind(this));
        }
    },

    requestNext: function requestNext() {
        var data;
        if (this._waitList.length > 0) {
            data = this._waitList.pop();
            this.getPlayerInfo(data.uids, data.keys, data.callback);
        }
    },

    requirePlayerInfo: function requirePlayerInfo(_data) {
        if (_data.code != 0) return;

        var data;
        for (var key in _data.data) {
            data = _data.data[key];
            data.uid = key;
            this.saveInCache(data);
            this.getResult.push(this.cacheDict[data.uid]);
        }

        if (this._callback != null) {
            this._callback(this.getResult);
            this._callback = null;
        }

        this._isRequesting = false;
        this.requestNext();
    },

    saveInCache: function saveInCache(_data) {
        if (this.cacheDict.hasOwnProperty(_data.uid) == true) {
            for (var key in _data) {
                this.cacheDict[_data.uid][key] = _data[key];
            }
        } else {
            this.cacheDict[_data.uid] = _data;
        }
    },

    checkHasProperty: function checkHasProperty(_info, _keys, _result) {
        var key;
        var result = false;
        var itemResult;
        for (var i = 0; i < _keys.length; i++) {
            key = _keys[i];
            if (_info.hasOwnProperty(key) == false) {
                itemResult = this.fillInRequest(key, _result);
                if (itemResult == true) result = true;
            }
        }

        return result;
    },

    fillInRequest: function fillInRequest(_src, _tar) {
        if (_tar.indexOf(_src) >= 0) return false;

        _tar.push(_src);

        return true;
    }
});

module.exports = PlayerInfoCacheManager;

cc._RF.pop();
},{}],"PlayerInfo":[function(require,module,exports){
"use strict";
cc._RF.push(module, '03453YOETxHF7yNrxzgdve/', 'PlayerInfo');
// Scripts/Other/PlayerInfo.js

'use strict';

var Config = require('Config');
var UITools = require("UITools");

var PlayerInfo = cc.Class({
    properties: {
        PlayerUserAccount: '', //玩家账号
        PlayerUserPassWord: '', //玩家密码
        bgSound: 1, //背景音乐开关//默认开
        actSound: 1, //音效开关//默认开
        vibratorRemind: 1, //振动开关//默认开
        autoBuriedCard: 0, //自动埋牌开关
        fourColorCard: 1, //四色牌

        needUpdateApplyCount: true,
        applyCount: 0,

        hiddenTreasure: 0, //隐藏财富//默认关
        shieldFriendApply: 0, //拒绝好友申请//默认关
        shieldOnlooker: 0, //屏蔽旁观聊天//默认关

        _isFirstEnter: true //第一次进入，使用服务器数据
    },

    playerInfoInit: function playerInfoInit() {
        Global.playerInfo._isFirstEnter = true;
        //音乐
        var mState = UITools.GameLocalStorage.get("bgSound");
        if (undefined == mState) mState = this.bgSound;
        this.onSetMusicState(mState, false);

        // 声音
        mState = UITools.GameLocalStorage.get("actSound");
        if (undefined == mState) mState = this.actSound;
        this.onSetSoundState(mState, false);

        // 振动
        mState = UITools.GameLocalStorage.get("vibratorRemind");
        if (undefined == mState) mState = this.vibratorRemind;
        this.onSetVibrateState(mState, false);

        // 自动埋牌
        mState = UITools.GameLocalStorage.get("autoBuriedCard");
        if (undefined == mState) mState = this.autoBuriedCard;
        this.onSetAutoCardState(mState, false);

        // 四色牌
        mState = UITools.GameLocalStorage.get("fourColorCard");
        if (undefined == mState) mState = this.fourColorCard;
        this.onSetFourColorCardState(mState, false);

        //财富
        mState = UITools.GameLocalStorage.get("hiddenTreasure");
        if (undefined == mState) mState = this.hiddenTreasure;
        this.onSetWealthState(mState, false);

        //拒绝好友申请
        mState = UITools.GameLocalStorage.get("shieldFriendApply");
        if (undefined == mState) mState = this.shieldFriendApply;
        this.onSetApplicationState(mState, false);

        //屏蔽旁观聊天
        mState = UITools.GameLocalStorage.get("shieldOnlooker");
        if (undefined == mState) mState = this.shieldOnlooker;
        this.onSetChatState(mState, false);
    },

    // 音乐设置
    onSetMusicState: function onSetMusicState(value, isSend) {
        if (true == value) {
            value = 1;
        } else {
            value = 0;
        }
        this.bgSound = value;
        UITools.GameLocalStorage.set("bgSound", value);
        //是否向服务器发数据
        if (isSend) Global.messageManager.onChangeSetting({ key: "bgSound", value: this.bgSound }, this.onChangeSettingCallBack.bind(this));
    },

    // 声音设置
    onSetSoundState: function onSetSoundState(value, isSend) {
        if (true == value) {
            value = 1;
        } else {
            value = 0;
        }
        this.actSound = value;
        UITools.GameLocalStorage.set("actSound", value);
        //是否向服务器发数据
        if (isSend) Global.messageManager.onChangeSetting({ key: "actSound", value: this.actSound }, this.onChangeSettingCallBack.bind(this));
    },

    // 振动设置
    onSetVibrateState: function onSetVibrateState(value, isSend) {
        if (true == value) {
            value = 1;
        } else {
            value = 0;
        }
        this.vibratorRemind = value;
        UITools.GameLocalStorage.set("vibratorRemind", value);
        //是否向服务器发数据
        if (isSend) Global.messageManager.onChangeSetting({ key: "vibratorRemind", value: this.vibratorRemind }, this.onChangeSettingCallBack.bind(this));
    },

    // 自动埋牌设置设置
    onSetAutoCardState: function onSetAutoCardState(value, isSend) {
        if (true == value) {
            value = 1;
        } else {
            value = 0;
        }
        this.autoBuriedCard = value;
        UITools.GameLocalStorage.set("autoBuriedCard", value);
        //是否向服务器发数据
        if (isSend) Global.messageManager.onChangeSetting({ key: "autoBuriedCard", value: this.autoBuriedCard }, this.onChangeSettingCallBack.bind(this));
    },

    // 四色牌设置设置
    onSetFourColorCardState: function onSetFourColorCardState(value, isSend) {
        if (true == value) {
            value = 1;
        } else {
            value = 0;
        }
        this.fourColorCard = value;
        UITools.GameLocalStorage.set("fourColorCard", value);
        //是否向服务器发数据
        if (isSend) Global.messageManager.onChangeSetting({ key: "fourColorCard", value: this.fourColorCard }, this.onChangeSettingCallBack.bind(this));
    },

    // 财富
    onSetWealthState: function onSetWealthState(value, isSend) {
        if (true == value) {
            value = 1;
        } else {
            value = 0;
        }
        this.hiddenTreasure = value;
        UITools.GameLocalStorage.set("hiddenTreasure", value);
        //是否向服务器发数据
        if (isSend) Global.messageManager.onChangeSetting({ key: "hiddenTreasure", value: this.hiddenTreasure }, this.onChangeSettingCallBack.bind(this));
    },

    // 拒绝好友申请
    onSetApplicationState: function onSetApplicationState(value, isSend) {
        if (true == value) {
            value = 1;
        } else {
            value = 0;
        }
        this.shieldFriendApply = value;
        UITools.GameLocalStorage.set("shieldFriendApply", value);
        //是否向服务器发数据
        if (isSend) Global.messageManager.onChangeSetting({ key: "shieldFriendApply", value: this.shieldFriendApply }, this.onChangeSettingCallBack.bind(this));
    },

    // 屏蔽旁观
    onSetChatState: function onSetChatState(value, isSend) {
        if (true == value) {
            value = 1;
        } else {
            value = 0;
        }
        this.shieldOnlooker = value;
        UITools.GameLocalStorage.set("shieldOnlooker", value);
        //是否向服务器发数据
        if (isSend) Global.messageManager.onChangeSetting({ key: "shieldOnlooker", value: this.shieldOnlooker }, this.onChangeSettingCallBack.bind(this));
    },

    ClearPlayerInfo: function ClearPlayerInfo() {
        this.PlayerUserAccount = ''; //玩家账号
        this.PlayerUserPassWord = ''; //玩家密码
        this.isGoddess = false;
    },

    getFriendApplyItemCount: function getFriendApplyItemCount() {
        if (this.needUpdateApplyCount == true) {
            this.applyCount = 0;
            for (var key in this.friendApplys) {
                this.applyCount++;
            }
            this.needUpdateApplyCount = false;
        }

        return this.applyCount;
    },

    getFriendItemCount: function getFriendItemCount() {
        if (this.needUpdateFriendCount == true) {
            this.friendCount = 0;
            for (var key in this.friends) {
                this.friendCount++;
            }
            this.needUpdateFriendCount = false;
        }

        return this.friendCount;
    },

    getMailItemCount: function getMailItemCount() {
        if (this.needUpdateMailCount == true) {
            this.mailCount = 0;
            for (var key in this.mails) {
                this.mailCount++;
            }
            this.needUpdateMailCount = false;
        }

        return this.mailCount;
    },

    //设置更改后回调函数(服务器返回数据)
    onChangeSettingCallBack: function onChangeSettingCallBack(_data) {
        cc.log("dataCode : " + _data.code);
        if (_data.code != 0) return;
    }

});
module.exports = PlayerInfo;

cc._RF.pop();
},{"Config":"Config","UITools":"UITools"}],"PokerJS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '5710fFvpDhNlaDlqHl4cjss', 'PokerJS');
// Scripts/Tools/PokerJS.js

'use strict';

//-----------------------------------------------------------------------------------------
// 牌花色定义
var CRD_SUIT = {
    CRDS_EMPTY: 0, // 占位
    CRDS_SPADE: 1, // 黑桃
    CRDS_HEART: 2, // 红桃
    CRDS_CLUB: 3, // 梅花
    CRDS_DIAMOND: 4 };

//-----------------------------------------------------------------------------------------
// 牌数字定义
var CRD_NUM = {
    CRDN_EMPTY: 0, // 占位
    CRDN_N2: 2, // Number 2
    CRDN_N3: 3,
    CRDN_N4: 4,
    CRDN_N5: 5,
    CRDN_N6: 6,
    CRDN_N7: 7,
    CRDN_N8: 8,
    CRDN_N9: 9,
    CRDN_N10: 10,
    CRDN_J: 11, // JACK
    CRDN_Q: 12, // QUEEN
    CRDN_K: 13, // KING
    CRDN_A: 14 };

//-----------------------------------------------------------------------------------------
// 牌型定义
var CRD_POKER = {
    POKER_EMPTY: 0, // 占位
    POKER_ROYAL_FLUSH: 10, // 皇家同花顺(royal flush): 由AKQJ10五张组成, 并且这5张牌花色相同
    POKER_STRAIGHT_FLUSH: 9, // 同花顺(straight flush): 由五张连张同花色的牌组成
    POKER_FOUR_KIND: 8, // 4条(four of a kind): 4张同点值的牌加上一张其他任何牌
    POKER_FULL_HOUSE: 7, // 满堂红(full house)(又称"葫芦"): 3张同点值加上另外一对
    POKER_FLUSH: 6, // 同花(flush): 5张牌花色相同, 但是不成顺子
    POKER_STRAIGHT: 5, // 顺子(straight)：五张牌连张, 至少一张花色不同
    POKER_THREE_KIND: 4, // 3条(three of a kind)：三张牌点值相同，其他两张各异
    POKER_TWO_PAIRS: 3, // 两对(two pairs)：两对加上一个杂牌
    POKER_ONE_PAIRS: 2, // 一对(one pair)：一对加上3张杂牌
    POKER_HIGH_CARD: 1 };

//-----------------------------------------------------------------------------------------
var g_Cards = [];
(function () {
    var Card = g_Cards;
    Card[0] = { suit: 0, num: 0, indx: 0 };
    for (var idx = 1; idx <= 52; idx++) {
        Card[idx] = { suit: (idx - 1) % 4 + 1, num: Math.floor((idx - 1) / 4) + 2, indx: idx };
    }
})();

//-----------------------------------------------------------------------------------------
// 牌型判断函数
var g_pokerfunc = [
//isPokerRoyalflush,      // 皇家同花顺(royal flush): 由AKQJ10五张组成, 并且这5张牌花色相同
isPokerStraightflush, // 同花顺(straight flush): 由五张连张同花色的牌组成 标记 皇家同花顺
isPokerFourkind, // 4条(four of a kind): 4张同点值的牌加上一张其他任何牌
isPokerFullhouse, // 满堂红(full house)(又称"葫芦"): 3张同点值加上另外一对
isPokerFlush, // 同花(flush): 5张牌花色相同, 但是不成顺子
isPokerStraight, // 顺子(straight)：五张牌连张, 至少一张花色不同
isPokerThreekind, // 3条(three of a kind)：三张牌点值相同，其他两张各异
isPokerTwopairs, // 两对(two pairs)：两对加上一个杂牌
isPokerOnepairs, // 一对(one pair)：一对加上3张杂牌
isPokerHighcard];

// 使用说明:
// var crdIndxAry;          // 假如牌索引数组, 5张
// var result = cards.makeSurePoker(crdIndxAry);   // 成功则返回一个牌型和牌数字组合值, 否则 0

//-----------------------------------------------------------------------------------------
// 确定牌型, 并返回一个组合值 
var makeSurePoker = function makeSurePoker(vCrdIndxAry) {
    var rlt = { PkrName: '', OutPkr: CRD_POKER.POKER_EMPTY, Value: 0, OutCrd: [], CrdIndx: [], ResName: '' };
    if (vCrdIndxAry.length < 5) return rlt;
    var crdArry = []; // 牌型顺序的牌
    for (var i = 0; i < vCrdIndxAry.length; i++) {
        crdArry.push(g_Cards[vCrdIndxAry[i]]); // 找到原始定义
    }

    //console.log('crdArry1:', crdArry);
    var val = do_make_poker(crdArry);
    //console.log('crdArry2:', crdArry);
    rlt.PkrName = crdArry.PkrName; //牌型名
    rlt.ResName = crdArry.ResName; //牌型名
    rlt.OutPkr = crdArry.OutPkr; //牌型对应值
    rlt.Value = val; //排序用牌型大小
    rlt.OutCrd = crdArry.OutCrd; //用作比大小的牌
    rlt.CrdIndx = vCrdIndxAry;
    rlt.outCardIdxAry = [];
    for (i = 0; i < rlt.OutCrd.length; i++) {
        rlt.outCardIdxAry.push(rlt.OutCrd[i].indx);
    }

    //console.log('牌型结果:', rlt);

    return rlt;
};
// 判断俩个数字是否是一对
var isTwainPoker = function isTwainPoker(vCrdIndxAry) {
    var crdArry = [];
    var card1 = g_Cards[vCrdIndxAry[0]]; // 牌型顺序的牌
    var card2 = g_Cards[vCrdIndxAry[1]]; // 牌型顺序的牌
    if (card1.num == card2.num) {
        return true;
    }
    return false;
};

//-----------------------------------------------------------------------------------------
function make_crd(vSuit, vNum) {
    return { suit: vSuit, num: vNum, indx: 0 };
}

//-----------------------------------------------------------------------------------------
// 牌型测试

// CRDS_EMPTY: 0,	// 占位
// CRDS_SPADE: 1,	// 黑桃
// CRDS_HEART: 2,	// 红桃
// CRDS_CLUB: 3,	// 梅花
// CRDS_DIAMOND: 4,	// 方片
var testPoker = function testPoker() {
    //console.log('g_Cards:', g_Cards);

    var rlt = { PkrName: '', OutPkr: CRD_POKER.POKER_EMPTY, Value: 0, OutCrd: [], ResName: '' };

    var crds = [];
    crds.push(make_crd(CRD_SUIT.CRDS_DIAMOND, CRD_NUM.CRDN_N2));
    crds.push(make_crd(CRD_SUIT.CRDS_SPADE, CRD_NUM.CRDN_N6));
    crds.push(make_crd(CRD_SUIT.CRDS_DIAMOND, CRD_NUM.CRDN_N3));
    crds.push(make_crd(CRD_SUIT.CRDS_SPADE, CRD_NUM.CRDN_N5)); //A
    crds.push(make_crd(CRD_SUIT.CRDS_HEART, CRD_NUM.CRDN_N4));
    crds.push(make_crd(CRD_SUIT.CRDS_SPADE, CRD_NUM.CRDN_Q));
    crds.push(make_crd(CRD_SUIT.CRDS_DIAMOND, CRD_NUM.CRDN_N7));
    var val = do_make_poker(crds);
    rlt.PkrName = crds.PkrName; //牌型名
    rlt.ResName = crds.ResName; //牌型名
    rlt.OutPkr = crds.OutPkr; //牌型对应值
    rlt.Value = val; //排序用牌型大小
    rlt.OutCrd = crds.OutCrd; //用作比大小的牌

    console.log('牌型结果1:', rlt.PkrName, rlt.ResName, val);

    var crds2 = [];

    crds2.push(make_crd(CRD_SUIT.CRDS_DIAMOND, CRD_NUM.CRDN_N2));
    crds2.push(make_crd(CRD_SUIT.CRDS_DIAMOND, CRD_NUM.CRDN_N3));
    crds2.push(make_crd(CRD_SUIT.CRDS_SPADE, CRD_NUM.CRDN_A));
    crds2.push(make_crd(CRD_SUIT.CRDS_DIAMOND, CRD_NUM.CRDN_N5)); //A
    crds2.push(make_crd(CRD_SUIT.CRDS_DIAMOND, CRD_NUM.CRDN_N4));

    crds2.push(make_crd(CRD_SUIT.CRDS_SPADE, CRD_NUM.CRDN_Q));
    crds2.push(make_crd(CRD_SUIT.CRDS_HEART, CRD_NUM.CRDN_N8));
    val = do_make_poker(crds2);
    rlt.PkrName = crds2.PkrName; //牌型名
    rlt.ResName = crds2.ResName; //牌型名
    rlt.OutPkr = crds2.OutPkr; //牌型对应值
    rlt.Value = val; //排序用牌型大小
    rlt.OutCrd = crds2.OutCrd; //用作比大小的牌


    console.log('牌型结果2:', rlt.PkrName, rlt.ResName, val);
};

//-----------------------------------------------------------------------------------------
function do_make_poker(crdArry) {
    crdArry.sort(sort_crd_by_num_dwn); // 按从大到小排序
    crdArry.OutCrd = [];
    crdArry.PkrName = '';
    crdArry.ResName = '';
    crdArry.OutPkr = CRD_POKER.POKER_EMPTY;

    // 确定牌型
    var curPoker = CRD_POKER.POKER_EMPTY; // 最终牌型
    for (var i = 0; i < g_pokerfunc.length; i++) {
        var func = g_pokerfunc[i];
        if (func(crdArry)) break;
    }
    if (crdArry.OutPkr != CRD_POKER.POKER_EMPTY) {
        var vOut = crdArry.OutPkr * 10000000000; // 牌型基础值
        var vBase = [100000000, 1000000, 10000, 100, 10];
        for (var i = 0; i < crdArry.OutCrd.length - 1; i++) // 最后一张可能是 A
        {
            vOut += crdArry.OutCrd[i].num * vBase[i];
        }
        //console.log("Last:", crdArry.OutCrd[4])
        var vNum = crdArry.OutCrd[0].num;
        if (vNum == CRD_NUM.CRDN_A) {
            var curNum = crdArry.OutCrd[1].num;
            if (crdArry.OutPkr == CRD_POKER.POKER_STRAIGHT && curNum == CRD_NUM.CRDN_N2) {
                // 如果是最小的顺子顺子
                vOut += 1;
                vOut -= 1300000000;
            } else {
                vOut += 14;
            }
        } else vOut += vNum;

        return vOut;
    }
    return 0;
}

//-----------------------------------------------------------------------------------------
//
// 牌型判断函数
//
// 牌型大小依序为: 同花顺 > 四条 > 葫芦 > 同花 > 顺子 > 三条 > 两对 > 一对 > 高牌
//
function clear_my_data(vCrdIn) {

    vCrdIn.OutPkr = CRD_POKER.POKER_EMPTY;
    vCrdIn.OutCrd = [];
    vCrdIn.PkrName = '';
    vCrdIn.ResName = '';
}
//------------------------------------------------------------------------
// 皇家同花顺(royal flush): 由AKQJ10五张组成, 并且这5张牌花色相同
// function isPokerRoyalflush(vCrdIn) {
//     if(isPokerStraightflush(vCrdIn))
//     {
//         var vCrd = vCrdIn.OutCrd[0];
//         if(vCrd.num == CRD_NUM.CRDN_A)
//         {
//             vCrdIn.PkrName= '皇家同花顺';
//             vCrdIn.OutPkr = CRD_POKER.POKER_ROYAL_FLUSH;	// 皇家同花顺
//             return true;
//         }
//     }
//     return false;
// };
function remove_same_numAndColor(vCrdIn, mainColor) {
    var vOut = [];
    var curData = null;
    for (var j = 0; j < vCrdIn.length; ++j) {
        var p = vCrdIn[j];
        if (null == curData) {
            if (p.suit == mainColor) {
                vOut.push(p);
                curData = p;
            }
        } else {
            if (curData.num != p.num && p.suit == mainColor) {
                vOut.push(p);
                curData = p;
            }
        }
    }
    return vOut;
}

// 相同颜色的顺子判断
function isPokerStraightTwo(vCrdIn, mainColor) {
    clear_my_data(vCrdIn);
    var vOut = remove_same_numAndColor(vCrdIn, mainColor);
    if (vOut.length < 5) {
        return false;
    }
    var num = vCrdIn[0].num;
    for (var j = 0; j < vOut.length && vCrdIn.OutCrd.length < 5; ++j, --num) {
        var p = vOut[j];
        if (p.num == num) {
            vCrdIn.OutCrd.push(p);
            continue;
        }
        num = p.num;
        vCrdIn.OutCrd = [];
        vCrdIn.OutCrd.push(p);
    }
    if (vCrdIn.OutCrd.length < 5) {
        vCrdIn.OutCrd = [];
        if (vOut[0].num == CRD_NUM.CRDN_A) {
            num = 2;
            vCrdIn.OutCrd.push(vOut[0]);
            for (var j = vOut.length - 1; j >= 0 && vCrdIn.OutCrd.length < 5; --j) {
                var p = vOut[j];
                if (p.num > 5) break;
                if (p.num == num) {
                    ++num;
                    vCrdIn.OutCrd.push(p);
                    continue;
                }
            }
        }
    }
    if (vCrdIn.OutCrd.length >= 5) {
        vCrdIn.OutPkr = CRD_POKER.POKER_STRAIGHT; // 得到的牌型
        vCrdIn.PkrName = "顺子";
        vCrdIn.ResName = "num_shunzi";
        return true;
    }
    return false;
};

//------------------------------------------------------------------------
// 同花顺(straight flush): 由五张连张同花色的牌组成
function isPokerStraightflush(vCrdIn) {
    clear_my_data(vCrdIn);
    var mainColor = get_main_color(vCrdIn);
    if (mainColor <= 0) return false;
    if (isPokerStraightTwo(vCrdIn, mainColor)) {
        for (var i = 0; i < vCrdIn.OutCrd.length; ++i) {
            var vCrd = vCrdIn.OutCrd[i];
            if (vCrd.suit != mainColor) return false;
        }
        var vCrd = vCrdIn.OutCrd[0];
        var cardData = vCrdIn.OutCrd[1];
        if (vCrd.num == CRD_NUM.CRDN_A && cardData.num == CRD_NUM.CRDN_K) {
            vCrdIn.PkrName = '皇家同花顺';
            vCrdIn.OutPkr = CRD_POKER.POKER_ROYAL_FLUSH; // 皇家同花顺
            vCrdIn.ResName = "num_huangjia";
        } else {
            vCrdIn.PkrName = '同花顺';
            vCrdIn.OutPkr = CRD_POKER.POKER_STRAIGHT_FLUSH;
            vCrdIn.ResName = "num_tonghuashun";
        }
        return true;
    }
    return false;
};

//------------------------------------------------------------------------
// 4条(four of a kind): 4张同点值的牌加上一张其他任何牌
function isPokerFourkind(vCrdIn) {
    if (make_kind_group_must(vCrdIn, 4, 4, 1, 0, 5)) {
        vCrdIn.OutPkr = CRD_POKER.POKER_FOUR_KIND;
        vCrdIn.PkrName = '金刚';
        vCrdIn.ResName = "num_jingang";
        return true;
    }
    return false;
};

//------------------------------------------------------------------------
// 满堂红(full house)(又称"葫芦"): 3张同点值加上另外一对
function isPokerFullhouse(vCrdIn) {
    if (make_kind_group_must(vCrdIn, 3, 3, 2, 2, 5)) {
        vCrdIn.OutPkr = CRD_POKER.POKER_FULL_HOUSE;
        vCrdIn.PkrName = '葫芦';
        vCrdIn.ResName = "num_hulu";
        return true;
    }
    return false;
};

//------------------------------------------------------------------------
function get_main_color(vCrdIn) {
    var mainColor = 0;
    var colors = [0, 0, 0, 0, 0];
    for (var i = 0; i < vCrdIn.length; ++i) {
        var vCrd = vCrdIn[i];
        colors[vCrd.suit]++;
        if (colors[vCrd.suit] >= 5) {
            mainColor = vCrd.suit;
            break;
        }
    }
    return mainColor;
}

//------------------------------------------------------------------------
// 同花(flush): 5张牌花色相同, 但是不成顺子
function isPokerFlush(vCrdIn) {
    clear_my_data(vCrdIn);
    var mainColor = get_main_color(vCrdIn);
    if (mainColor <= 0) return false;
    for (var i = 0; i < vCrdIn.length; ++i) {
        var vCrd = vCrdIn[i];
        if (vCrd.suit == mainColor) {
            vCrdIn.OutCrd.push(vCrd);
            if (vCrdIn.OutCrd.length >= 5) {
                vCrdIn.PkrName = '同花';
                vCrdIn.OutPkr = CRD_POKER.POKER_FLUSH;
                vCrdIn.ResName = "num_tonghua";
                return true;
            }
        }
    }
    return false;
};

//------------------------------------------------------------------------
// 去掉同数字的
function remove_same_num(vCrdIn) {
    var vOut = [];
    var num = -1;
    for (var j = 0; j < vCrdIn.length; ++j) {
        var p = vCrdIn[j];
        if (p.num != num) {
            vOut.push(p);
            num = p.num;
        }
    }
    return vOut;
}

//------------------------------------------------------------------------
// 顺子(straight)：五张牌连张, 至少一张花色不同
function isPokerStraight(vCrdIn) {
    clear_my_data(vCrdIn);
    var vOut = remove_same_num(vCrdIn);
    if (vOut.length < 5) {
        return false;
    }
    var num = vCrdIn[0].num;
    for (var j = 0; j < vOut.length && vCrdIn.OutCrd.length < 5; ++j, --num) {
        var p = vOut[j];
        if (p.num == num) {
            vCrdIn.OutCrd.push(p);
            continue;
        }
        num = p.num;
        vCrdIn.OutCrd = [];
        vCrdIn.OutCrd.push(p);
    }
    if (vCrdIn.OutCrd.length < 5) {
        vCrdIn.OutCrd = [];
        if (vOut[0].num == CRD_NUM.CRDN_A) {
            num = 2;
            vCrdIn.OutCrd.push(vOut[0]);
            for (var j = vOut.length - 1; j >= 0 && vCrdIn.OutCrd.length < 5; --j) {
                var p = vOut[j];
                if (p.num > 5) break;
                if (p.num == num) {
                    ++num;
                    vCrdIn.OutCrd.push(p);
                    continue;
                }
            }
        }
    }
    if (vCrdIn.OutCrd.length >= 5) {
        vCrdIn.OutPkr = CRD_POKER.POKER_STRAIGHT; // 得到的牌型
        vCrdIn.PkrName = "顺子";
        vCrdIn.ResName = "num_shunzi";
        return true;
    }
    return false;
};

//------------------------------------------------------------------------
// 3条(three of a kind)：三张牌点值相同，其他两张各异
function isPokerThreekind(vCrdIn) {
    if (make_kind_group_must(vCrdIn, 3, 3, 0, 1, 5)) {
        vCrdIn.OutPkr = CRD_POKER.POKER_THREE_KIND;
        vCrdIn.PkrName = '3条';
        vCrdIn.ResName = "num_santiao";
        return true;
    }
    return false;
};

//------------------------------------------------------------------------
// 两对(two pairs)：两对加上一个杂牌
function isPokerTwopairs(vCrdIn) {
    if (make_kind_group_must(vCrdIn, 2, 4, 0, 1, 5)) {
        vCrdIn.OutPkr = CRD_POKER.POKER_TWO_PAIRS;
        vCrdIn.PkrName = '两对';
        vCrdIn.ResName = "num_liangdui";
        return true;
    }
    return false;
};

//------------------------------------------------------------------------
// 一对(one pair)：一对加上3张杂牌
function isPokerOnepairs(vCrdIn) {
    if (make_kind_group_must(vCrdIn, 2, 2, 0, 1, 5)) {
        vCrdIn.OutPkr = CRD_POKER.POKER_ONE_PAIRS;
        vCrdIn.PkrName = '一对';
        vCrdIn.ResName = "num_yidui";
        return true;
    }
    return false;
};

//------------------------------------------------------------------------
// 高牌(high card)：不符合上面任何一种牌型的牌型, 由单牌且不连续不同花的组成
function isPokerHighcard(vCrdIn) {
    clear_my_data(vCrdIn);

    for (var j = 0; j < vCrdIn.length && vCrdIn.OutCrd.length < 5; ++j) {
        var p = vCrdIn[j];
        vCrdIn.OutCrd.push(p);
    }
    vCrdIn.OutPkr = CRD_POKER.POKER_HIGH_CARD;
    vCrdIn.PkrName = '高牌';
    vCrdIn.ResName = "num_gaopai";
    return vCrdIn.OutCrd.length >= 5; // 高牌(high card)
};

//------------------------------------------------------------------------
// 构造 4条 或 3条
// vLimitGrp 同数字数量约束
// vLmt1 vLimitGrp 得到的最大使用量
// vLimitGrp2 附加用的同类型牌数量
// vLmt2  vLimitGrp2 里取几张
// vMax 最多输出数量
// function make_kind_group(vCrdIn, vLimitGrp, vLmt1, vLimitGrp2, vLmt2, vMax)
// {
//     vCrdIn.OutCrd = [];
//     var grp = make_group(vCrdIn);   // 相同数字
//     var keys = get_map_keys(grp);   // 顺序
//     for(var i = 0; (i < keys.length) && (vCrdIn.OutCrd.length < vLmt1); ++i)
//     {
//         var vAry = grp[ keys[i] ];
//         if(vAry.length == vLimitGrp)
//         {
//             for(var j = 0; j < vAry.length; ++j)
//             {
//                 vCrdIn.OutCrd.push(vAry[j]);
//             }
//             grp[keys[i]] = null;
//         }
//     }
//     if(vCrdIn.OutCrd.length >= vLmt1)
//     {
//         for(var i = 0; (i < keys.length) && (vCrdIn.OutCrd.length < vMax); ++i)
//         {
//             var vAry = grp[keys[i]];
//             if(vAry && ((vLimitGrp2 <= 0) || (vAry.length >= vLimitGrp2)))
//             {
//                 for(var j = 0; (j < vAry.length) && (vCrdIn.OutCrd.length < vMax); ++j)
//                 {
//                     if((vLmt2 > 0) && (j >= vLmt2)) break;
//                     vCrdIn.OutCrd.push(vAry[j]);
//                 }
//             }
//         }
//     }
//     return (vCrdIn.OutCrd.length >= vMax);
// }

function make_kind_group_must(vCrdIn, vLimitGrp, vLmt1, vLimitGrp2, vLmt2, vMax) {
    vCrdIn.OutCrd = [];
    var grp = make_group(vCrdIn); // 相同数字
    var keys = get_map_keys(grp); // 顺序
    for (var i = 0; i < keys.length && vCrdIn.OutCrd.length < vLmt1; ++i) {
        var vAry = grp[keys[i]];
        if (vAry.length == vLimitGrp) {
            for (var j = 0; j < vAry.length; ++j) {
                vCrdIn.OutCrd.push(vAry[j]);
            }
            grp[keys[i]] = null;
        }
    }
    if (vCrdIn.OutCrd.length >= vLmt1) {
        for (var i = 0; i < keys.length && vCrdIn.OutCrd.length < vMax; ++i) {
            var vAry = grp[keys[i]];
            if (vAry && (vLimitGrp2 <= 0 || vAry.length >= vLimitGrp2)) {
                for (var j = 0; j < vAry.length && vCrdIn.OutCrd.length < vMax; ++j) {
                    if (vLmt2 > 0 && j >= vLmt2) break;
                    vCrdIn.OutCrd.push(vAry[j]);
                }
            }
        }
    }
    return vCrdIn.OutCrd.length >= vMax;
}

//------------------------------------------------------------------------
// 同数字放一起
function make_group(vInput) {
    var crd = {};
    for (var i = 0; i < vInput.length; ++i) {
        var p = vInput[i];
        var val = crd[p.num];
        if (val == undefined) {
            crd[p.num] = [];
            crd[p.num].push(p);
            continue;
        }
        val.push(p);
    }
    return crd;
}

//------------------------------------------------------------------------
// 提取键值并反转
function get_map_keys(mapObj) {
    var keys = [];
    for (var k in mapObj) {
        keys.push(k);
    }
    keys.reverse();
    return keys;
}

//-----------------------------------------------------------------------------------------
// 按牌数字大小 降序排序
function sort_crd_by_num_dwn(lhs, rhs) {
    return rhs.num > lhs.num;
};

// 导出
module.exports = {
    CRD_SUIT: CRD_SUIT, // 牌花色定义
    CRD_NUM: CRD_NUM, // 牌数字定义
    CRD_POKER: CRD_POKER, // 牌型定义
    makeSurePoker: makeSurePoker, // 牌型判断
    isTwainPoker: isTwainPoker, //判断是否是一对
    testPoker: testPoker
};

cc._RF.pop();
},{}],"PreloadManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'aa8fa0JDihFgLtjAf5pP4+s', 'PreloadManager');
// Scripts/Manager/PreloadManager.js

"use strict";

var preloadConfig = require("preLoadConfig");

var PreloadManager = cc.Class({
    properties: {
        _loadingControl: null,
        _loadList: [],
        _loadCount: 0,
        _loadedCount: 0,
        _curResUrl: ""
    },

    startLoad: function startLoad() {
        this._loadList = preloadConfig;
        this._loadCount = this._loadList.length;

        this.loadRes();
    },

    loadRes: function loadRes() {
        if (this._loadList.length <= 0) {} else {
            var data = this._loadList.shift();
            if (data.type == "scene") {
                var self = this;
                cc.director.preloadScene(data.url, function () {
                    Global.resourceManager.loadedScene[data.url] = true;
                    self._loadedCount++;
                    self._loadingControl.UpdateProgress(self._loadedCount, self._loadCount);
                    self.loadRes();
                });
            } else if (data.type == "spriteAtlas") {
                cc.loader.loadRes(data.url, cc.SpriteAtlas, this.loadCompleteCallback.bind(this));
            } else {
                cc.loader.loadRes(data.url, this.loadCompleteCallback.bind(this));
            }
            this._curResUrl = data.url;
        }
    },

    loadCompleteCallback: function loadCompleteCallback(_error, _res) {
        this._loadedCount++;
        if (_error) {} else this.parseResource(_res);
        this.loadRes();
    },

    parseResource: function parseResource(_res) {
        Global.resourceManager.setRes(this._curResUrl, _res);
    }
});

module.exports = PreloadManager;

cc._RF.pop();
},{"preLoadConfig":"preLoadConfig"}],"ProgressBarCtrl":[function(require,module,exports){
"use strict";
cc._RF.push(module, '84a43yb9OxBX6HMQxPzHQyz', 'ProgressBarCtrl');
// Scripts/UI/ProgressBarCtrl.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        ProgressBar: cc.ProgressBar },

    onLoad: function onLoad() {
        this.ProgressBar.progress = 0;
        this.count = 0; //计数次数
        this.isPlaySound = false;
        this.curPlayerData = null;
    },

    //关联数据
    onSetData: function onSetData(isSound, CurTM, maxTime, playerData) {
        // this.Parent = parent;
        this.count = 0; //计数次数
        this.curPlayerData = playerData;
        this.maxTime = maxTime;
        this.CurLeftTime = CurTM;
        this.soundTime = CurTM;
        this.isPlaySound = isSound;
        this.ClearScheduler();
        if (this.CurLeftTime <= 0) return;

        this.ProgressBar.node.color = new cc.Color(128, 255, 0);
        cc.director.getScheduler().schedule(this._onUpdateProgress.bind(this), this, 0.1);
    },

    //刷新计时器
    _onUpdateProgress: function _onUpdateProgress(dt) {
        this.CurLeftTime -= dt;
        this.count++;
        if (this.CurLeftTime > 0) {
            this.RefProgress();
            if (this.isPlaySound == true && this.count == 90) {
                Global.musicManager.playHintMusic();
                if (1 == Global.playerInfo.settings.vibratorRemind) {
                    // if(navigator.vibrate){
                    //     navigator.vibrate(1000);
                    // }
                }
            }
        } else {
            this.ClearScheduler();
        }
    },

    // 振动调用
    onVibrateFunction: function onVibrateFunction() {
        switch (cc.sys.os) {
            case cc.sys.OS_ANDROID:
                jsb.reflection.callStaticMethod("org/cocos2dx/javascript/CellphoneInfo", "getVibrator", "()V");
                break;
            case cc.sys.OS_IOS:
                // jsb.reflection.callStaticMethod("CellphoneInfo","pasteboard:",str);
                break;
            case cc.sys.OS_WINDOWS:
                break;
        }
    },

    //关闭计时器
    ClearScheduler: function ClearScheduler() {
        this.unscheduleAllCallbacks();
        this.ProgressBar.progress = 0;
    },

    // 暂停计时器
    pauseScheduler: function pauseScheduler() {
        cc.director.getScheduler().pauseTarget(this);
    },

    //恢复计时器
    resumeScheduler: function resumeScheduler() {
        cc.director.getScheduler().resumeTarget(this);
    },

    //刷新进度条显示
    RefProgress: function RefProgress() {
        var progress = this.CurLeftTime / this.maxTime;
        this.ProgressBar.progress = progress;
        this.SetProgressColor(progress);
    },

    //设置进度条颜色
    SetProgressColor: function SetProgressColor(rate) {
        if (rate <= 0) return;
        var color = new cc.Color(128, 255, 0);
        if (rate <= 0.3) {
            color = new cc.Color(255, 71, 22);
        } else if (0.3 < rate && rate <= 0.6) {
            color = new cc.Color(255, 169, 0);
        } else if (rate > 0.6) {
            color = new cc.Color(128, 255, 0);
        }
        this.ProgressBar.node.color = color;
    }

});

cc._RF.pop();
},{}],"QuickTalk":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'f3b09yCdblIVqoyAZjscQpd', 'QuickTalk');
// Scripts/GameData/config/QuickTalk.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Content: "人生难得几回搏？搏一搏单车变摩托！",
		Type: "0"
};
data["2"] = {
		PID: "2",
		Content: "求跟注，求ALLIN！",
		Type: "0"
};
data["3"] = {
		PID: "3",
		Content: "ALLIN他！",
		Type: "0"
};
data["4"] = {
		PID: "4",
		Content: "谁气我，我就推他一脸",
		Type: "0"
};
data["5"] = {
		PID: "5",
		Content: "来来来，ALLIN我！",
		Type: "0"
};
data["6"] = {
		PID: "6",
		Content: "快点下注吧，时间宝贵",
		Type: "0"
};
data["7"] = {
		PID: "7",
		Content: "各位爷，让看看牌再加钱吧",
		Type: "0"
};
data["8"] = {
		PID: "8",
		Content: "我的宝剑已经饥渴难耐了",
		Type: "0"
};
data["9"] = {
		PID: "9",
		Content: "莫偷鸡！偷鸡必被抓",
		Type: "0"
};
data["10"] = {
		PID: "10",
		Content: "你牌技这么好，地球人知道吗？",
		Type: "0"
};
data["11"] = {
		PID: "11",
		Content: "冲动是魔鬼，冷静！",
		Type: "0"
};
data["12"] = {
		PID: "12",
		Content: "很高兴能和大家一起打牌",
		Type: "0"
};
data["13"] = {
		PID: "13",
		Content: "赢了钱别走，留下你的姓名",
		Type: "0"
};
data["14"] = {
		PID: "14",
		Content: "打诚信德州哦，不偷不抢",
		Type: "0"
};
data["15"] = {
		PID: "15",
		Content: "有埋伏？不要轻举妄动",
		Type: "0"
};
data["16"] = {
		PID: "16",
		Content: "这手牌打得不错，赢得漂亮",
		Type: "0"
};
data["17"] = {
		PID: "17",
		Content: "难道你看穿我的底牌了吗？",
		Type: "0"
};
data["18"] = {
		PID: "18",
		Content: "我加注了，有胆子跟吗？",
		Type: "0"
};
data["19"] = {
		PID: "19",
		Content: "青山不改绿水长流，改天再来",
		Type: "0"
};
data["20"] = {
		PID: "20",
		Content: "难道这就是失败的滋味？",
		Type: "0"
};
data["21"] = {
		PID: "21",
		Content: "冤家牌，没办法",
		Type: "0"
};
data["22"] = {
		PID: "22",
		Content: "嘿嘿，我又赢了，感谢大家",
		Type: "0"
};
data["23"] = {
		PID: "23",
		Content: "你真是一个天生的演员",
		Type: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"ResLabJs":[function(require,module,exports){
"use strict";
cc._RF.push(module, '99700LzSYlKYrfaX9h56rDr', 'ResLabJs');
// Scripts/Other/ResLabJs.js

'use strict';

var UITools = require('UITools');
var oneJettonWidth = 37;
var baseJetton = [100000000, 25000000, 5000000, 1000000, 500000, 100000, 25000, 5000, 1000, 500, 100, 25, 5, 1];
var oneColCount = 20;
var imgJetton = ['img_chip100m', 'img_chip25m', 'img_chip5m', 'img_chip1m', 'img_chip500k', 'img_chip100k', 'img_chip25k', 'img_chip5k', 'img_chip1k', 'img_chip500', 'img_chip100', 'img_chip25', 'img_chip5', 'img_chip1'];

cc.Class({
    extends: cc.Component,

    properties: {
        Lab_Content: cc.Label,
        leftSide: true
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {
        if (true == this.leftSide) {
            this.node.setAnchorPoint(cc.v2(0, 0.5));
            this.Lab_Content.node.setAnchorPoint(cc.v2(0, 0.5));
        } else {
            this.node.setAnchorPoint(cc.v2(1, 0.5));
            this.Lab_Content.node.setAnchorPoint(cc.v2(1, 0.5));
        }
    },

    onSetLiftSide: function onSetLiftSide(value) {
        this.leftSide = value;
        if (true == this.leftSide) {
            this.node.setAnchorPoint(cc.v2(0, 0.5));
            this.Lab_Content.node.setAnchorPoint(cc.v2(0, 0.5));
        } else {
            this.node.setAnchorPoint(cc.v2(1, 0.5));
            this.Lab_Content.node.setAnchorPoint(cc.v2(1, 0.5));
        }
    },
    // 设置数据
    onSetData: function onSetData(_count) {
        if (_count <= 0) return;

        UITools.onSetUILabelString(this.Lab_Content, UITools.onNumTransfer(_count));

        this.node.width = oneJettonWidth + this.Lab_Content.node.width;
        // if(this.leftSide == true)this.Lab_Content.node.setPosition(oneJettonWidth,0);
        // else this.Lab_Content.node.setPosition(5,0);

        UITools.onSetNodeVisible(this.node, true);
    },

    convertJetton: function convertJetton(_count) {
        var remainJettons = _count;
        var imgList = [];
        for (var i = 0; i < baseJetton.length; ++i) {
            var count = Math.floor(remainJettons / baseJetton[i]);
            if (count > 0) {
                for (var j = 0; j < count; j++) {
                    imgList.push(imgJetton[i]);
                }
                remainJettons -= count * baseJetton[i];
            }
            if (remainJettons <= 0) break;
        }

        return imgList;
    },

    getJettonStartPos: function getJettonStartPos(_jettonCount, _initPos) {
        var imgList = this.convertJetton(_jettonCount);
        var jettonsWidth = Math.floor(imgList.length / oneColCount) * oneJettonWidth;

        var posX;
        var posY = this.node.getPosition().y;
        if (this.leftSide == true) {
            posX = _initPos.x + jettonsWidth;
            this.node.setPosition(posX, posY);
            this.Lab_Content.node.setPosition(oneJettonWidth / 2 + 10, 0);
        } else {
            posX = _initPos.x;
            this.node.setPosition(posX - jettonsWidth, posY);
            this.Lab_Content.node.setPosition(-1 * oneJettonWidth / 2 - 10, 0);
        }

        return cc.p(posX, posY);
    },

    // 隐藏
    onHide: function onHide() {
        UITools.onSetUILabelString(this.Lab_Content, 0);
        UITools.onSetNodeVisible(this.node, false);
    }

});

cc._RF.pop();
},{"UITools":"UITools"}],"ResourceManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, '7597eWvBBlJ745r0RVuLipU', 'ResourceManager');
// Scripts/Manager/ResourceManager.js

"use strict";

var MAX_COUNT = 99;

var ResourceManager = cc.Class({

    properties: {
        _cacheList: [],
        _waitToLoadList: [],
        _curLoaderCount: MAX_COUNT,

        loadedScene: []
    },

    // use this for initialization
    onLoad: function onLoad() {},

    setRes: function setRes(_url, _res) {
        this._cacheList[_url] = _res;
    },

    getRes: function getRes(_url) {
        return this._cacheList[_url];
    },

    loadRes: function loadRes(_url, _callback) {
        var cache = this.getRes(_url);
        if (cache != null) {
            _callback(cache);
            this._curLoaderCount++;
            if (this._waitToLoadList.length > 0) {
                var data = this._waitToLoadList.shift();
                this.loadRes(data.url, data.callback);
            }
            return;
        }

        if (this.getLoader() == false) {
            this._waitToLoadList.push({ url: _url, callback: _callback });
            return;
        }

        var self = this;
        cc.loader.loadRes(_url, function (_error, _res) {
            self.setRes(_url, _res);
            if (_callback != null) _callback(_res);
            self._curLoaderCount++;
            if (self._waitToLoadList.length > 0) {
                var data = self._waitToLoadList.shift();
                self.loadRes(data.url, data.callback);
            }
        });
    },

    getLoader: function getLoader() {
        var result = false;
        if (this._curLoaderCount > 0) {
            result = true;
            this._curLoaderCount--;
        }

        return result;
    },

    getSpriteFrameFromAtlas: function getSpriteFrameFromAtlas(_atlas, _spriteName) {
        var atlas = this.getRes(_atlas);
        var frame = atlas.getSpriteFrame(_spriteName);

        return frame;
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

module.exports = ResourceManager;

cc._RF.pop();
},{}],"RollLabelItem":[function(require,module,exports){
"use strict";
cc._RF.push(module, '47446pM4QNAzYdA2nFkCSpJ', 'RollLabelItem');
// Scripts/UI/RollLabelItem/RollLabelItem.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        currentLabel: cc.RichText
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {
        // //console.log("onLoad");
    },

    start: function start() {
        // //console.log("start");
        this.onInit();
    },

    lateUpdate: function lateUpdate() {
        if (false == this._isOKPlay) {
            return;
        }
        this.onPlayAnimation();
    },

    onInit: function onInit() {
        this.labelContent = this.currentLabel.getComponent(cc.RichText);
        this._isOKPlay = false;
        this._isPlayIng = false;
        this.moveDir = 3;
        this.rollDataList = [];
    },

    // 设置数据
    onSetData: function onSetData(conentString) {
        //console.log("conentString =="+ conentString);
        //console.log(this.labelContent);
        if (true == this._isPlayIng) {
            this.rollDataList.push(conentString);
        } else {
            this.labelContent.string = conentString;
            this.onSetLabelPostion();
        }
    },

    // 设置Label位置
    onSetLabelPostion: function onSetLabelPostion() {
        var posX = this.node.width / 2 + this.currentLabel.node.width / 2;
        this.currentLabel.node.x = posX;
        this.currentLabel.node.y = 0;
        this._isOKPlay = true;
    },

    // 播放动画
    onPlayAnimation: function onPlayAnimation() {
        this._isPlayIng = true;
        this.currentLabel.node.x -= this.moveDir;
        if (this.currentLabel.node.x <= -this.currentLabel.node.width) {
            this.labelContent.string = "";
            this._isPlayIng = false;
            this._isOKPlay = false;
            if (this.rollDataList.length > 0) {
                this.onSetData(this.rollDataList.shift());
            } else {
                //console.log("播放完成 == ");
            }
        }
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RF.pop();
},{}],"Settings":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'eb7c6x0dpBFmqLGwW2RrsBT', 'Settings');
// Scripts/GameData/config/Settings.js

"use strict";

var data = [];
data["bgSound"] = {
		PID: "bgSound",
		Default: "1",
		Reg: "^0|1$",
		Desc: "背景音乐"
};
data["actSound"] = {
		PID: "actSound",
		Default: "1",
		Reg: "^0|1$",
		Desc: "操作音效"
};
data["vibratorRemind"] = {
		PID: "vibratorRemind",
		Default: "1",
		Reg: "^0|1$",
		Desc: "震动提醒"
};
data["autoBuriedCard"] = {
		PID: "autoBuriedCard",
		Default: "0",
		Reg: "^0|1$",
		Desc: "自动埋牌"
};
data["fourColorCard"] = {
		PID: "fourColorCard",
		Default: "1",
		Reg: "^0|1$",
		Desc: "四色牌"
};
data["hiddenTreasure"] = {
		PID: "hiddenTreasure",
		Default: "0",
		Reg: "^0|1$",
		Desc: "隐藏财富"
};
data["shieldFriendApply"] = {
		PID: "shieldFriendApply",
		Default: "0",
		Reg: "^0|1$",
		Desc: "屏蔽好友申请"
};
data["shieldOnlooker"] = {
		PID: "shieldOnlooker",
		Default: "0",
		Reg: "^0|1$",
		Desc: "屏蔽旁观"
};
data["cardFace"] = {
		PID: "cardFace",
		Default: "1033",
		Reg: "",
		Desc: "牌面"
};
data["cardBack"] = {
		PID: "cardBack",
		Default: "1035",
		Reg: "",
		Desc: "牌背"
};
module.exports = data;

cc._RF.pop();
},{}],"Share108":[function(require,module,exports){
"use strict";
cc._RF.push(module, '3a3ebA+vAdDlZpUO/AA9prh', 'Share108');
// Scripts/GameData/config/Share108.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.175",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1226",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0793",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0586",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0438",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0354",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0293",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0233",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0175",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0105",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0105",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0105",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.009",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.009",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.009",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.008",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.008",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.008",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0071",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0071",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0071",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["82"] = {
		PID: "82",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["83"] = {
		PID: "83",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["84"] = {
		PID: "84",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["85"] = {
		PID: "85",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["86"] = {
		PID: "86",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["87"] = {
		PID: "87",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["88"] = {
		PID: "88",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["89"] = {
		PID: "89",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["90"] = {
		PID: "90",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["91"] = {
		PID: "91",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["92"] = {
		PID: "92",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["93"] = {
		PID: "93",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["94"] = {
		PID: "94",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["95"] = {
		PID: "95",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["96"] = {
		PID: "96",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["97"] = {
		PID: "97",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["98"] = {
		PID: "98",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["99"] = {
		PID: "99",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["100"] = {
		PID: "100",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["101"] = {
		PID: "101",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["102"] = {
		PID: "102",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["103"] = {
		PID: "103",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["104"] = {
		PID: "104",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["105"] = {
		PID: "105",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["106"] = {
		PID: "106",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["107"] = {
		PID: "107",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["108"] = {
		PID: "108",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share117":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e347d/BX8xKC7SCRrCkJUk4', 'Share117');
// Scripts/GameData/config/Share117.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.1721",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1206",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0782",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0578",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0431",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0349",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0289",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0172",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0129",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0129",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0129",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0104",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0104",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0104",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0089",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0089",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0089",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0079",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0079",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0079",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.007",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.007",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.007",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0061",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0061",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0061",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0053",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["82"] = {
		PID: "82",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["83"] = {
		PID: "83",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["84"] = {
		PID: "84",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["85"] = {
		PID: "85",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["86"] = {
		PID: "86",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["87"] = {
		PID: "87",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["88"] = {
		PID: "88",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["89"] = {
		PID: "89",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["90"] = {
		PID: "90",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["91"] = {
		PID: "91",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["92"] = {
		PID: "92",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["93"] = {
		PID: "93",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["94"] = {
		PID: "94",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["95"] = {
		PID: "95",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["96"] = {
		PID: "96",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["97"] = {
		PID: "97",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["98"] = {
		PID: "98",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["99"] = {
		PID: "99",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["100"] = {
		PID: "100",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["101"] = {
		PID: "101",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["102"] = {
		PID: "102",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["103"] = {
		PID: "103",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["104"] = {
		PID: "104",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["105"] = {
		PID: "105",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["106"] = {
		PID: "106",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["107"] = {
		PID: "107",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["108"] = {
		PID: "108",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["109"] = {
		PID: "109",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["110"] = {
		PID: "110",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["111"] = {
		PID: "111",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["112"] = {
		PID: "112",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["113"] = {
		PID: "113",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["114"] = {
		PID: "114",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["115"] = {
		PID: "115",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["116"] = {
		PID: "116",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["117"] = {
		PID: "117",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share126":[function(require,module,exports){
"use strict";
cc._RF.push(module, '420c6JVOetCBalzkxKGmZjs', 'Share126');
// Scripts/GameData/config/Share126.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.1701",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1192",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0773",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0571",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0426",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0345",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0286",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0228",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0079",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0079",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0079",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.007",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.007",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.007",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0061",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0061",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0061",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0024",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["82"] = {
		PID: "82",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["83"] = {
		PID: "83",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["84"] = {
		PID: "84",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["85"] = {
		PID: "85",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["86"] = {
		PID: "86",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["87"] = {
		PID: "87",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["88"] = {
		PID: "88",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["89"] = {
		PID: "89",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["90"] = {
		PID: "90",
		Rate: "0.0021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["91"] = {
		PID: "91",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["92"] = {
		PID: "92",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["93"] = {
		PID: "93",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["94"] = {
		PID: "94",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["95"] = {
		PID: "95",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["96"] = {
		PID: "96",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["97"] = {
		PID: "97",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["98"] = {
		PID: "98",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["99"] = {
		PID: "99",
		Rate: "0.0018",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["100"] = {
		PID: "100",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["101"] = {
		PID: "101",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["102"] = {
		PID: "102",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["103"] = {
		PID: "103",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["104"] = {
		PID: "104",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["105"] = {
		PID: "105",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["106"] = {
		PID: "106",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["107"] = {
		PID: "107",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["108"] = {
		PID: "108",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["109"] = {
		PID: "109",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["110"] = {
		PID: "110",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["111"] = {
		PID: "111",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["112"] = {
		PID: "112",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["113"] = {
		PID: "113",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["114"] = {
		PID: "114",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["115"] = {
		PID: "115",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["116"] = {
		PID: "116",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["117"] = {
		PID: "117",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["118"] = {
		PID: "118",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["119"] = {
		PID: "119",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["120"] = {
		PID: "120",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["121"] = {
		PID: "121",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["122"] = {
		PID: "122",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["123"] = {
		PID: "123",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["124"] = {
		PID: "124",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["125"] = {
		PID: "125",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["126"] = {
		PID: "126",
		Rate: "0.0015",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share12":[function(require,module,exports){
"use strict";
cc._RF.push(module, '87735g1sT5LaJVwPErBkmVg', 'Share12');
// Scripts/GameData/config/Share12.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.2815",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1971",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.1267",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0939",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0704",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0563",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0469",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0375",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0282",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0205",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0205",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0205",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share135":[function(require,module,exports){
"use strict";
cc._RF.push(module, '7f38aapkvVOALLNBWfR8mOs', 'Share135');
// Scripts/GameData/config/Share135.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.1682",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1179",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0765",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0567",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0423",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0342",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0284",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0227",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0169",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0045",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0038",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0032",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0027",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0023",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["82"] = {
		PID: "82",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["83"] = {
		PID: "83",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["84"] = {
		PID: "84",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["85"] = {
		PID: "85",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["86"] = {
		PID: "86",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["87"] = {
		PID: "87",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["88"] = {
		PID: "88",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["89"] = {
		PID: "89",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["90"] = {
		PID: "90",
		Rate: "0.002",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["91"] = {
		PID: "91",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["92"] = {
		PID: "92",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["93"] = {
		PID: "93",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["94"] = {
		PID: "94",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["95"] = {
		PID: "95",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["96"] = {
		PID: "96",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["97"] = {
		PID: "97",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["98"] = {
		PID: "98",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["99"] = {
		PID: "99",
		Rate: "0.0017",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["100"] = {
		PID: "100",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["101"] = {
		PID: "101",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["102"] = {
		PID: "102",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["103"] = {
		PID: "103",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["104"] = {
		PID: "104",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["105"] = {
		PID: "105",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["106"] = {
		PID: "106",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["107"] = {
		PID: "107",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["108"] = {
		PID: "108",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["109"] = {
		PID: "109",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["110"] = {
		PID: "110",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["111"] = {
		PID: "111",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["112"] = {
		PID: "112",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["113"] = {
		PID: "113",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["114"] = {
		PID: "114",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["115"] = {
		PID: "115",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["116"] = {
		PID: "116",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["117"] = {
		PID: "117",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["118"] = {
		PID: "118",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["119"] = {
		PID: "119",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["120"] = {
		PID: "120",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["121"] = {
		PID: "121",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["122"] = {
		PID: "122",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["123"] = {
		PID: "123",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["124"] = {
		PID: "124",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["125"] = {
		PID: "125",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["126"] = {
		PID: "126",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["127"] = {
		PID: "127",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["128"] = {
		PID: "128",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["129"] = {
		PID: "129",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["130"] = {
		PID: "130",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["131"] = {
		PID: "131",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["132"] = {
		PID: "132",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["133"] = {
		PID: "133",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["134"] = {
		PID: "134",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["135"] = {
		PID: "135",
		Rate: "0.0014",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share144":[function(require,module,exports){
"use strict";
cc._RF.push(module, '748f00kStBEZIOezb/W3sbK', 'Share144');
// Scripts/GameData/config/Share144.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.168",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1178",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0764",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0566",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0422",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0341",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0284",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0226",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0168",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0102",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0051",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0026",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["82"] = {
		PID: "82",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["83"] = {
		PID: "83",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["84"] = {
		PID: "84",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["85"] = {
		PID: "85",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["86"] = {
		PID: "86",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["87"] = {
		PID: "87",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["88"] = {
		PID: "88",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["89"] = {
		PID: "89",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["90"] = {
		PID: "90",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["91"] = {
		PID: "91",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["92"] = {
		PID: "92",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["93"] = {
		PID: "93",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["94"] = {
		PID: "94",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["95"] = {
		PID: "95",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["96"] = {
		PID: "96",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["97"] = {
		PID: "97",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["98"] = {
		PID: "98",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["99"] = {
		PID: "99",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["100"] = {
		PID: "100",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["101"] = {
		PID: "101",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["102"] = {
		PID: "102",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["103"] = {
		PID: "103",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["104"] = {
		PID: "104",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["105"] = {
		PID: "105",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["106"] = {
		PID: "106",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["107"] = {
		PID: "107",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["108"] = {
		PID: "108",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["109"] = {
		PID: "109",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["110"] = {
		PID: "110",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["111"] = {
		PID: "111",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["112"] = {
		PID: "112",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["113"] = {
		PID: "113",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["114"] = {
		PID: "114",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["115"] = {
		PID: "115",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["116"] = {
		PID: "116",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["117"] = {
		PID: "117",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["118"] = {
		PID: "118",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["119"] = {
		PID: "119",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["120"] = {
		PID: "120",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["121"] = {
		PID: "121",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["122"] = {
		PID: "122",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["123"] = {
		PID: "123",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["124"] = {
		PID: "124",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["125"] = {
		PID: "125",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["126"] = {
		PID: "126",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["127"] = {
		PID: "127",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["128"] = {
		PID: "128",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["129"] = {
		PID: "129",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["130"] = {
		PID: "130",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["131"] = {
		PID: "131",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["132"] = {
		PID: "132",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["133"] = {
		PID: "133",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["134"] = {
		PID: "134",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["135"] = {
		PID: "135",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["136"] = {
		PID: "136",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["137"] = {
		PID: "137",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["138"] = {
		PID: "138",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["139"] = {
		PID: "139",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["140"] = {
		PID: "140",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["141"] = {
		PID: "141",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["142"] = {
		PID: "142",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["143"] = {
		PID: "143",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["144"] = {
		PID: "144",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share153":[function(require,module,exports){
"use strict";
cc._RF.push(module, '682194xRNRNL6QUvX8R4ViX', 'Share153');
// Scripts/GameData/config/Share153.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.166",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1164",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0756",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0562",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0419",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0338",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0282",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0225",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0166",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0101",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0101",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0101",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0087",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0087",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0087",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0077",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0077",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0077",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0059",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0059",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0059",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["82"] = {
		PID: "82",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["83"] = {
		PID: "83",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["84"] = {
		PID: "84",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["85"] = {
		PID: "85",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["86"] = {
		PID: "86",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["87"] = {
		PID: "87",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["88"] = {
		PID: "88",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["89"] = {
		PID: "89",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["90"] = {
		PID: "90",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["91"] = {
		PID: "91",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["92"] = {
		PID: "92",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["93"] = {
		PID: "93",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["94"] = {
		PID: "94",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["95"] = {
		PID: "95",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["96"] = {
		PID: "96",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["97"] = {
		PID: "97",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["98"] = {
		PID: "98",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["99"] = {
		PID: "99",
		Rate: "0.0016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["100"] = {
		PID: "100",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["101"] = {
		PID: "101",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["102"] = {
		PID: "102",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["103"] = {
		PID: "103",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["104"] = {
		PID: "104",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["105"] = {
		PID: "105",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["106"] = {
		PID: "106",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["107"] = {
		PID: "107",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["108"] = {
		PID: "108",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["109"] = {
		PID: "109",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["110"] = {
		PID: "110",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["111"] = {
		PID: "111",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["112"] = {
		PID: "112",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["113"] = {
		PID: "113",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["114"] = {
		PID: "114",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["115"] = {
		PID: "115",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["116"] = {
		PID: "116",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["117"] = {
		PID: "117",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["118"] = {
		PID: "118",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["119"] = {
		PID: "119",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["120"] = {
		PID: "120",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["121"] = {
		PID: "121",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["122"] = {
		PID: "122",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["123"] = {
		PID: "123",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["124"] = {
		PID: "124",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["125"] = {
		PID: "125",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["126"] = {
		PID: "126",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["127"] = {
		PID: "127",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["128"] = {
		PID: "128",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["129"] = {
		PID: "129",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["130"] = {
		PID: "130",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["131"] = {
		PID: "131",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["132"] = {
		PID: "132",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["133"] = {
		PID: "133",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["134"] = {
		PID: "134",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["135"] = {
		PID: "135",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["136"] = {
		PID: "136",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["137"] = {
		PID: "137",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["138"] = {
		PID: "138",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["139"] = {
		PID: "139",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["140"] = {
		PID: "140",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["141"] = {
		PID: "141",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["142"] = {
		PID: "142",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["143"] = {
		PID: "143",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["144"] = {
		PID: "144",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["145"] = {
		PID: "145",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["146"] = {
		PID: "146",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["147"] = {
		PID: "147",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["148"] = {
		PID: "148",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["149"] = {
		PID: "149",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["150"] = {
		PID: "150",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["151"] = {
		PID: "151",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["152"] = {
		PID: "152",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["153"] = {
		PID: "153",
		Rate: "0.0013",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share15":[function(require,module,exports){
"use strict";
cc._RF.push(module, '65f43naAmpPBJOKaeD5EGX3', 'Share15');
// Scripts/GameData/config/Share15.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.268",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1877",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.1207",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0894",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.067",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0536",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0446",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0357",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0268",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0195",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0195",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0195",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.016",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share18":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'a7d35V/1XdO4bY9aX1kwql9', 'Share18');
// Scripts/GameData/config/Share18.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.2575",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1803",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.116",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0859",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0644",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0515",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0428",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0343",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0257",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0187",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0187",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0187",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0154",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0154",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0154",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0131",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0131",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0131",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share1":[function(require,module,exports){
"use strict";
cc._RF.push(module, '7c76199ktJAk7epzDK3WDf+', 'Share1');
// Scripts/GameData/config/Share1.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "1",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share200":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'edaa7V6nLtLbb5yH7Tn2eM8', 'Share200');
// Scripts/GameData/config/Share200.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0",
		Money: "500000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share201":[function(require,module,exports){
"use strict";
cc._RF.push(module, '118917vxL9K9oMYPCE3bz9M', 'Share201');
// Scripts/GameData/config/Share201.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0",
		Money: "800000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0",
		Money: "500000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0",
		Money: "200000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0",
		Money: "100000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0",
		Money: "100000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0",
		Money: "100000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0",
		Money: "40000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0",
		Money: "40000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0",
		Money: "40000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0",
		Money: "40000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0",
		Money: "40000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share202":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'bf3b4GUdxNAuY/Y+jJSoWO9', 'Share202');
// Scripts/GameData/config/Share202.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0",
		Money: "20000000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0",
		Money: "13000000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0",
		Money: "6500000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0",
		Money: "1500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0",
		Money: "1500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0",
		Money: "1500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0",
		Money: "1500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0",
		Money: "1500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0",
		Money: "1500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0",
		Money: "500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0",
		Money: "500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0",
		Money: "500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0",
		Money: "500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0",
		Money: "500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0",
		Money: "500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share203":[function(require,module,exports){
"use strict";
cc._RF.push(module, '1bc9blAKsRGxbvMi0J7jgZ5', 'Share203');
// Scripts/GameData/config/Share203.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0",
		Money: "252000000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0",
		Money: "175000000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0",
		Money: "116000000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0",
		Money: "97000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0",
		Money: "86600000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0",
		Money: "76500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0",
		Money: "68500000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0",
		Money: "60000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0",
		Money: "51400000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0",
		Money: "45000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0",
		Money: "39000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0",
		Money: "39000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0",
		Money: "39000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0",
		Money: "34000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0",
		Money: "34000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0",
		Money: "34000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0",
		Money: "28000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0",
		Money: "28000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0",
		Money: "28000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0",
		Money: "28000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0",
		Money: "23000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0",
		Money: "23000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0",
		Money: "23000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0",
		Money: "18000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0",
		Money: "18000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0",
		Money: "18000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0",
		Money: "18000000",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share21":[function(require,module,exports){
"use strict";
cc._RF.push(module, '39c1eC2R3lBQaYfrIxiftbn', 'Share21');
// Scripts/GameData/config/Share21.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.2487",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1743",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.1121",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.083",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0623",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0498",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0414",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0332",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0248",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0181",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0181",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0181",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0149",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0149",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0149",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0127",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0111",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0111",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0111",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share24":[function(require,module,exports){
"use strict";
cc._RF.push(module, '848de5zRONAj4En7+ElmVbT', 'Share24');
// Scripts/GameData/config/Share24.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.2415",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1693",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.1088",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0806",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0605",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0484",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0402",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0322",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0241",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0176",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0176",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0176",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0145",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0145",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0145",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0123",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0123",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0123",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0108",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0108",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0108",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0096",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0096",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0096",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share27":[function(require,module,exports){
"use strict";
cc._RF.push(module, '2bebajbVLlELp2LRsokJ/6I', 'Share27');
// Scripts/GameData/config/Share27.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.2353",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1651",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.1062",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0786",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.059",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0472",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0392",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0314",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0235",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0172",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0172",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0172",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0141",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0141",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0141",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.012",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.012",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.012",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0105",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0105",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0105",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0094",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0094",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0094",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0083",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0083",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0083",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share2":[function(require,module,exports){
"use strict";
cc._RF.push(module, '04e655y6BNFfKF5zWsYKhnL', 'Share2');
// Scripts/GameData/config/Share2.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.6",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.4",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share36":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'd26d5vfer5PQ72Sqb6l0ALp', 'Share36');
// Scripts/GameData/config/Share36.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.2209",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.155",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0997",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0738",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0554",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0443",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0368",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0295",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0221",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0161",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0161",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0161",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0132",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0132",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0132",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0113",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0113",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0113",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0099",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0099",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0099",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0088",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0068",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share3":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'bc01crMkTNIfqt3o5KiZkc2', 'Share3');
// Scripts/GameData/config/Share3.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.48",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.32",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.2",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share45":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e9a492TytlHYZMBMgKR4Qxm', 'Share45');
// Scripts/GameData/config/Share45.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.21",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.147",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0945",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.07",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0525",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.028",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.021",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0153",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0153",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0153",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0125",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0125",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0125",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0107",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0107",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0107",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0094",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0094",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0094",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0084",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0084",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0084",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0074",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0074",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0074",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share4":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'eb4c6/8MelGXLoENO5jqwjG', 'Share4');
// Scripts/GameData/config/Share4.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.4",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.28",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.18",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.14",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share54":[function(require,module,exports){
"use strict";
cc._RF.push(module, '98649TmHNlGQocvOM0fksU8', 'Share54');
// Scripts/GameData/config/Share54.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.201",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1409",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0906",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.067",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0503",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0403",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0336",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0268",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0201",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0147",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0147",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0147",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.012",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.012",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.012",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0103",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0103",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0103",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.009",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.009",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.009",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0081",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0081",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0081",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0071",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0071",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0071",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0062",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0054",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0046",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share5":[function(require,module,exports){
"use strict";
cc._RF.push(module, '3667dPs1O5Af4dwnPpp7dnK', 'Share5');
// Scripts/GameData/config/Share5.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.36",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.25",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.16",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.13",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.1",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share63":[function(require,module,exports){
"use strict";
cc._RF.push(module, '4e08fX9ykxPsp+X1ZuOD6vG', 'Share63');
// Scripts/GameData/config/Share63.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.1943",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1362",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0876",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0648",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0486",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.039",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0325",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0259",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0195",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0143",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0143",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0143",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0116",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0116",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0116",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.01",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.01",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.01",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0087",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0087",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0087",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0078",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0069",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.006",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0052",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0044",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0037",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share6":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'c03d5+MCDtFppJ0ySAf9TY5', 'Share6');
// Scripts/GameData/config/Share6.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.34",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.23",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.15",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.12",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.09",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.07",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share72":[function(require,module,exports){
"use strict";
cc._RF.push(module, '21e1agVR1lOoLa9FN1Sw7sS', 'Share72');
// Scripts/GameData/config/Share72.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.189",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1325",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0852",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0631",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0473",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0379",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0316",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0252",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0189",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0139",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0139",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0139",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0113",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0113",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0113",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0097",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0097",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0097",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0085",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0085",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0085",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0076",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0076",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0076",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0067",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0067",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0067",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0058",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.005",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0043",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0031",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share81":[function(require,module,exports){
"use strict";
cc._RF.push(module, '807e5IDRwFFO52USJDFM/5p', 'Share81');
// Scripts/GameData/config/Share81.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.1847",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1295",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0835",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0617",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0462",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0373",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0309",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0246",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0185",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0136",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0136",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0136",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.011",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.011",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.011",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0095",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0095",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0095",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0083",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0083",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0083",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0074",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0074",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0074",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0065",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0057",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0049",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0042",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0035",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.003",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share90":[function(require,module,exports){
"use strict";
cc._RF.push(module, '027a9+f/DRPPrLyOyiulD6y', 'Share90');
// Scripts/GameData/config/Share90.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.181",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1269",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0818",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0605",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0453",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.0366",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0303",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0241",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0181",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0134",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0134",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0134",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0107",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0107",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0107",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0093",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0093",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0093",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0082",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0082",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0082",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0073",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0073",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0073",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0064",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0064",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0064",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0056",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0048",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.0041",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0034",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["82"] = {
		PID: "82",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["83"] = {
		PID: "83",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["84"] = {
		PID: "84",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["85"] = {
		PID: "85",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["86"] = {
		PID: "86",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["87"] = {
		PID: "87",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["88"] = {
		PID: "88",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["89"] = {
		PID: "89",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["90"] = {
		PID: "90",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share99":[function(require,module,exports){
"use strict";
cc._RF.push(module, '33ab5XGNVZBrr8EJWxhfylB', 'Share99');
// Scripts/GameData/config/Share99.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.1776",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["2"] = {
		PID: "2",
		Rate: "0.1245",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["3"] = {
		PID: "3",
		Rate: "0.0804",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["4"] = {
		PID: "4",
		Rate: "0.0595",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["5"] = {
		PID: "5",
		Rate: "0.0445",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["6"] = {
		PID: "6",
		Rate: "0.036",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["7"] = {
		PID: "7",
		Rate: "0.0298",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["8"] = {
		PID: "8",
		Rate: "0.0237",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["9"] = {
		PID: "9",
		Rate: "0.0178",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["10"] = {
		PID: "10",
		Rate: "0.0131",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["11"] = {
		PID: "11",
		Rate: "0.0131",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["12"] = {
		PID: "12",
		Rate: "0.0131",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["13"] = {
		PID: "13",
		Rate: "0.0106",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["14"] = {
		PID: "14",
		Rate: "0.0106",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["15"] = {
		PID: "15",
		Rate: "0.0106",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["16"] = {
		PID: "16",
		Rate: "0.0091",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["17"] = {
		PID: "17",
		Rate: "0.0091",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["18"] = {
		PID: "18",
		Rate: "0.0091",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["19"] = {
		PID: "19",
		Rate: "0.0081",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["20"] = {
		PID: "20",
		Rate: "0.0081",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["21"] = {
		PID: "21",
		Rate: "0.0081",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["22"] = {
		PID: "22",
		Rate: "0.0072",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["23"] = {
		PID: "23",
		Rate: "0.0072",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["24"] = {
		PID: "24",
		Rate: "0.0072",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["25"] = {
		PID: "25",
		Rate: "0.0063",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["26"] = {
		PID: "26",
		Rate: "0.0063",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["27"] = {
		PID: "27",
		Rate: "0.0063",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["28"] = {
		PID: "28",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["29"] = {
		PID: "29",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["30"] = {
		PID: "30",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["31"] = {
		PID: "31",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["32"] = {
		PID: "32",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["33"] = {
		PID: "33",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["34"] = {
		PID: "34",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["35"] = {
		PID: "35",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["36"] = {
		PID: "36",
		Rate: "0.0055",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["37"] = {
		PID: "37",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["38"] = {
		PID: "38",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["39"] = {
		PID: "39",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["40"] = {
		PID: "40",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["41"] = {
		PID: "41",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["42"] = {
		PID: "42",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["43"] = {
		PID: "43",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["44"] = {
		PID: "44",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["45"] = {
		PID: "45",
		Rate: "0.0047",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["46"] = {
		PID: "46",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["47"] = {
		PID: "47",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["48"] = {
		PID: "48",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["49"] = {
		PID: "49",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["50"] = {
		PID: "50",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["51"] = {
		PID: "51",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["52"] = {
		PID: "52",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["53"] = {
		PID: "53",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["54"] = {
		PID: "54",
		Rate: "0.004",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["55"] = {
		PID: "55",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["56"] = {
		PID: "56",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["57"] = {
		PID: "57",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["58"] = {
		PID: "58",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["59"] = {
		PID: "59",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["60"] = {
		PID: "60",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["61"] = {
		PID: "61",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["62"] = {
		PID: "62",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["63"] = {
		PID: "63",
		Rate: "0.0033",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["64"] = {
		PID: "64",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["65"] = {
		PID: "65",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["66"] = {
		PID: "66",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["67"] = {
		PID: "67",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["68"] = {
		PID: "68",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["69"] = {
		PID: "69",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["70"] = {
		PID: "70",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["71"] = {
		PID: "71",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["72"] = {
		PID: "72",
		Rate: "0.0029",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["73"] = {
		PID: "73",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["74"] = {
		PID: "74",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["75"] = {
		PID: "75",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["76"] = {
		PID: "76",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["77"] = {
		PID: "77",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["78"] = {
		PID: "78",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["79"] = {
		PID: "79",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["80"] = {
		PID: "80",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["81"] = {
		PID: "81",
		Rate: "0.0025",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["82"] = {
		PID: "82",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["83"] = {
		PID: "83",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["84"] = {
		PID: "84",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["85"] = {
		PID: "85",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["86"] = {
		PID: "86",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["87"] = {
		PID: "87",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["88"] = {
		PID: "88",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["89"] = {
		PID: "89",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["90"] = {
		PID: "90",
		Rate: "0.0022",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["91"] = {
		PID: "91",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["92"] = {
		PID: "92",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["93"] = {
		PID: "93",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["94"] = {
		PID: "94",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["95"] = {
		PID: "95",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["96"] = {
		PID: "96",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["97"] = {
		PID: "97",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["98"] = {
		PID: "98",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
data["99"] = {
		PID: "99",
		Rate: "0.0019",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Share9":[function(require,module,exports){
"use strict";
cc._RF.push(module, '52773Rbmz5PbYo2LOUNJgzP', 'Share9');
// Scripts/GameData/config/Share9.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0.3",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "100"
};
data["2"] = {
		PID: "2",
		Rate: "0.21",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "80"
};
data["3"] = {
		PID: "3",
		Rate: "0.135",
		Money: "0",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "60"
};
data["4"] = {
		PID: "4",
		Rate: "0.1",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "40"
};
data["5"] = {
		PID: "5",
		Rate: "0.075",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "30"
};
data["6"] = {
		PID: "6",
		Rate: "0.06",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "25"
};
data["7"] = {
		PID: "7",
		Rate: "0.05",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "20"
};
data["8"] = {
		PID: "8",
		Rate: "0.04",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "15"
};
data["9"] = {
		PID: "9",
		Rate: "0.03",
		Money: "0",
		Ring: "0",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "10"
};
module.exports = data;

cc._RF.pop();
},{}],"Sheet200":[function(require,module,exports){
"use strict";
cc._RF.push(module, '789282vqdVA14WLVPwWj8W8', 'Sheet200');
// Scripts/GameData/config/Sheet200.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0",
		Money: "500000",
		Ring: "1",
		item1: "0",
		count1: "0",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"Sheet201":[function(require,module,exports){
"use strict";
cc._RF.push(module, '9b690BXfJpCIIBBukxPQhGu', 'Sheet201');
// Scripts/GameData/config/Sheet201.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Rate: "0",
		Money: "500000",
		Ring: "1",
		item1: "11903",
		count1: "1",
		item2: "0",
		count2: "0",
		item3: "0",
		count3: "0",
		Score: "0"
};
module.exports = data;

cc._RF.pop();
},{}],"SignIn":[function(require,module,exports){
"use strict";
cc._RF.push(module, '6f860nFggRP9IsJL65SmGtp', 'SignIn');
// Scripts/GameData/config/SignIn.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Item1: "11012",
		Count1: "1",
		Item2: "11012",
		Count2: "1"
};
data["2"] = {
		PID: "2",
		Item1: "11013",
		Count1: "1",
		Item2: "11013",
		Count2: "1"
};
data["3"] = {
		PID: "3",
		Item1: "11014",
		Count1: "1",
		Item2: "11014",
		Count2: "1"
};
data["4"] = {
		PID: "4",
		Item1: "11016",
		Count1: "1",
		Item2: "11016",
		Count2: "1"
};
data["5"] = {
		PID: "5",
		Item1: "11039",
		Count1: "1",
		Item2: "11039",
		Count2: "1"
};
data["6"] = {
		PID: "6",
		Item1: "11040",
		Count1: "1",
		Item2: "11040",
		Count2: "1"
};
data["7"] = {
		PID: "7",
		Item1: "11041",
		Count1: "1",
		Item2: "11041",
		Count2: "1"
};
module.exports = data;

cc._RF.pop();
},{}],"SimulateFightManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, '108fepvN4ZM07QZG0Cgd4g2', 'SimulateFightManager');
// Scripts/UI/HistoryPlayCards/SimulateFightManager.js

"use strict";

var TableData = require("TableData");
var TablePlayerData = require("TablePlayerData");
var UITools = require('UITools');
var tableConfig = require("Table");
var Config = require("Config");
// 模仿打牌管理器  
cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    // 设置数据
    onSetFightData: function onSetFightData(playData) {
        console.log(":::playData:::", playData);
        var curTable = new TableData();
        curTable.InitTable();
        if (UITools.IsRealObj(playData.ante)) curTable.ante = playData.ante;
        if (UITools.IsRealObj(playData.actions)) curTable.actions = playData.actions;
        if (UITools.IsRealObj(playData.bigBlind)) curTable.bigBlind = playData.bigBlind;
        if (UITools.IsRealObj(playData.bigBlindSeat)) curTable.bigBlindSeat = playData.bigBlindSeat;
        if (UITools.IsRealObj(playData.seatMax)) curTable.seatMax = playData.seatMax;
        if (UITools.IsRealObj(playData.ante)) curTable.TableCfgPid = playData.pid;
        if (UITools.IsRealObj(playData.rounds)) curTable.rounds = playData.rounds;
        if (UITools.IsRealObj(playData.smallBlind)) curTable.smallBlind = playData.smallBlind;
        if (UITools.IsRealObj(playData.smallBlindSeat)) curTable.smallBlindSeat = playData.smallBlindSeat;
        if (UITools.IsRealObj(playData.dealerSeat)) curTable.dealerSeat = playData.dealerSeat;
        if (UITools.IsRealObj(playData.showCard)) curTable.allPubCrds = playData.showCard;
        if (UITools.IsRealObj(playData.matchPid)) curTable.matchPid = playData.matchPid;
        curTable.hasShowdown = false;

        var gameData = playData.gamers;
        if (playData.pid > 0) {
            curTable.configInfo = tableConfig[playData.pid];
        }
        curTable.RealPlay = this.inItRealPlayList(curTable, gameData);
        // 计算位置
        curTable._onGenShowIndex();
        return curTable;
    },

    // 初始化seat数组
    inItRealPlayList: function inItRealPlayList(curTable, gameData) {
        var list = [];
        var vJn;
        for (var i = 0; i < curTable.seatMax; ++i) {
            vJn = new TablePlayerData();
            vJn.InitJoin();
            vJn.isDealer = false;
            for (var j = 0; j < gameData.length; j++) {
                var data = gameData[j];
                if (data.seat == i) {
                    //console.log("::data.nick::",data);
                    if (UITools.IsRealObj(data.endChip)) vJn.endChip = data.endChip;
                    if (UITools.IsRealObj(data.seat)) vJn.seat = data.seat;
                    if (UITools.IsRealObj(data.selfCard)) vJn.selfCard = data.selfCard;
                    if (UITools.IsRealObj(data.showCard)) vJn.showCard = data.showCard;
                    if (UITools.IsRealObj(data.startChip)) {
                        vJn.chip = data.startChip;
                        vJn.startChip = data.startChip;
                    }
                    if (UITools.IsRealObj(data.uid)) vJn.uid = data.uid;
                    if (UITools.IsRealObj(data.nick)) vJn.nick = data.nick;

                    if (UITools.IsRealObj(data.avatar)) vJn.avatar = data.avatar;
                    if (vJn.uid == Global.playerInfo.uid) {
                        vJn.showCard = data.selfCard;
                    }

                    vJn.actionTime = 0;
                    vJn.actionMaxTime = 20;
                    vJn.status = 5;
                    if (curTable.dealerSeat == data.seat) {
                        vJn.isDealer = true;
                    }
                }
            }
            list.push(vJn);
            curTable.AddJoin(vJn);
        }
        return list;
    }

});

cc._RF.pop();
},{"Config":"Config","Table":"Table","TableData":"TableData","TablePlayerData":"TablePlayerData","UITools":"UITools"}],"SpecialButton":[function(require,module,exports){
"use strict";
cc._RF.push(module, '7851clCZtJI5KHih3BSWwAD', 'SpecialButton');
// Scripts/Other/SpecialButton.js

'use strict';

cc.Class({
    extends: cc.Component,

    properties: {
        spriteNode: cc.Sprite, //鼠标移动或者按钮的时候操作的按钮节点的效果
        spriteDis: cc.SpriteFrame, //灰掉状态
        spriteNormal: cc.SpriteFrame, //默认状态
        btnDis: cc.SpriteFrame, //按钮灰掉状态
        btnNormal: cc.SpriteFrame },

    // use this for initialization
    onLoad: function onLoad() {
        this.opacityCurValue = 125;
        this.opacityAllValue = 255;
    },

    // 启用
    onEnable: function onEnable() {
        this.addEventListener();
    },
    // 禁用
    onDisable: function onDisable() {
        this.removeEventListener();
    },

    // 添加事件
    addEventListener: function addEventListener() {
        // this.node.on('foobar', this._sayHello, this);
        this.node.on('touchstart', this._onTouchStartEvent.bind(this), this.node);
        this.node.on('touchend', this._onTouchEndEvent.bind(this), this.node);
        this.node.on('touchcancel', this._onTouchEndEvent.bind(this), this.node);
        this.node.on('mouseenter', this._onMouseEnterEvent.bind(this), this.node);
        this.node.on('mouseleave', this._onTouchEndEvent.bind(this), this.node);
        this.node.on('mousedown', this._onTouchEndEvent.bind(this), this.node);
        this.node.on('mouseup', this._onTouchEndEvent.bind(this), this.node);
    },

    // 移除事件
    removeEventListener: function removeEventListener() {
        // this.node.off('foobar', this._sayHello, this);
        this.node.off('touchstart', this._onTouchStartEvent.bind(this), this.node);
        this.node.off('touchend', this._onTouchEndEvent.bind(this), this.node);
        this.node.off('touchcancel', this._onTouchEndEvent.bind(this), this.node);
        this.node.off('mouseenter', this._onMouseEnterEvent.bind(this), this.node);
        this.node.off('mouseleave', this._onTouchEndEvent.bind(this), this.node);
        this.node.on('mousedown', this._onTouchEndEvent.bind(this), this.node);
        this.node.off('mouseup', this._onTouchEndEvent.bind(this), this.node);
    },
    // 手机按下
    _onTouchStartEvent: function _onTouchStartEvent(evt) {
        var curBtn = this.node.getComponent(cc.Button);
        if (curBtn.enabled == false) return;
        this.onSetSpriteNodeOpacity(this.opacityCurValue);
    },
    //手机按下结束
    _onTouchEndEvent: function _onTouchEndEvent(evt) {
        this.onSetSpriteNodeOpacity(this.opacityAllValue);
    },
    // 鼠标进入
    _onMouseEnterEvent: function _onMouseEnterEvent(evt) {
        var curBtn = this.node.getComponent(cc.Button);
        if (curBtn.enabled == false) return;
        this.onSetSpriteNodeOpacity(this.opacityCurValue);
    },
    // 设置节点的透明度
    onSetSpriteNodeOpacity: function onSetSpriteNodeOpacity(value) {
        if (this.spriteNode) {
            // this.spriteNode.node.opacity = value;
        }
    },

    // 设置btn状态
    onSetBtnState: function onSetBtnState(isNormal) {
        this.onSetSpriteNodeOpacity(this.opacityAllValue);
        var btnSprite = this.node.getComponent(cc.Sprite);
        if (true == isNormal) {
            btnSprite.spriteFrame = this.btnNormal;
        } else {
            btnSprite.spriteFrame = this.btnDis;
        }
    },
    // 设置按钮文字图片的
    onUpdateBtnLabelState: function onUpdateBtnLabelState(isNormal) {
        if (true == isNormal) {
            this.spriteNode.spriteFrame = this.spriteNormal;
        } else {
            this.spriteNode.spriteFrame = this.spriteDis;
        }
        this.onSetSpriteNodeOpacity(this.opacityAllValue);
    }
});

cc._RF.pop();
},{}],"StoreItem":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ea36fc2texNMYMAbWGZaBgd', 'StoreItem');
// Scripts/GameData/config/StoreItem.js

"use strict";

var data = [];
data["1001"] = {
		PID: "1001",
		Type: "2",
		Item: "1000",
		Price: "60000",
		Count: "1",
		ItemType: "4",
		Desc: "ACE币6万"
};
data["1002"] = {
		PID: "1002",
		Type: "2",
		Item: "1001",
		Price: "300000",
		Count: "1",
		ItemType: "4",
		Desc: "ACE币30万"
};
data["1003"] = {
		PID: "1003",
		Type: "2",
		Item: "1002",
		Price: "680000",
		Count: "1",
		ItemType: "4",
		Desc: "ACE币68万"
};
data["1004"] = {
		PID: "1004",
		Type: "2",
		Item: "1003",
		Price: "1280000",
		Count: "1",
		ItemType: "4",
		Desc: "ACE币128万"
};
data["1005"] = {
		PID: "1005",
		Type: "2",
		Item: "1004",
		Price: "3280000",
		Count: "1",
		ItemType: "4",
		Desc: "ACE币328万"
};
data["1006"] = {
		PID: "1006",
		Type: "2",
		Item: "1005",
		Price: "6480000",
		Count: "1",
		ItemType: "4",
		Desc: "ACE币648万"
};
data["1007"] = {
		PID: "1007",
		Type: "1",
		Item: "1037",
		Price: "1080000",
		Count: "1",
		ItemType: "1",
		Desc: "龙哥"
};
data["1008"] = {
		PID: "1008",
		Type: "1",
		Item: "1038",
		Price: "1080000",
		Count: "1",
		ItemType: "1",
		Desc: "Duke"
};
data["1009"] = {
		PID: "1009",
		Type: "1",
		Item: "1011",
		Price: "1080000",
		Count: "1",
		ItemType: "1",
		Desc: "麦克"
};
data["1010"] = {
		PID: "1010",
		Type: "1",
		Item: "1008",
		Price: "680000",
		Count: "1",
		ItemType: "1",
		Desc: "狍狍"
};
data["1011"] = {
		PID: "1011",
		Type: "1",
		Item: "1009",
		Price: "680000",
		Count: "1",
		ItemType: "1",
		Desc: "晴子"
};
data["1012"] = {
		PID: "1012",
		Type: "1",
		Item: "1010",
		Price: "680000",
		Count: "1",
		ItemType: "1",
		Desc: "Tina"
};
data["1013"] = {
		PID: "1013",
		Type: "1",
		Item: "1019",
		Price: "980000",
		Count: "1",
		ItemType: "3",
		Desc: "改名卡"
};
data["1014"] = {
		PID: "1014",
		Type: "1",
		Item: "1904",
		Price: "500000",
		Count: "1",
		ItemType: "5",
		Desc: "VIP卡"
};
data["1015"] = {
		PID: "1015",
		Type: "1",
		Item: "1018",
		Price: "120000",
		Count: "1",
		ItemType: "3",
		Desc: "大喇叭"
};
data["1016"] = {
		PID: "1016",
		Type: "1",
		Item: "1903",
		Price: "50000",
		Count: "1",
		ItemType: "3",
		Desc: "女神玫瑰"
};
data["1017"] = {
		PID: "1017",
		Type: "1",
		Item: "1013",
		Price: "50000",
		Count: "1",
		ItemType: "2",
		Desc: "拖鞋"
};
data["1018"] = {
		PID: "1018",
		Type: "1",
		Item: "1901",
		Price: "50000",
		Count: "1",
		ItemType: "2",
		Desc: "偷鸡"
};
data["1019"] = {
		PID: "1019",
		Type: "1",
		Item: "1902",
		Price: "50000",
		Count: "1",
		ItemType: "2",
		Desc: "抓鸡"
};
data["1020"] = {
		PID: "1020",
		Type: "1",
		Item: "1016",
		Price: "30000",
		Count: "1",
		ItemType: "2",
		Desc: "超级炸弹"
};
data["1021"] = {
		PID: "1021",
		Type: "1",
		Item: "1012",
		Price: "10000",
		Count: "1",
		ItemType: "2",
		Desc: "穷鬼附身"
};
data["1022"] = {
		PID: "1022",
		Type: "1",
		Item: "1014",
		Price: "10000",
		Count: "1",
		ItemType: "2",
		Desc: "冠军徽章"
};
data["1023"] = {
		PID: "1023",
		Type: "1",
		Item: "1039",
		Price: "2000",
		Count: "1",
		ItemType: "2",
		Desc: "鸡蛋"
};
data["1024"] = {
		PID: "1024",
		Type: "1",
		Item: "1040",
		Price: "2000",
		Count: "1",
		ItemType: "2",
		Desc: "啤酒"
};
data["1025"] = {
		PID: "1025",
		Type: "1",
		Item: "1041",
		Price: "2000",
		Count: "1",
		ItemType: "2",
		Desc: "玫瑰花"
};
module.exports = data;

cc._RF.pop();
},{}],"TableData":[function(require,module,exports){
"use strict";
cc._RF.push(module, '36e9a1TpxhJhp6YUvPdbJZ+', 'TableData');
// Scripts/GameData/TableData.js

"use strict";

var TableHisObjJS = require("TableHisObjJS");
var tableConfig = require("Table");
var Config = require("Config");
var TableFlags = Config.TableFlags;
var UITools = require("UITools");
var TablePlayerData = require("TablePlayerData");

var TableData = cc.Class({

    // 初始化基本成员
    InitTable: function InitTable() {
        var self = this;
        this.TableFlags = TableFlags.TABLE_FLAG_NONE; // 数据刷新类型[位判断]
        self.isInit = false; //是否初始化过数据
        self.AllJoins = {}; // 所有牌桌人员: 打牌/旁观, TableJoin.uid 为key
        self.RealPlay = []; // 实际打牌人员, TableJoin.uid 为key
        self.RoundOverJn = []; //参与结算的人
        self.TableHisObjList = []; // 历史记录
        self.CurRound = 0; // 当前回合数
        self.curActionSeat = -1; //当前行动者
        self.PosStartIndex = -2; //是否是玩家自己站起
        self.matchId = 0;
        self.showStartAddAnteTip = false;
        self.showEndAddAnteTip = false;
        self.hasShowAnteTip = false;
        self.showCountdownWithBlind = true;
        this.showBetList = []; //筹码列表;
    },

    // 重置数据
    ClearTable: function ClearTable() {
        this.InitTable();
    },

    //新局开始清理部分数据
    ClearForNewRound: function ClearForNewRound() {
        var self = this;
        self.curActionSeat = -1; //当前行动者
        self.RoundOverJn = []; //参与结算的人
        self.CurRound = 0;
        this.onResetShowBet();
    },

    // 增加牌桌标记
    SetTableFlag: function SetTableFlag(vAdd) {
        this.TableFlags = UITools.SetBitFlag(this.TableFlags, vAdd);
    },

    // 删除牌桌标记标记
    RemoveTableFlag: function RemoveTableFlag(vRemove) {
        this.TableFlags = UITools.RemoveBitFlag(this.TableFlags, vRemove);
    },

    // 是否有牌桌标记
    HasTableFlag: function HasTableFlag(vTest) {
        return UITools.HasBitFlag(this.TableFlags, vTest);
    },

    // 彻底清理牌桌标记 !! 注意: 每次UI处理完要调用下此函数 !!
    ResetTableFlags: function ResetTableFlags() {
        this.TableFlags = 0;
    },

    // 玩家自己在牌桌里打牌
    IsSelfOnSeat: function IsSelfOnSeat() {
        for (var i = 0; i < this.RealPlay.length; ++i) {
            var val = this.RealPlay[i];
            if (val != null && val.IsPlayerSelf()) {
                return true;
            }
        }
        return false;
    },

    /////////////////--------------------牌桌的属性获取
    getRealPlayerCount: function getRealPlayerCount() {
        var result = 0;
        for (var i = 0; i < this.RealPlay.length; ++i) {
            var val = this.RealPlay[i];
            if (val != null) {
                result++;
            }
        }
        return result;
    },

    checkPotEqual: function checkPotEqual(_a, _b) {
        var result = true;
        var idx;
        for (var i = 0; i < _a.length; i++) {
            idx = _b.indexOf(_a[i]);
            if (idx < 0) {
                result = false;
                break;
            }
        }

        return result;
    },
    //参加结算的玩家
    SetRoundOverJn: function SetRoundOverJn() {
        var self = this;
        self.RoundOverJn = [];
        for (var i = 0; i < self.Result.length; ++i) {
            var val = self.Result[i];
            if (!val) continue;
            var vJn = self.GetTableJoin(val[0]);
            if (vJn && !self.IsInRoundOverJn(vJn.uid)) self.RoundOverJn.push(vJn);
        }
    },

    //获取参与结算玩家列表
    GetRoundOverJn: function GetRoundOverJn() {
        return this.RoundOverJn;
    },

    // 设置是否是自己站起
    setPosStartIndex: function setPosStartIndex(value) {
        this.PosStartIndex = value;
    },

    //是否在结算玩家列表内
    IsInRoundOverJn: function IsInRoundOverJn(uid) {
        for (var i = 0; i < this.RoundOverJn.length; ++i) {
            var val = this.RoundOverJn[i];

            if (!!val && val.uid == uid) {
                return true;
            }
        }
        return false;
    },

    //玩家是否可以从当前池内分得筹码
    IsCanFlyCoin: function IsCanFlyCoin(PotID, uid) {
        var self = this;
        //console.log('self.result = ',self.Result)
        for (var i = 0; i < self.Result.length; ++i) {
            var val = self.Result[i];
            if (!val) continue;
            if (PotID == val[1] && uid == val[0]) {
                return val[2];
            }
        }

        return 0;
    },

    //结算结果
    onSetResult: function onSetResult(value) {
        this.SetTableFlag(TableFlags.TABLE_FLAG_OVER);
        this.Result = value;
    },

    //根据玩家id获取单个玩家结算获得的游戏币数量
    GetJnResult: function GetJnResult(uid) {
        var self = this;
        var nResult = 0;
        for (var i = 0; i < self.Result.length; ++i) {
            var val = self.Result[i];
            if (!!val && val[0] == uid) {
                nResult += val[2];
            }
        }

        var MyTotalBet = self.GetJnTotalBet(uid);
        nResult -= MyTotalBet; //结算游戏币减去自己投注额

        return nResult;
    },

    // 设置所有玩家的数据包括
    onSetAllGamersInfo: function onSetAllGamersInfo(allPlayerData) {
        this.SetTableFlag(TableFlags.TABLE_FLAG_PLAY);
        var curObj;
        var vJn;
        for (var key in allPlayerData) {
            curObj = allPlayerData[key];
            if (null === curObj) {
                // 离桌的时候更新牌桌数据播放离桌动画
                for (var i = 0; i < this.RealPlay.length; ++i) {
                    vJn = this.RealPlay[i];
                    if (vJn && vJn.uid == key) {
                        var curData = new TablePlayerData();
                        curData.InitJoin();
                        curData.posIndex = vJn.posIndex;
                        curData.MyShowBetIn = vJn.MyShowBetIn;
                        curData.roundBet = vJn.roundBet;
                        if (!vJn.IsPlayerSelf()) {
                            curData.onSetBasePositionState(3); //离桌
                        } else {
                            curData.onSetBasePositionState(0);
                        }
                        this.RealPlay[i] = curData;
                        break;
                    }
                }
                this.RemoveJoin(key);
            } else {
                vJn = this.GetTableJoin(key);
                if (vJn == null) {
                    vJn = new TablePlayerData();
                    vJn.InitJoin();
                    vJn.onSetBasePositionState(4); //进桌
                }
                vJn.uid = parseInt(key);
                vJn.joinTime = Date.now();
                vJn.CpyPlayerNetToMe(curObj); //
                this.AddJoin(vJn);
            }
        }
    },

    // 当前回合数
    onSetCurRound: function onSetCurRound(value) {
        this.SetTableFlag(TableFlags.TABLE_FLAG_ROUND);
        this.CurRound = value;
        this.inItShowBetList();
    },

    inItShowBetList: function inItShowBetList() {
        this.showBetList = [];
        for (var i = 0; i < this.seatMax; i++) {
            this.showBetList.push(0);
        }
    },

    // 当前行动者
    onSetCurActionSeat: function onSetCurActionSeat(value) {
        this.SetTableFlag(TableFlags.TABLE_FLAG_ACTION);
        this.curActionSeat = value;
        var curReal = this.RealPlay;
        // 找到自己的位置索引
        for (var i = 0; i < this.seatMax; ++i) {
            var jn = curReal[i];
            if (jn) {
                jn.onSetMyAction(false);
                if (this.curActionSeat == i) {
                    jn.onSetMyAction(true);
                }
            }
        }
    },

    // 加入一个牌桌人员, 以uid做KEY
    AddJoin: function AddJoin(vJn) {
        if (!!vJn && vJn.uid > 0) {
            var self = this;
            self.AllJoins[vJn.uid] = vJn;
        }
    },

    // 更新部分玩家的信息是否在打牌或者旁观
    onUpdateAllJoinsInfo: function onUpdateAllJoinsInfo(curSeat) {
        var curObj;
        var isLookOn = true; //是否旁观默认都是
        for (var key in this.AllJoins) {
            curObj = this.AllJoins[key];
            isLookOn = true;
            for (var i = 0; i < curSeat.length; ++i) {
                var val = curSeat[i];
                if (val && curObj.uid == val) {
                    isLookOn = false;
                    break;
                }
            }
            if (true == isLookOn) {
                curObj.onSetPlay(false);
            }
        }
    },

    // 查找牌桌里的玩家:在座/旁观
    GetTableJoin: function GetTableJoin(accID) {
        if (accID == undefined) return null;
        return this.AllJoins[accID];
    },

    //查找实际打牌的玩家
    GetRealJnByAcc: function GetRealJnByAcc(accID) {
        var obj;
        for (var key in this.RealPlay) {
            obj = this.RealPlay[key];
            if (obj.uid == accID) {
                return obj;
                break;
            }
        }
        return null;
    },

    // 查找牌桌里的在座的玩家
    GetSitDwnJoin: function GetSitDwnJoin(vIndex) {
        if (vIndex >= this.RealPlay.length || vIndex < 0) {
            return null;
        }
        return this.RealPlay[vIndex];
    },

    // 是否在开始打牌
    isStarFigthCard: function isStarFigthCard() {
        return this.CurRound > 0;
    },

    // true: 输入的玩家是庄家
    isDealer: function isDealer(posIndex) {
        var curData = null;
        if (this.dealerSeat == posIndex) {
            return true;
        }
        return false;
    },

    // 移除一个牌桌人员
    RemoveJoin: function RemoveJoin(vAccID) {
        for (var i = 0; i < this.RealPlay.length; ++i) {
            var val = this.RealPlay[i];
            if (!!val && val.uid == vAccID) {
                this.RealPlay[i] = null;
                break;
            }
        }
        delete this.AllJoins[vAccID];
    },
    // 清理玩家自己的牌
    ClearSelfCard: function ClearSelfCard(playerID) {
        var vJn = this.GetTableJoin(playerID);
        if (vJn) {
            vJn.onSetMyCards(null);
        }
    },

    // 设置玩家自动牌
    OnAddSelfData: function OnAddSelfData(cardData) {
        // console.log(" 设置玩家自己的牌数据 ",cardData);
        // console.log(this.seatMax,this.RealPlay);
        if (!!cardData.selfCard) {
            for (var i = 0; i < this.seatMax; ++i) {
                var vJn = this.GetSitDwnJoin(i);
                if (!!vJn && vJn.IsPlayerSelf()) {
                    this.SetTableFlag(TableFlags.TABLE_FLAG_PLAY);
                    // console.error("玩家自己的数据=== ",cardData.selfCard);
                    vJn.onSetMyCards(cardData.selfCard);
                    return true;
                    break;
                }
            }
        }
        return false;
    },

    // 把网络数据拷贝到本地
    updateProperties: function updateProperties(_data) {
        console.log("服务器更新数据,", _data);
        if (null == _data) return;
        var self = this;

        for (var key in _data) {
            switch (key) {
                case "pid":
                    this.configInfo = tableConfig[_data.pid];
                    break;
                case "showCard":
                    this[key] = _data[key];
                    this.SetTableFlag(TableFlags.TABLE_FLAG_PUB);
                    break;
                case "dealerSeat":
                    this[key] = _data[key];
                    this.SetTableFlag(TableFlags.TABLE_FLAG_DEALER);
                    break;
                case "pot":
                    if (this.pot == undefined || this.checkPotEqual(_data[key], this.pot) == false) this.SetTableFlag(TableFlags.TABLE_FLAG_POT);
                    this[key] = _data[key];
                    break;
                case "roundStatus":
                    this[key] = _data[key];
                    this.SetTableFlag(TableFlags.TABLE_FLAG_TSTATUS);
                    break;
                case "interval":
                    if (_data[key] > 0) {
                        this.SetTableFlag(TableFlags.TABLE_FLAG_INTERVAL);
                    }
                    this[key] = _data[key] < 0 ? 0 : _data[key];
                    break;
                case "matchId":
                    this.matchId = parseInt(_data[key]);
                    break;
                case "newBlindLevel":
                    this.newBlindLevel = _data.newBlindLevel;
                    if (this.newBlindLevel > this.blindLevel) {
                        this.showStartAddAnteTip = true;
                        this.showCountdownWithBlind = false;
                        this.hasShowAnteTip = true;
                    } else {
                        this.hasShowAnteTip = false;
                    }
                    break;
                case "blindLevel":
                    this.blindLevel = _data.blindLevel;
                    if (this.newBlindLevel == this.blindLevel && this.hasShowAnteTip == true) {
                        this.showEndAddAnteTip = true;
                        this.showCountdownWithBlind = true;
                    }
                    break;
                case "matchData":
                    Global.champDataManager.updateChampDataWithMatchData(_data[key]);
                    this[key] = _data[key];
                    break;
                default:
                    this[key] = _data[key];
                    break;
            }
        }

        if (UITools.IsRealObj(_data.round)) self.onSetCurRound(_data.round); // 当前回合数
        if (UITools.IsRealObj(_data.gamers)) self.onSetAllGamersInfo(_data.gamers); //所有玩家的数据

        if (!!_data.seat) {
            this.InitRealPlay(_data.seat);
        }
        if (UITools.IsRealObj(_data.showBet) || UITools.IsRealObj(_data.seat)) {
            if (_data.showBet) {
                self.onUpdateTableShowBet(_data.showBet, true);
            } else {
                self.onUpdateTableShowBet(this.showBetList, false);
            }
        }
        //当前行动者
        if (UITools.IsRealObj(_data.nextActionSeat)) self.onSetCurActionSeat(_data.nextActionSeat);

        //结算结果
        if (UITools.IsRealObj(_data.result)) {
            self.onSetResult(_data.result);

            if (this.roundStatus == Config.RoundStatusEnum.SETTLE) {
                self.SetRoundOverJn();
                self.makeHistory(); // 保存为历史记录
            }
        } else {
            if (this.roundStatus == Config.RoundStatusEnum.SETTLE) {
                self.onUpdateHistory(); // 更新保存为历史记录
            }
        }
    },

    InitRealPlay: function InitRealPlay(_seat) {
        var vJn = null;
        if (!this.isInit) {
            for (var i = 0; i < this.seatMax; ++i) {
                vJn = new TablePlayerData();
                vJn.InitJoin();
                this.RealPlay[i] = vJn; // null 也要保存!!!
            }
            this.isInit = true;
        } else {
            this.updatePositionInfo(_seat);
        }

        this.viewCard = true;
        this.SetTableFlag(TableFlags.TABLE_FLAG_SEAT);
        for (var j = 0; j < _seat.length; ++j) {
            var uid = _seat[j];
            vJn = null;
            if (!!uid) {
                var realUID = Math.abs(uid);
                vJn = this.GetTableJoin(realUID);
                if (vJn) {
                    vJn.onSetPlay(false);
                    if (uid > 0) {
                        vJn.onSetPlay(true);
                    }
                    // 设置玩家是否是旁观模式
                    if (vJn.IsPlayerSelf()) {
                        this.viewCard = false;
                    }
                } else {
                    vJn = new TablePlayerData();
                    vJn.InitJoin();
                    vJn.uid = uid;
                    console.error("服务器错误,gamers 不存在的数据 id = ", uid);
                }
                this.RealPlay[j] = vJn; // null 也要保存!!!
            }
        }
        this._onGenShowIndex();
        // 更新牌桌内玩家是否是旁观
        this.onUpdateAllJoinsInfo(_seat);
    },

    // 更新玩家座位信息/是否是站起
    updatePositionInfo: function updatePositionInfo(_seat) {
        var val;
        for (var i = 0; i < this.RealPlay.length; ++i) {
            val = this.RealPlay[i];
            if (!val) {
                val = new TablePlayerData();
                val.InitJoin();
                this.RealPlay[i] = val;
            }
            var accID = parseInt(val.uid);
            if (accID > 0) {
                var isExist = this.isExistSeatFun(accID, _seat);
                if (!isExist) {
                    var vJn = this.GetTableJoin(accID);
                    if (vJn) {
                        // console.log("设置旁观====",vJn);
                        //站起状态
                        var curData = new TablePlayerData();
                        curData.InitJoin();
                        curData.posIndex = vJn.posIndex;
                        curData.MyShowBetIn = vJn.MyShowBetIn;
                        curData.roundBet = vJn.roundBet;
                        curData.onIsPlay(false);
                        if (!vJn.IsPlayerSelf()) {
                            curData.onSetBasePositionState(2); //站起/旁观
                        } else {
                            curData.onSetBasePositionState(0);
                        }
                        curData.joinTime = Date.now();
                        this.RealPlay[i] = curData;
                        vJn.showCard = [];
                        vJn.action = 0;
                        vJn.posIndex = 0;
                        vJn.MyShowBetIn = 0;
                        vJn.roundBet = 0;
                    } else {
                        console.log("玩家已经离桌去gamers里面更新");
                    }
                }
            }
        }
    },

    onResetShowBet: function onResetShowBet() {
        var vJn = null;
        for (var j = 0; j < this.RealPlay.length; j++) {
            vJn = this.RealPlay[j];
            vJn.MyShowBetIn = 0;
        }
        this.showBetList = [];
    },

    // 更新显示的筹码
    onUpdateTableShowBet: function onUpdateTableShowBet(showBet, isUpdate) {
        var curBetList = [];
        if (true == isUpdate) {
            if (this.roundStatus == Config.RoundStatusEnum.IDLE || this.roundStatus == Config.RoundStatusEnum.START) this.onResetShowBet();
            if (showBet.length == 0) {
                this.onResetShowBet();
                return;
            }
            var curNum,
                backNum = null;
            for (var i = 0; i < showBet.length; i++) {
                curNum = showBet[i];
                curBetList.push(curNum);
                if (!curNum) continue;
                backNum = this.showBetList[i];
                if (!backNum) continue;
                if (curNum == backNum) {
                    curBetList[i] = null;
                }
            }
            this.showBetList = showBet;
        }
        // console.log("::;showBetList::",this.showBetList);
        var curBet,
            vJn = null;
        for (var i = 0; i < curBetList.length; ++i) {
            curBet = curBetList[i];
            if (curBet == null) curBet = 0;
            if (curBet >= 0) {
                for (var j = 0; j < this.RealPlay.length; j++) {
                    vJn = this.RealPlay[j];
                    if (vJn && vJn.posIndex == i) {
                        if (true == isUpdate) {
                            // 增量更新
                            if (curBet > 0 && vJn.MyShowBetIn != curBet) {
                                vJn.onSetShowBetIn(curBet);
                            } else {
                                if (this.showBetList[i] && this.showBetList[i] >= 0) {
                                    vJn.MyShowBetIn = this.showBetList[i];
                                } else {
                                    vJn.MyShowBetIn = 0;
                                }
                            }
                        } else {
                            vJn.MyShowBetIn = curBet;
                        }
                        break;
                    }
                }
            }
        }
    },

    // 是否在seat里面
    isExistSeatFun: function isExistSeatFun(mId, _seat) {
        for (var j = 0; j < _seat.length; ++j) {
            if (mId == Math.abs(_seat[j])) {
                return true;
            }
        }
        return false;
    },

    // 构造显示顺序, 自己永远放最后
    _onGenShowIndex: function _onGenShowIndex() {
        var self = this;
        var curReal = this.RealPlay;
        // 找到自己的位置索引
        var myIndx = 0; // 找不到就按服务器的顺序显示
        var isHave = false;
        for (var i = 0; i < self.seatMax; ++i) {
            var jn = curReal[i];
            if (jn && jn.IsPlayerSelf()) {
                jn.onSetShowIndex(-1); // 自己标记成 -1
                jn.onSetPositionIndex(i);
                self.setPosStartIndex(i);
                myIndx = i;
                isHave = true;
                break;
            }
        }
        var showIndx = 0;
        myIndx = this.PosStartIndex;
        if (myIndx == -2 && false == isHave) {
            for (var i = 0; i < self.seatMax; ++i) {
                var jn = curReal[i];
                if (jn) {
                    jn.onSetShowIndex(showIndx);
                    // 设置位置索引
                    jn.onSetPositionIndex(i);
                }
                ++showIndx; // 空位自动跳过
            }
        } else {
            var starNum = myIndx + 1;
            for (var i = starNum; i < self.seatMax; ++i) {
                var jn = curReal[i];
                if (jn) {
                    jn.onSetShowIndex(showIndx);
                    jn.onSetPositionIndex(i);
                }
                ++showIndx; // 空位自动跳过
            }
            for (var i = 0; i < myIndx; ++i) {
                var jn = curReal[i];
                if (jn) {
                    jn.onSetShowIndex(showIndx);
                    jn.onSetPositionIndex(i);
                }
                ++showIndx; // 空位自动跳过
            }
            if (false == isHave) {
                var jn = curReal[myIndx];
                jn.onSetShowIndex(showIndx);
                jn.onSetPositionIndex(myIndx);
            }
        }
    },

    // true: 轮到我执行Action
    IsMyActionTurn: function IsMyActionTurn() {
        var curAction = this.curActionSeat;
        //console.log('IsMyActionTurn: curAction = ',curAction );
        if (curAction >= 0 && curAction < this.RealPlay.length) {
            var jn = this.RealPlay[curAction];
            //console.log('IsMyActionTurn: jn = ', jn);
            if (jn) return jn.IsPlayerSelf() && jn.onIsPlay();
        }
        return false;
    },

    // 返回当前行动者的索引
    OnGetActionIndex: function OnGetActionIndex() {
        var curAction = this.curActionSeat;
        var obj = {};
        // console.log('IsMyActionTurn: curAction = ',curAction );
        // console.log(this.RealPlay);
        if (curAction >= 0 && curAction < this.RealPlay.length) {
            var jn = this.RealPlay[curAction];
            if (jn) {
                return jn;
            }
        }
        return null;
    },

    // 是否是自己行动回合
    IsSlefAction: function IsSlefAction() {
        var obj = this.OnGetActionIndex();
        // console.log("obj === ",obj);
        if (null != obj) {
            if (obj.IsPlayerSelf()) {
                return true;
            }
        }
        return false;
    },

    // true: 客户端主角在座位上
    IsMeOnSeat: function IsMeOnSeat() {
        for (var i = 0; i < this.RealPlay.length; ++i) {
            var val = this.RealPlay[i];
            if (!!val && val.IsPlayerSelf()) {
                return true;
            }
        }
        return false;
    },

    //获取当前桌最大投注额
    GetMaxBetIn: function GetMaxBetIn() {
        var self = this;
        var nBetIn = 0;
        for (var i = 0; i < self.RealPlay.length; ++i) {
            var val = self.RealPlay[i];
            if (!!val && val.status == 5) {
                nBetIn = nBetIn > val.roundBet ? nBetIn : val.roundBet;
            }
        }
        return nBetIn;
    },

    //获取我的跟注额
    GetCallNum: function GetCallNum() {
        var MaxBet = this.GetMaxBetIn();
        var MyBet = this.GetMyBetNum();
        var callNum = MaxBet - MyBet;
        return callNum;
    },

    //我的下注额
    GetMyBetNum: function GetMyBetNum() {
        var self = this;
        var nBetIn = 0;
        for (var i = 0; i < self.RealPlay.length; ++i) {
            var val = self.RealPlay[i];
            if (!!val && val.IsPlayerSelf()) {
                return val.roundBet;
            }
        }
        return nBetIn;
    },

    //我的总下注额
    GetMyTotalBet: function GetMyTotalBet() {
        var self = this;
        var nBetIn = 0;
        for (var i = 0; i < self.RealPlay.length; ++i) {
            var val = self.RealPlay[i];
            if (!!val && val.IsPlayerSelf()) {
                return val.bet;
            }
        }
        return nBetIn;
    },

    //玩家下注额
    GetJnTotalBet: function GetJnTotalBet(id) {
        var self = this;
        var nBetIn = 0;
        for (var i = 0; i < self.RealPlay.length; ++i) {
            var val = self.RealPlay[i];
            if (!!val && val.uid == id) {
                return val.bet;
            }
        }
        return nBetIn;
    },

    getMyInfo: function getMyInfo() {
        var result = null;
        var player;
        for (var i = 0; i < this.RealPlay.length; i++) {
            player = this.RealPlay[i];
            if (player != null && Global.playerInfo.uid == player.uid) {
                result = player;
            }
        }

        return result;
    },

    //我的桌内资产
    GetMyGold: function GetMyGold() {
        var self = this;
        var nMyGold = 0;
        for (var i = 0; i < self.RealPlay.length; ++i) {
            var val = self.RealPlay[i];
            if (!!val && val.IsPlayerSelf()) {
                return val.chip;
            }
        }
        return nMyGold;
    },

    //跟注，让牌，AllIn按钮显示
    CanShowWhichBtn: function CanShowWhichBtn() {

        var nMaxBet = this.GetMaxBetIn();
        var nMyBetNum = this.GetMyBetNum(); //我的加注额
        var nMyGold = this.GetMyGold();
        var nMyMinBet = this.minRaiseBet + nMaxBet;

        //我的加注额 等于 最大加注额 （让牌）
        if (nMaxBet == nMyBetNum) {
            if (nMyGold < nMyMinBet) {
                return Config.GameActionType.ALLIN;
            }
            return Config.GameActionType.CHECK;
        } else {
            if (nMaxBet > nMyBetNum) {
                if (nMyMinBet >= nMyBetNum + nMyGold) {
                    return Config.GameActionType.ALLIN;
                } else {
                    return Config.GameActionType.CALL;
                }
            }
        }
        return Config.GameActionType.NONE;
    },
    // 通过ID获得显示索引
    getShowIndexById: function getShowIndexById(vAccID) {
        var showIndex = -2;
        for (var i = 0; i < this.RealPlay.length; ++i) {
            var val = this.RealPlay[i];
            if (!!val && val.uid == vAccID) {
                var data = this.RealPlay[i];
                showIndex = data.showIndex;
                break;
            }
        }
        return showIndex;
    },

    // 保存为历史记录
    makeHistory: function makeHistory() {
        if (this.TableHisObjList.length > 5) {
            this.TableHisObjList.pop();
        }
        var vHis = new TableHisObjJS();
        vHis.InitHisTable(this);
        this.TableHisObjList.unshift(vHis);
    },

    //在结算的时候亮牌更新保存的历史记录
    onUpdateHistory: function onUpdateHistory() {
        var vHis = this.TableHisObjList.shift();
        // 结算的时候更新玩家亮牌的数据
        vHis.updateOpenCardData(this.RealPlay);
        this.TableHisObjList.unshift(vHis);
    }
});

module.exports = TableData;

cc._RF.pop();
},{"Config":"Config","Table":"Table","TableHisObjJS":"TableHisObjJS","TablePlayerData":"TablePlayerData","UITools":"UITools"}],"TableHisJoin":[function(require,module,exports){
"use strict";
cc._RF.push(module, '504caauD8NBa4dxpETK6jZP', 'TableHisJoin');
// Scripts/GameData/TableHisJoin.js

"use strict";

// 历史记录

//-----------------------------------------------------------------------------------------
// 历史牌桌人员: 打牌/旁观
var TableHisJoin = cc.Class({

    // 初始化基本成员
    InitHisJoin: function InitHisJoin(tableJn) {
        this.uid = tableJn.uid; // 玩家ID
        this.nick = tableJn.nick; // 昵称
        this.avatar = tableJn.avatar; // 头像
        this.chip = tableJn.chip; // 筹码
        this.bet = tableJn.bet; // 总投注量
        this.MyShowBetIn = tableJn.MyShowBetIn; // 本轮投注量(显示用)
        this.roundBet = tableJn.roundBet; // 本轮投注量 (逻辑计算用)
        this.MySex = tableJn.MySex; // 性别
        this.showCard = tableJn.showCard; // 私有牌
        this.SeatIndex = tableJn.SeatIndex; // 玩家座位编号
        this.showIndex = tableJn.showIndex; // 玩家的显示索引
        this.IsPlay = tableJn.IsPlay; // true: 玩牌中
        this.autoPlay = tableJn.autoPlay; // 1: 托管
        this.action = tableJn.action;
    }
});

//-----------------------------------------------------------------------------------------
// 导出
module.exports = TableHisJoin;

cc._RF.pop();
},{}],"TableHisObjJS":[function(require,module,exports){
"use strict";
cc._RF.push(module, '5a96fMc9F9LKKCDOh1KC48I', 'TableHisObjJS');
// Scripts/GameData/TableHisObjJS.js

"use strict";

// 历史记录

var TableHisJoin = require("TableHisJoin");

//-----------------------------------------------------------------------------------------
// 历史牌桌对象
var TableHisObj = cc.Class({

    // 初始化基本成员
    InitHisTable: function InitHisTable(tObj) {
        this.RealPlay = []; // 实际打牌人员, TableJoin.uid 为key
        this.showCard = tObj.showCard; // 公共牌
        this.tid = tObj.tid; // 牌桌动态ID
        this.TableCfg = tObj.configInfo.pid; // 牌桌静态ID
        this.CurRound = tObj.CurRound; // 当前回合数
        this.dealerSeat = tObj.dealerSeat; // 庄家座位编号
        this.viewCard = tObj.viewCard; //是否是否观牌状态
        this.seatMax = tObj.seatMax; //牌桌的人数
        this.pot = tObj.pot; //金钱池子
        this.result = tObj.result; //结算结果
        this.historyPlayerList = []; //历史牌局玩家列表

        for (var i = 0; i < tObj.RealPlay.length; ++i) {
            var vHisJn = null;
            var jn = tObj.RealPlay[i];
            if (jn) {
                vHisJn = new TableHisJoin();
                vHisJn.InitHisJoin(jn);
            }
            this.RealPlay.push(vHisJn);
        }
        this.historyPlayerList = this.RealPlay;
    },

    //获取我的结算金额
    GetMyResultNum: function GetMyResultNum(nAccID) {
        var nMyResut = 0;
        for (var i = 0; i < this.result.length; ++i) {
            var aResult = this.result[i];
            if (aResult[0] == nAccID) {
                nMyResut += aResult[2];
            }
        }
        return nMyResut;
    },

    // 更新玩家亮牌的数据
    updateOpenCardData: function updateOpenCardData(realPlayList) {
        var curData, newData;
        for (var i = 0; i < realPlayList.length; i++) {
            newData = realPlayList[i];
            if (!newData || newData.uid == undefined) continue;
            for (var j = 0; j < this.historyPlayerList.length; j++) {
                curData = this.historyPlayerList[j];
                if (!curData || curData.uid == undefined) continue;
                if (newData.uid == curData.uid) {
                    curData.showCard = newData.showCard;
                }
            }
        }
    }

});

//-----------------------------------------------------------------------------------------
// 导出
module.exports = TableHisObj;

cc._RF.pop();
},{"TableHisJoin":"TableHisJoin"}],"TablePlayerData":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'a79ad3JvKROnrUkyfj3rrkl', 'TablePlayerData');
// Scripts/GameData/TablePlayerData.js

"use strict";

var UITools = require("UITools");
var Config = require("Config");
var GameActionType = Config.GameActionType;
var PlayerFlags = Config.PlayerFlags;

// 牌桌人员: 打牌/旁观
var TablePlayerData = cc.Class({

    // 初始化基本成员
    InitJoin: function InitJoin() {
        var self = this;
        this.ClearSelf();
        self.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_INIT);
    },

    // 清理数据
    ClearSelf: function ClearSelf() {
        var self = this;
        self.PlayerFlags = PlayerFlags.PLAYER_FLAG_NONE; // 数据刷新类型[位判断]
        self.MyShowBetIn = 0; // 本轮投注量(显示用)
        self.showIndex = 0; // 玩家的显示索引
        self.IsPlay = false; // true: 玩牌中
        self.action = 0; //玩家行动值
        self.IsMyAction = false; //是否是自己行动回合
        self.basePositionState = 0; //当前位置状态 1为留座状态,2为旁观状态,3为离桌状态,4为进桌状态
        self.posIndex = 0; //玩家位置索引
        self.joinTime = 0; //玩家进桌时间
    },

    // 增加牌桌标记
    SetPlayerFlag: function SetPlayerFlag(vAdd) {
        this.PlayerFlags = UITools.SetBitFlag(this.PlayerFlags, vAdd);
    },

    // 删除牌桌标记标记
    RemovePlayerFlag: function RemovePlayerFlag(vRemove) {
        this.PlayerFlags = UITools.RemoveBitFlag(this.PlayerFlags, vRemove);
    },

    // 是否有牌桌标记
    HasPlayerFlag: function HasPlayerFlag(vTest) {
        return UITools.HasBitFlag(this.PlayerFlags, vTest);
    },

    // 彻底清理牌桌标记 !! 注意: 每次UI处理完要调用下此函数 !!
    ResetPlayerFlags: function ResetPlayerFlags() {
        this.PlayerFlags = 0;
    },

    // 玩家座位状态
    onSetBasePositionState: function onSetBasePositionState(value) {
        this.basePositionState = value;
    },

    // 是否是自己行动回合
    onSetMyAction: function onSetMyAction(value) {
        this.IsMyAction = value;
    },

    // 设置玩家的位置索引用于给服务器发位置ID
    onSetPositionIndex: function onSetPositionIndex(value) {
        this.posIndex = value;
    },

    // 显示的钱
    onSetShowBetIn: function onSetShowBetIn(value) {
        this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_PLAYER_JETTON);
        this.MyShowBetIn = value;
    },

    onSetMyCards: function onSetMyCards(value) {
        this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_MY_CARD);
        this.showCard = value;
    },

    // 玩家的显示索引
    onSetShowIndex: function onSetShowIndex(value) {
        if (this.showIndex == value) return;
        this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_ACTION_TIME);
        if (this.MyShowBetIn > 0) {
            this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_PLAYER_JETTON);
        }
        this.showIndex = value;
    },

    // true: 当前属于客户端主角
    IsPlayerSelf: function IsPlayerSelf() {
        return Global.playerInfo.uid == this.uid;
    },

    // 标记是否在打牌
    onSetPlay: function onSetPlay(vPlay) {
        this.IsPlay = vPlay;
    },

    // 查询是否在打牌
    onIsPlay: function onIsPlay() {
        return this.IsPlay;
    },

    // 获取Action标记图
    GetActionflagImg: function GetActionflagImg(curAction, isPlay) {
        switch (curAction) {

            case GameActionType.FOLD:
                //弃牌
                {
                    this.onPlayCardSound('fapai', isPlay);
                    this.onPlayCardSound('qipai', isPlay);
                    return 'Textures/otherTextures/img_discard';
                }
            case GameActionType.CALL:
                //跟注
                {
                    this.onPlayCardSound('genzhu', isPlay);
                    return 'Textures/otherTextures/img_with';
                }
            case GameActionType.CHECK:
                //让牌
                {
                    this.onPlayCardSound('checkboy', isPlay);
                    return 'Textures/otherTextures/img_let';
                }
            case GameActionType.RAISE:
                //加注
                {
                    this.onPlayCardSound('jiazhu', isPlay);
                    return 'Textures/otherTextures/img_filling';
                }
            case GameActionType.ALLIN:
                //全下allin
                {
                    this.onPlayCardSound('allin', isPlay);
                    return 'Textures/otherTextures/img_allin';
                }
            default:
                {
                    return '';
                    // break;
                }
        }
        return '';
    },
    // 播放音效
    onPlayCardSound: function onPlayCardSound(soundName, isPlay) {
        if (false == isPlay) return;
        Global.musicManager.PlayNameSound(soundName);
    },

    // 最大时间
    onGetActionMaxTime: function onGetActionMaxTime() {
        return Math.round(this.actionMaxTime / 1000);
    },

    // 把网络数据拷贝到本地
    CpyPlayerNetToMe: function CpyPlayerNetToMe(_data) {
        for (var key in _data) {
            switch (key) {
                case "nick":
                    this[key] = decodeURI(_data[key]);
                    break;
                case "actionTime":
                    this[key] = _data[key];
                    this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_ACTION_TIME);
                    break;
                case "status":
                    this[key] = _data[key];
                    this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_CURRENT_STATES);
                    break;
                case "isNew":
                    this[key] = _data[key];
                    this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_IS_NEW);
                    break;
                case "imprestGold":
                    this[key] = _data[key] == undefined ? 0 : _data[key];
                    break;
                case "action":
                    if (this.action == _data[key]) break;
                    this[key] = _data[key];
                    this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_ACTION_CHANGE);
                    if (_data[key] == GameActionType.FOLD) {
                        this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_FOLD_CRD);
                    }
                    break;
                case "showCard":
                    if (this.IsPlayerSelf() == false) {
                        this[key] = _data[key];
                        this.SetPlayerFlag(PlayerFlags.PLAYER_FLAG_MY_CARD);
                    }
                    break;
                default:
                    this[key] = _data[key];
                    break;
            }
        }

        var self = this;

        if (UITools.IsRealObj(_data.showCard) && !self.IsPlayerSelf()) {
            if (false == self.IsPlayerSelf()) {
                self.onSetMyCards(_data.showCard); // 私有牌
            }
        }
    }

});

module.exports = TablePlayerData;

cc._RF.pop();
},{"Config":"Config","UITools":"UITools"}],"Table":[function(require,module,exports){
"use strict";
cc._RF.push(module, '2f3f54HQvxK/ZX2ykAnPSzr', 'Table');
// Scripts/GameData/config/Table.js

"use strict";

var data = [];
data["1000"] = {
		PID: "1000",
		roomId: "5",
		smallBlind: "5",
		bigBlind: "10",
		ante: "0",
		minBring: "0",
		maxBring: "999999999",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0"
};
data["1001"] = {
		PID: "1001",
		roomId: "1",
		smallBlind: "5",
		bigBlind: "10",
		ante: "0",
		minBring: "500",
		maxBring: "5000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1002"] = {
		PID: "1002",
		roomId: "1",
		smallBlind: "10",
		bigBlind: "20",
		ante: "0",
		minBring: "1000",
		maxBring: "10000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1003"] = {
		PID: "1003",
		roomId: "1",
		smallBlind: "25",
		bigBlind: "50",
		ante: "0",
		minBring: "2500",
		maxBring: "25000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1004"] = {
		PID: "1004",
		roomId: "1",
		smallBlind: "50",
		bigBlind: "100",
		ante: "0",
		minBring: "5000",
		maxBring: "50000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1005"] = {
		PID: "1005",
		roomId: "1",
		smallBlind: "100",
		bigBlind: "200",
		ante: "0",
		minBring: "10000",
		maxBring: "100000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1006"] = {
		PID: "1006",
		roomId: "1",
		smallBlind: "250",
		bigBlind: "500",
		ante: "0",
		minBring: "25000",
		maxBring: "250000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1007"] = {
		PID: "1007",
		roomId: "2",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "0",
		minBring: "50000",
		maxBring: "500000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1008"] = {
		PID: "1008",
		roomId: "2",
		smallBlind: "500",
		bigBlind: "1000",
		ante: "0",
		minBring: "50000",
		maxBring: "500000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1009"] = {
		PID: "1009",
		roomId: "2",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "0",
		minBring: "100000",
		maxBring: "1000000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1010"] = {
		PID: "1010",
		roomId: "2",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "0",
		minBring: "100000",
		maxBring: "1000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1011"] = {
		PID: "1011",
		roomId: "2",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "0",
		minBring: "250000",
		maxBring: "2500000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1012"] = {
		PID: "1012",
		roomId: "2",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "0",
		minBring: "250000",
		maxBring: "2500000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1013"] = {
		PID: "1013",
		roomId: "2",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "0",
		minBring: "500000",
		maxBring: "5000000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1014"] = {
		PID: "1014",
		roomId: "2",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "0",
		minBring: "500000",
		maxBring: "5000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1015"] = {
		PID: "1015",
		roomId: "2",
		smallBlind: "7500",
		bigBlind: "15000",
		ante: "0",
		minBring: "750000",
		maxBring: "7500000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1016"] = {
		PID: "1016",
		roomId: "2",
		smallBlind: "7500",
		bigBlind: "15000",
		ante: "0",
		minBring: "750000",
		maxBring: "7500000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1017"] = {
		PID: "1017",
		roomId: "2",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "0",
		minBring: "1000000",
		maxBring: "10000000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1018"] = {
		PID: "1018",
		roomId: "2",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "0",
		minBring: "1000000",
		maxBring: "10000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1019"] = {
		PID: "1019",
		roomId: "2",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "0",
		minBring: "2000000",
		maxBring: "20000000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1020"] = {
		PID: "1020",
		roomId: "2",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "0",
		minBring: "2000000",
		maxBring: "20000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1021"] = {
		PID: "1021",
		roomId: "2",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "0",
		minBring: "5000000",
		maxBring: "50000000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1022"] = {
		PID: "1022",
		roomId: "2",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "0",
		minBring: "5000000",
		maxBring: "50000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1023"] = {
		PID: "1023",
		roomId: "2",
		smallBlind: "100000",
		bigBlind: "200000",
		ante: "0",
		minBring: "10000000",
		maxBring: "100000000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1024"] = {
		PID: "1024",
		roomId: "2",
		smallBlind: "100000",
		bigBlind: "200000",
		ante: "0",
		minBring: "10000000",
		maxBring: "100000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1025"] = {
		PID: "1025",
		roomId: "2",
		smallBlind: "250000",
		bigBlind: "500000",
		ante: "0",
		minBring: "25000000",
		maxBring: "250000000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1026"] = {
		PID: "1026",
		roomId: "2",
		smallBlind: "250000",
		bigBlind: "500000",
		ante: "0",
		minBring: "25000000",
		maxBring: "250000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1027"] = {
		PID: "1027",
		roomId: "2",
		smallBlind: "1000000",
		bigBlind: "2000000",
		ante: "0",
		minBring: "100000000",
		maxBring: "1000000000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1028"] = {
		PID: "1028",
		roomId: "2",
		smallBlind: "1000000",
		bigBlind: "2000000",
		ante: "0",
		minBring: "100000000",
		maxBring: "1000000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1029"] = {
		PID: "1029",
		roomId: "3",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "0",
		minBring: "100000",
		maxBring: "1000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1030"] = {
		PID: "1030",
		roomId: "3",
		smallBlind: "2500",
		bigBlind: "5000",
		ante: "0",
		minBring: "250000",
		maxBring: "2500000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1031"] = {
		PID: "1031",
		roomId: "3",
		smallBlind: "5000",
		bigBlind: "10000",
		ante: "0",
		minBring: "500000",
		maxBring: "5000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1032"] = {
		PID: "1032",
		roomId: "3",
		smallBlind: "7500",
		bigBlind: "15000",
		ante: "0",
		minBring: "750000",
		maxBring: "7500000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1033"] = {
		PID: "1033",
		roomId: "3",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "0",
		minBring: "1000000",
		maxBring: "10000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1034"] = {
		PID: "1034",
		roomId: "3",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "0",
		minBring: "2000000",
		maxBring: "20000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1035"] = {
		PID: "1035",
		roomId: "3",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "0",
		minBring: "5000000",
		maxBring: "50000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1036"] = {
		PID: "1036",
		roomId: "3",
		smallBlind: "100000",
		bigBlind: "200000",
		ante: "0",
		minBring: "10000000",
		maxBring: "100000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1037"] = {
		PID: "1037",
		roomId: "3",
		smallBlind: "250000",
		bigBlind: "500000",
		ante: "0",
		minBring: "25000000",
		maxBring: "250000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1038"] = {
		PID: "1038",
		roomId: "3",
		smallBlind: "1000000",
		bigBlind: "2000000",
		ante: "0",
		minBring: "100000000",
		maxBring: "1000000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1039"] = {
		PID: "1039",
		roomId: "4",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "50000",
		minBring: "60000",
		maxBring: "60000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1040"] = {
		PID: "1040",
		roomId: "4",
		smallBlind: "1000",
		bigBlind: "2000",
		ante: "50000",
		minBring: "200000",
		maxBring: "200000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1041"] = {
		PID: "1041",
		roomId: "4",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "100000",
		minBring: "150000",
		maxBring: "150000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1042"] = {
		PID: "1042",
		roomId: "4",
		smallBlind: "2000",
		bigBlind: "4000",
		ante: "100000",
		minBring: "400000",
		maxBring: "400000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1043"] = {
		PID: "1043",
		roomId: "4",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "200000",
		minBring: "2000000",
		maxBring: "2000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1044"] = {
		PID: "1044",
		roomId: "4",
		smallBlind: "10000",
		bigBlind: "20000",
		ante: "500000",
		minBring: "2000000",
		maxBring: "2000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1045"] = {
		PID: "1045",
		roomId: "4",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "500000",
		minBring: "600000",
		maxBring: "600000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1046"] = {
		PID: "1046",
		roomId: "4",
		smallBlind: "20000",
		bigBlind: "40000",
		ante: "500000",
		minBring: "4000000",
		maxBring: "4000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1047"] = {
		PID: "1047",
		roomId: "4",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "1000000",
		minBring: "1200000",
		maxBring: "1200000",
		seatMax: "6",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1048"] = {
		PID: "1048",
		roomId: "4",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "1000000",
		minBring: "8000000",
		maxBring: "8000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
data["1049"] = {
		PID: "1049",
		roomId: "4",
		smallBlind: "50000",
		bigBlind: "100000",
		ante: "5000000",
		minBring: "20000000",
		maxBring: "20000000",
		seatMax: "9",
		seatMin: "2",
		canLook: "1",
		taxRate: "0.02"
};
module.exports = data;

cc._RF.pop();
},{}],"TeachCards":[function(require,module,exports){
"use strict";
cc._RF.push(module, '0ad6etMf1xJEY4Q+Y6Ibt7I', 'TeachCards');
// Scripts/GameData/config/TeachCards.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Public: "",
		MyHand: "",
		SBHand: "",
		BBHand: "",
		Dialogue: "欢迎来到《ACE德州扑克》，初次完成新手教学可以获得丰厚的启动金哦！赶快开始教学吧！"
};
data["2"] = {
		PID: "2",
		Public: "",
		MyHand: "",
		SBHand: "",
		BBHand: "",
		Dialogue: "德州扑克靠牌型比大小，但如果您有较高的技巧，无论拿什么牌都有可能击败对手赢得胜利哦！"
};
data["3"] = {
		PID: "3",
		Public: "",
		MyHand: "1|14,2|14",
		SBHand: "",
		BBHand: "",
		Dialogue: "标记D的为庄家位，庄家位顺时针方向两个玩家依次为小盲位和大盲位，庄位每局按顺时针方向移动。每个玩家发2张只有自己可见的手牌。"
};
data["4"] = {
		PID: "4",
		Public: "4|14,2|13,1|12",
		MyHand: "1|14,2|14",
		SBHand: "",
		BBHand: "",
		Dialogue: "桌面上依次发5张所有人可见的公共牌，第一次发3张。"
};
data["5"] = {
		PID: "5",
		Public: "4|14,2|13,1|12,1|11",
		MyHand: "1|14,2|14",
		SBHand: "",
		BBHand: "",
		Dialogue: "第二次发1张，称为转牌。"
};
data["6"] = {
		PID: "6",
		Public: "4|14,2|13,1|12,1|11,3|13",
		MyHand: "1|14,2|14",
		SBHand: "",
		BBHand: "",
		Dialogue: "第三次发1张，称为河牌。"
};
data["7"] = {
		PID: "7",
		Public: "4|14,2|13,1|12,1|11,3|13",
		MyHand: "1|14,2|14",
		SBHand: "",
		BBHand: "",
		Dialogue: "每个玩家的2张手牌和5张公共牌选出5张牌组成自己的最大牌型，比牌时按每个玩家最大牌型比大小。"
};
data["8"] = {
		PID: "8",
		Public: "",
		MyHand: "",
		SBHand: "",
		BBHand: "",
		Dialogue: "现在咱们一起看看实际情况下如何打牌吧！假设这是您的座位。"
};
data["9"] = {
		PID: "9",
		Public: "",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "手牌发完之后是第一轮下注，您的手牌不错，可以尝试跟注！"
};
data["10"] = {
		PID: "10",
		Public: "",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "请点击跟注！"
};
data["11"] = {
		PID: "11",
		Public: "",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "大家都选择了跟注，大盲选择了让牌，所有人行动结束并且下注相同，本轮下注结束。"
};
data["12"] = {
		PID: "12",
		Public: "2|14,3|7,1|9",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "翻牌前下注的筹码收到底池，并且发3张公共牌（翻牌）。"
};
data["13"] = {
		PID: "13",
		Public: "2|14,3|7,1|9",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "前3张公共牌发完后，您有一对A，对A是最大的对子，前面玩家都让牌，您可以考虑适当下注或者让牌，稳妥起见可以先让牌。"
};
data["14"] = {
		PID: "14",
		Public: "2|14,3|7,1|9",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "请点击让牌！"
};
data["15"] = {
		PID: "15",
		Public: "2|14,3|7,1|9,4|10",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "前一轮下注结束，发出了第4张公共牌（转牌）。"
};
data["16"] = {
		PID: "16",
		Public: "2|14,3|7,1|9,4|10",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "前4张公共牌发完后，您当前有2对，可以考虑一下是下注还是让牌。"
};
data["17"] = {
		PID: "17",
		Public: "2|14,3|7,1|9,4|10",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "前面玩家都选择了让牌，您可以考虑适当加注！"
};
data["18"] = {
		PID: "18",
		Public: "2|14,3|7,1|9,4|10",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "点击“1/2底池”可以设定一半底池的加注额。"
};
data["19"] = {
		PID: "19",
		Public: "2|14,3|7,1|9,4|10",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "设定好加注额度后，再点击“加注到”按钮确定下注吧！"
};
data["20"] = {
		PID: "20",
		Public: "2|14,3|7,1|9,4|10",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "大盲选择了跟注，其他人选择了弃牌，本轮下注结束！"
};
data["21"] = {
		PID: "21",
		Public: "2|14,3|7,1|9,4|10,4|14",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "最后一张公共牌发出来了，您的2张手牌和5张公共牌选出5张可组成的最大牌型是“葫芦”，已是牌面最大牌型，可以考虑全下！"
};
data["22"] = {
		PID: "22",
		Public: "2|14,3|7,1|9,4|10,4|14",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "大盲下注4800，请点击“最大”设定下注额为Allin！"
};
data["23"] = {
		PID: "23",
		Public: "2|14,3|7,1|9,4|10,4|14",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "请点击“加注到”按钮确定全下！"
};
data["24"] = {
		PID: "24",
		Public: "2|14,3|7,1|9,4|10,4|14",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "大盲位跟注了，他也选择了全下！"
};
data["25"] = {
		PID: "25",
		Public: "2|14,3|7,1|9,4|10,4|14",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "",
		Dialogue: "比牌了，您是葫芦，大盲位是顺子，您赢了！"
};
data["26"] = {
		PID: "26",
		Public: "2|14,3|7,1|9,4|10,4|14",
		MyHand: "1|14,1|10",
		SBHand: "",
		BBHand: "1|8,1|11",
		Dialogue: "恭喜您完成了本次教学，您现在已经掌握了跟注、下注、加注、全下等基本行动方法，祝您游戏愉快、大杀四方！"
};
module.exports = data;

cc._RF.pop();
},{}],"TeachTest":[function(require,module,exports){
"use strict";
cc._RF.push(module, '227851dIDFHQbr+LJlZcsjR', 'TeachTest');
// Scripts/GameData/config/TeachTest.js

"use strict";

var data = [];
data["1001"] = {
		PID: "1001",
		Hand: "1|5,3|12",
		Public: "2|6,1|7,3|9,2|14,4|3",
		Answer: "1"
};
data["1002"] = {
		PID: "1002",
		Hand: "1|5,3|12",
		Public: "2|6,1|7,3|9,2|12,4|3",
		Answer: "2"
};
data["1003"] = {
		PID: "1003",
		Hand: "1|5,3|12",
		Public: "2|5,1|7,3|9,2|12,4|3",
		Answer: "3"
};
data["1004"] = {
		PID: "1004",
		Hand: "1|5,3|8",
		Public: "2|6,1|8,3|9,2|14,4|8",
		Answer: "4"
};
data["1005"] = {
		PID: "1005",
		Hand: "3|5,1|10",
		Public: "2|6,1|7,1|9,2|14,1|8",
		Answer: "5"
};
data["1006"] = {
		PID: "1006",
		Hand: "1|5,1|12",
		Public: "2|6,1|7,1|9,2|14,1|8",
		Answer: "6"
};
data["1007"] = {
		PID: "1007",
		Hand: "1|5,3|12",
		Public: "2|5,1|7,3|5,2|12,4|3",
		Answer: "7"
};
data["1008"] = {
		PID: "1008",
		Hand: "2|8,3|12",
		Public: "2|6,1|8,3|8,2|14,4|8",
		Answer: "8"
};
data["1009"] = {
		PID: "1009",
		Hand: "1|5,1|8",
		Public: "1|6,1|7,3|9,2|14,1|9",
		Answer: "9"
};
data["1010"] = {
		PID: "1010",
		Hand: "1|14,1|13",
		Public: "1|6,1|10,1|11,2|14,1|12",
		Answer: "10"
};
module.exports = data;

cc._RF.pop();
},{}],"Thedealer":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'd75e8A5qQ9OypbHdFPJXMJZ', 'Thedealer');
// Scripts/GameData/config/Thedealer.js

"use strict";

var data = [];
module.exports = data;

cc._RF.pop();
},{}],"TipsLabelContentManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, '81798ztCehDaIfsuZzjcpiA', 'TipsLabelContentManager');
// Scripts/Manager/TipsLabelContentManager.js

"use strict";

var UITools = require("UITools");
cc.Class({
    extends: cc.Component,

    properties: {
        ContentItem: cc.Prefab,
        CurTipsLayer: cc.Node,
        labelType: 1 },

    // use this for initialization
    onLoad: function onLoad() {},

    // 清理数据
    onClearData: function onClearData() {
        // console.log("TipsLabelContentManager::onClearData");
        if (this.CurTipsLayer) {
            this.CurTipsLayer.removeAllChildren();
        }
        this.LabelContentList = [];
    },

    start: function start() {
        this.onInit();
    },
    // 获取label缓冲显示列表
    getLabelContentList: function getLabelContentList() {
        if (!this.LabelContentList) {
            this.LabelContentList = [];
        }
        return this.LabelContentList;
    },
    // 初始化
    onInit: function onInit() {
        this.LabelItemPool = null;
        this.itemHeight = 50;
    },

    // 设置数据
    onSetData: function onSetData(labelContent, tipNums) {
        this._onCreateLabelContent(labelContent, tipNums);
    },

    // 获取预知资源
    getContentItem: function getContentItem() {
        var curLayer = this.CurTipsLayer == null ? Global.uiManager.tipLayer : this.CurTipsLayer;
        if (1 == this.labelType) return Global.uiManager.instantiationUI(Global.uiManager.TIP_LABEL, curLayer);else return Global.uiManager.instantiationUI(Global.uiManager.TIP_ART_LABEL, curLayer);
    },

    // 创建列表的显示
    _onCreateLabelContent: function _onCreateLabelContent(labelString, tipNums) {
        //牌桌内提示数量控制
        tipNums = tipNums == undefined || tipNums == null ? 5 : tipNums; //修复“【比赛场】内过期的提示语不需要出现，只出现最新的就可以”
        //if(this.getLabelContentList().length >= 5)return;
        if (this.getLabelContentList().length >= tipNums) return;
        var labelItem = null;
        var curParent = this.CurTipsLayer;
        if (null == curParent) {
            curParent = Global.gameManager.GameLabelTipsLayer;
        }
        var curItem = this.ContentItem;
        if (null == curItem) {
            curItem = this.getContentItem();
        }
        labelItem = curItem;
        labelItem.active = true;
        // labelItem.node.opacity = 255;
        UITools.onSetNodePosition(labelItem, cc.p(0, 0));
        // labelItem.opacity = 255;
        labelItem.parent = curParent;
        this.itemHeight = 50;
        // console.log("labelItem.opacity == "+ labelItem.opacity);
        // this.itemHeight = labelItem.height;
        labelItem.getComponent('TipsLabelContent').onSetData(this, labelString);
        this.getLabelContentList().unshift(labelItem);
        this._onUpdateItemPosition();
    },

    // 更新item位置
    _onUpdateItemPosition: function _onUpdateItemPosition() {
        var itemOjb;
        for (var i = 0; i < this.getLabelContentList().length; i++) {
            itemOjb = this.getLabelContentList()[i];
            // cc.log(itemOjb.isValid);
            if (true == itemOjb.isValid) {
                itemOjb.position = cc.p(0, this.itemHeight * i);
            }
        }
    },

    onCompleteCallBack: function onCompleteCallBack(mLabel) {
        //console.log('提示框回收 mLabel = ',mLabel.name);
        var itemOjb;
        for (var i = 0; i < this.getLabelContentList().length; i++) {
            itemOjb = this.getLabelContentList()[i];
            if (mLabel == itemOjb) {
                this.getLabelContentList().splice(i, 1);
                itemOjb.parent = null;
                break;
            }
        }
        if (1 == this.labelType) return Global.uiManager.recycleUI(Global.uiManager.TIP_LABEL, mLabel);else return Global.uiManager.recycleUI(Global.uiManager.TIP_ART_LABEL, mLabel);
    }
    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RF.pop();
},{"UITools":"UITools"}],"TipsLabelContent":[function(require,module,exports){
"use strict";
cc._RF.push(module, '4fa49fWQcFMYaNqI76erFt7', 'TipsLabelContent');
// Scripts/UI/TipsLabelContent/TipsLabelContent.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        CurrentNodeLabel: cc.Label,
        CurrentNodeSprite: cc.Node,
        TipsType: 0 },

    // 获取当前显示label
    getShowLabel: function getShowLabel() {
        if (null == this.currentLabel) {
            if (this.CurrentNodeLabel) {
                this.currentLabel = this.CurrentNodeLabel.getComponent(cc.Label);
            }
        }
        return this.currentLabel;
    },

    getShowNumJS: function getShowNumJS() {
        if (null == this.NumImgControl) {
            this.NumImgControl = this.CurrentNodeSprite.getComponent("ImgNumJS");
        }
        return this.NumImgControl;
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.currentLabel = null;
        if (this.getShowLabel()) {
            this.getShowLabel().string = "";
        }
        // this.onSetData(this,"1234500");
    },

    // 设置数据
    onSetData: function onSetData(partentCtrl, labelContent) {
        this.partentCtrl = partentCtrl;
        if (this.getShowLabel()) {
            this.getShowLabel().string = "";
        }
        //console.log("labelContent == ",labelContent);
        if (1 == this.TipsType) {
            this.getShowNumJS().NumTransToImg("Textures/Num/NumAtlas", "num2", labelContent, false);
        } else {
            this.getShowLabel().string = labelContent;
        }
        // this.parentControl = parentControl;
        this.node.stopAllActions();

        // if(1 == this.TipsType){
        var self = this;
        var finished = cc.callFunc(function () {
            if (self.partentCtrl && self.partentCtrl.onCompleteCallBack) self.partentCtrl.onCompleteCallBack(self.node);
        }, this);
        var action = cc.sequence(cc.moveBy(1, cc.p(self.node.x, self.node.y + 80)), finished);
        this.node.runAction(action);
        // }else{
        //     this.scheduleOnce(function() {
        //         // 这里的 this 指向 component
        //         this.onPlayAnimation();
        //     }, 1);
        // }
    },

    // 播放动画
    onPlayAnimation: function onPlayAnimation() {
        var self = this;
        var action = cc.sequence(cc.spawn(cc.fadeOut(1), cc.moveBy(1, cc.p(this.node.x, this.node.y + 40))), cc.callFunc(function () {
            self._onCompleteCallBack();
        }), this);
        this.node.runAction(action);
    },

    // 动画结束
    _onCompleteCallBack: function _onCompleteCallBack() {
        // cc.removeSelf();
        if (this.partentCtrl && this.partentCtrl.onCompleteCallBack) this.partentCtrl.onCompleteCallBack(this.node);
    }

});

cc._RF.pop();
},{}],"Tips":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e73214dJcZBQ4FVmEowh8bI', 'Tips');
// Scripts/GameData/config/Tips.js

"use strict";

var data = [];
data["1"] = {
		PID: "1",
		Channel: "0",
		Delay: "",
		StartTime: "2015/12/10 0:00",
		EndTime: "",
		Interval: "60",
		Times: "",
		PriLevel: "2",
		Color: "1",
		Tips: "如果您遇到问题可联系客服：电话010-85804994、QQ群：113179777"
};
data["2"] = {
		PID: "2",
		Channel: "0",
		Delay: "",
		StartTime: "2015/12/10 0:00",
		EndTime: "2017/2/23 0:00",
		Interval: "120",
		Times: "",
		PriLevel: "2",
		Color: "2",
		Tips: "欢迎大家提交有效问题或建议，每条问题的第一个提交者可按问题重要程度获得一定数量ACE币奖励哦！"
};
data["3"] = {
		PID: "3",
		Channel: "0",
		Delay: "",
		StartTime: "2015/12/10 0:00",
		EndTime: "",
		Interval: "180",
		Times: "",
		PriLevel: "4",
		Color: "3",
		Tips: "尊敬的各位玩家好，为了给玩家一个公平公正的游戏环境，请不要在游戏中打联手牌，违反者经核实无误，会根据情节轻重给予相应处罚。"
};
data["4"] = {
		PID: "4",
		Channel: "0",
		Delay: "",
		StartTime: "2016/5/23 0:00",
		EndTime: "",
		Interval: "240",
		Times: "",
		PriLevel: "2",
		Color: "4",
		Tips: "为了给大家一个文明游戏环境，禁止辱骂其他玩家或恶意诽谤平台，一旦核实视情节严重禁言或封号！"
};
module.exports = data;

cc._RF.pop();
},{}],"UIManager":[function(require,module,exports){
"use strict";
cc._RF.push(module, '90e62J4oVdHvoO34PZNBftE', 'UIManager');
// Scripts/Manager/UIManager.js

"use strict";

var UITools = require("UITools");
var Config = require("Config");

var UIManager = cc.Class({
    extends: cc.Component,

    properties: {
        ChatPanel: null,
        MainBottomMenu: null,

        uiLayer: null,
        tipLayer: null,

        timeout20: null,

        _count: 0, //背景层计数

        _uiMap: [],
        _curShowUIList: [],
        _parameterMap: [],
        _openingPanelMap: [],

        CONNECTION_PANEL: "Prefabs/Component/NetworkContentPanel",
        MESSAGE_BOX: "Prefabs/Component/MessageBox",
        TIP_LABEL: "Prefabs/Component/TipsLabelContent",
        TIP_ART_LABEL: "Prefabs/Component/TipsArtFontlContent",
        COMMONBG_PANEL: "Prefabs/Component/CommonBgPanel",
        CHAMPRESULT_PANEL: "Prefabs/ChampList/ChampResult",
        _tipPool: [],

        SHOP_PANEL: "Prefabs/Shop/ShopNode",
        SIGNIN_PANEL: "Prefabs/SignIn/SignInPanel",
        ACTIVITY_PANEL: "Prefabs/Activity/ActivityPref",
        PLAYERINFO_PANEL: "Prefabs/PlayerInformation/PlayerInformationPanel",
        MAIL_PANEL: "Prefabs/Mail/MailPanel",
        RANKLIST_PANEL: "Prefabs/RankList/RankList",
        FRIEND_PANEL: "Prefabs/Friend/FriendPanel",
        GAMESET_PANEL: "Prefabs/GameSet/GameSetJS",
        ANTIADDICTION_PANEL: "Prefabs/AntiAddiction/AntiAddiction",
        BAG_PANEL: "Prefabs/Bag/BagPanel",
        PLAYERCAREER_PANEL: "Prefabs/PlayerCareer/PlayerCareerPanel",
        HISTORYPLAYCARDS_PANEL: "Prefabs/HistoryPlayCards/HistoryPlayCardsPanel",
        PLAYCARDVIDEOS_PANEL: "Prefabs/HistoryPlayCards/PlayHistoryFightCardPanel",
        CHAMPINFO_PANEL: "Prefabs/ChampList/ChampInf",
        CHAMPLIST_PANEL: "Prefabs/ChampList/ChampList",
        ROOMLIST_PANEL: "Prefabs/RoomList/RoomList",
        MAINLIST_PANEL: "Prefabs/MainList/MainList",
        TABLEINFO_PANEL: "Prefabs/GameTableInfo/CurTblInf",
        CREATEROOM_PANEL: "Prefabs/RoomList/CreateRoom",
        CARDTYPE_PANEL: "Prefabs/GameFightRoom/CardTypePanel",
        NEWBIETEACH_PANEL: "Prefabs/NewbieTeach/NewbieTeachPanel",
        NEWBIETEST_PANEL: "Prefabs/NewbieTeach/NewbieTestPanel",
        MATCHSCENE_PANEL: "Prefabs/GameFightRoom/matchScene",
        WORLDSPEAK_PANEL: "Prefabs/WorldSpeak/WorldSpeakPanel",
        DOWNLIST_PANEL: "Prefabs/GameFightRoom/DownListPanel",
        MAINMENU_PANEL: "Prefabs/MainList/MainMenuPanel"
    },

    showLoading: function showLoading(_isDisconnect) {

        if (Global.isGameClose) return;
        if (this._uiMap[this.CONNECTION_PANEL] == undefined || this._uiMap[this.CONNECTION_PANEL].isValid == false) {
            this._uiMap[this.CONNECTION_PANEL] = cc.instantiate(Global.resourceManager.getRes(this.CONNECTION_PANEL));
        }
        this._uiMap[this.CONNECTION_PANEL].parent = null;
        this._uiMap[this.CONNECTION_PANEL].active = false;
        this._uiMap[this.CONNECTION_PANEL].parent = this.tipLayer;
        this._uiMap[this.CONNECTION_PANEL].active = true;

        _isDisconnect = _isDisconnect == undefined || _isDisconnect == null ? false : _isDisconnect;
        var self = this;
        if (self.timeout20 == null) {
            self.timeout20 = setTimeout(function () {
                if (!Global.iosReview) UITools.GamePublicTipsLabel("请稍后重试...");
                self.hideLoading();
                if (_isDisconnect) Global.networkManager.onDisconnect();
            }, 20000);
        }
    },

    hideLoading: function hideLoading() {
        clearTimeout(this.timeout20);
        //Global.uiManager.timeout20 = null;
        this.timeout20 = null;
        this._uiMap[this.CONNECTION_PANEL].parent = null;
        this._uiMap[this.CONNECTION_PANEL].active = false;
    },

    //加载状态
    getLoadingState: function getLoadingState() {

        if (this._uiMap[this.CONNECTION_PANEL] != undefined && this._uiMap[this.CONNECTION_PANEL] != null) {
            return this._uiMap[this.CONNECTION_PANEL].active == true;
        }
        return false;
    },

    setParameterWhenOpenUI: function setParameterWhenOpenUI(_url, _parameter) {
        this._parameterMap[_url] = _parameter;
    },

    getParameterWhenOpenUI: function getParameterWhenOpenUI(_url) {
        return this._parameterMap[_url];
    },

    openPanel: function openPanel(_url, isShowCommonBg) {
        if (this._openingPanelMap.indexOf(_url) >= 0) return;
        if (this._curShowUIList.indexOf(_url) >= 0) {
            var idx = this._curShowUIList.indexOf(_url);
            if (idx >= 0) this._curShowUIList.splice(idx, 1);
            this._curShowUIList.push(_url);
            this.updateZOrder();
            return;
        }
        var isShow = isShowCommonBg == undefined ? false : isShowCommonBg;
        if (isShow) {
            var idx = this._curShowUIList.indexOf(this.COMMONBG_PANEL);
            if (idx < 0) {
                this._curShowUIList.push(this.COMMONBG_PANEL);
                this.openPanelFunc(this.COMMONBG_PANEL);
            } else {
                this.swapBlackBg(_url);
            }
            this._count++;
        }
        var idx = this._curShowUIList.indexOf(_url);
        if (idx >= 0) this._curShowUIList.splice(idx, 1);
        this._curShowUIList.push(_url);

        this.openPanelFunc(_url, isShow);
    },

    openPanelFunc: function openPanelFunc(_url, _isShow) {
        if (this._uiMap.hasOwnProperty(_url) == true && this._uiMap[_url] != null) {
            //check isValid
            var uiPrefab;
            if (this._uiMap[_url].isValid == false) {
                this._uiMap[_url].destroy();
                uiPrefab = cc.instantiate(Global.resourceManager.getRes(_url));
                this._uiMap[_url] = uiPrefab;
            } else {
                uiPrefab = this._uiMap[_url];
            }
            uiPrefab.parent = null;
            this.uiLayer.addChild(uiPrefab);
            this.updateZOrder();
            uiPrefab.active = true;
            if (_url != this.COMMONBG_PANEL) this._playOpenAnimation(uiPrefab);
        } else {
            this._openingPanelMap.push(_url);
            this.showLoading();
            var self = this;
            Global.resourceManager.loadRes(_url, function (_res) {
                self._loadResComplete(_url, _res, self, _isShow);
            });
        }
    },

    swapBlackBg: function swapBlackBg(_url) {
        if (_url == this.COMMONBG_PANEL) return;
        var idx = this._curShowUIList.indexOf(this.COMMONBG_PANEL);
        if (idx >= 0) {
            this._curShowUIList.splice(idx, 1);
            this._curShowUIList.push(this.COMMONBG_PANEL);
        }
    },

    closePanel: function closePanel(_url, _isHideCommonBg, _playSound, _isSwitchScene) {
        var isHide = _isHideCommonBg == undefined || _isHideCommonBg == null ? false : _isHideCommonBg;
        var isPlaySound = _playSound == undefined || _playSound == null ? true : _playSound;
        if (isHide && this._curShowUIList.indexOf(_url) >= 0) {
            this._count--; //背景层计数
            if (this._count <= 0) {
                this.closePanelFunc(this.COMMONBG_PANEL, false); //后隐藏背景面板
            }
        }
        if (_isSwitchScene == undefined) _isSwitchScene = false;
        this.closePanelFunc(_url, isPlaySound, _isSwitchScene);
    },

    closePanelFunc: function closePanelFunc(_url, _playSound, _isSwitchScene) {
        if (_playSound) Global.musicManager.PlayCloseSound();
        if (this._uiMap[_url] != undefined) {
            if (_url != this.COMMONBG_PANEL && _isSwitchScene == false) this._playCloseAnimation(this._uiMap[_url]);else {
                if (this.getUIMapCount() > 0) {
                    if (this._uiMap[_url] != undefined && this._uiMap[_url].isValid == true) this._uiMap[_url].parent = null;
                    if (this._uiMap[_url] != undefined && this._uiMap[_url].isValid == true) this._uiMap[_url].active = false;
                }
            }
        } else {
            cc.log("ERROR : " + _url + "不存在");
        }
        var idx = this._curShowUIList.indexOf(_url);
        if (idx >= 0) this._curShowUIList.splice(idx, 1);

        this.resetZorder();
    },

    getUIMapCount: function getUIMapCount() {
        var result = 0;
        for (var key in this._uiMap) {
            result++;
        }
        return result;
    },

    resetZorder: function resetZorder() {
        var idx = this._curShowUIList.indexOf(this.COMMONBG_PANEL);
        if (this._curShowUIList.length >= 2 && idx >= 0) {
            this._curShowUIList.splice(idx, 1);
            this._curShowUIList.splice(this._curShowUIList.length - 1, 0, this.COMMONBG_PANEL);

            this.updateZOrder();
        }
    },

    updateZOrder: function updateZOrder() {
        var curUI;
        var curURL;
        var idx;
        for (var i = 0; i < this._curShowUIList.length; i++) {
            curURL = this._curShowUIList[i];
            curUI = this._uiMap[curURL];
            idx = i; //temp code
            if (curUI != null) curUI.setLocalZOrder(idx);
        }
    },

    getUIVisible: function getUIVisible(_url) {
        var idx = this._curShowUIList.indexOf(_url);
        return idx >= 0;
    },

    getUI: function getUI(_url) {
        return this._uiMap[_url];
    },

    _loadResComplete: function _loadResComplete(_url, _res, _self, _isShow) {
        var idx = this._openingPanelMap.indexOf(_url);
        this._openingPanelMap.splice(idx, 1);
        _self.hideLoading();
        var uiPrefab = cc.instantiate(_res);
        _self.uiLayer.addChild(uiPrefab);
        _self._uiMap[_url] = uiPrefab;
        this.updateZOrder();
        if (_url != this.COMMONBG_PANEL) this._playOpenAnimation(uiPrefab);
    },

    instantiationUI: function instantiationUI(_url, _parent) {
        var panel;
        if (this._tipPool.hasOwnProperty(_url) == true && this._tipPool[_url].length > 0) {
            panel = this._tipPool[_url].pop();
        } else {
            panel = cc.instantiate(Global.resourceManager.getRes(_url));
        }

        _parent.addChild(panel);

        if (_parent == this.uiLayer) {
            var idx = this._curShowUIList.indexOf(_url);
            if (idx >= 0) this._curShowUIList.splice(idx, 1);
            this._curShowUIList.push(_url);
            this._uiMap[_url] = panel;
            this.updateZOrder();
        }

        panel.active = true;

        return panel;
    },

    recycleUI: function recycleUI(_url, _node) {
        if (this._tipPool.hasOwnProperty(_url) == false) {
            this._tipPool[_url] = [];
        }

        this._tipPool[_url].push(_node);

        if (_node.parent != null) _node.parent.removeChild(_node);

        if (_node.parent == this.uiLayer) {
            var idx = this._curShowUIList.indexOf(_url);
            if (idx >= 0) this._curShowUIList.splice(idx, 1);
            delete this._uiMap[_url];
            this.resetZorder();
        }

        _node.active = false;
    },

    resetShowList: function resetShowList() {
        this._count = 0;
        var ui;
        while (this._curShowUIList.length) {
            ui = this._curShowUIList.pop();
            this.closePanel(ui, null, false, true);
        }
        this._curShowUIList = [];
        this._uiMap = [];
    },

    _playOpenAnimation: function _playOpenAnimation(_node) {
        _node.opacity = 0;
        _node.stopAllActions();
        var action = cc.fadeIn(.1);
        _node.runAction(action);
    },

    _playCloseAnimation: function _playCloseAnimation(_node) {
        _node.stopAllActions();
        var finished = cc.callFunc(function (target) {
            _node.parent = null;
            _node.active = false;
        }, _node);
        var myAction = cc.sequence(cc.fadeOut(.1), finished);
        _node.runAction(myAction);
    }
});

module.exports = UIManager;

cc._RF.pop();
},{"Config":"Config","UITools":"UITools"}],"UITools":[function(require,module,exports){
"use strict";
cc._RF.push(module, '298f90UTohBvKFlhJL0otAz', 'UITools');
// Scripts/Tools/UITools.js

"use strict";

/**
 * author zjh
 */

var HexSha1JS = require("HexSha1JS");
var Config = require("Config");
var TableConfig = require("Table");
var errorCodeConfig = require("ErrorCode");
var ChampConfig = require("Champ");

// 普通log 打印
var GameLog = function GameLog(obj) {
    //console.log(obj);
};
// 错误日志
var GameError = function GameError(obj) {
    //console.error(obj);
};
// 警告日志打印
var GameWarning = function GameWarning(obj) {
    //console.warn(obj);
};

var showLog = function showLog(_content) {
    cc.log(_content);
};

var local2local = function local2local(_fromNode, _targetNode, _pos) {
    var worldVec2 = _fromNode.convertToWorldSpaceAR(_pos);
    var localVec2 = _targetNode.convertToNodeSpaceAR(worldVec2);

    return localVec2;
};

// 设置纹理
var SetSpriteImg = function SetSpriteImg(vNode, sImg, _callback) {
    if (vNode == null) return;
    var vImg = vNode;
    var completFun = function completFun(res) {
        if (null === res) {
            return;
        }
        var spf = new cc.SpriteFrame(res);
        vImg.spriteFrame = spf;
        if (_callback != null) _callback();
    };
    Global.resourceManager.loadRes(sImg, completFun);
};
// -----------------常用方法---------------------------------
// 克隆一个预知，父对象，预知体，位置，
// @param _active **set "active = false" avoid to called the "setActive()" when set the parent property before "prefab.parent = parent";
var onCloneInstantiate = function onCloneInstantiate(UIPrefabs, parent, pos, _active) {
    if (_active == null) _active = true;
    if (null == UIPrefabs) {
        //console.log("没有预知对象 不能克隆");
        return;
    }
    var prefab = cc.instantiate(UIPrefabs);
    prefab.active = _active;
    if (null != parent) {
        prefab.parent = parent;
    }
    if (null != pos) {
        prefab.position = pos;
    }
    return prefab;
};

// 设置节点对象的显示隐藏
var onSetNodeVisible = function onSetNodeVisible(currentNode, isVisible) {
    if (null == currentNode) {
        //console.log("onSetNodeVisible 节点为空== " + currentNode);
        return;
    }
    currentNode.active = isVisible;
};

// 获取组件 通过组件名字
var onGetNodeCompontent = function onGetNodeCompontent(currentNode, compontentName) {
    if (null == currentNode) {
        //console.log("onGetNodeCompontent 节点为空== " + currentNode);
        return;
    }
    var compontent = currentNode.getComponent(compontentName);
    if (null == compontent) {
        //console.error("节点为空== ");
        return null;
    }
    return compontent;
};

// 设置label内容
var onSetUILabelString = function onSetUILabelString(currentNode, labelContent) {
    if (null == currentNode) {
        //console.error("设置label内容当前节点为空 currentNode = "+currentNode);
        return;
    }
    var lb = currentNode.getComponent(cc.Label);
    if (lb) {
        lb.string = labelContent;
    } else {
        //console.error("not node Label component ");
    }
};

// 设置node的颜色
var onSetNodeColor = function onSetNodeColor(currentNode, nodeColor) {
    if (null == currentNode) {
        //console.error("设置颜色当前节点为空 currentNode = "+currentNode);
        return;
    }
    currentNode.color = nodeColor;
};
// 设置节点位置
var onSetNodePosition = function onSetNodePosition(currentNode, position) {
    if (null == currentNode) {
        //console.error("设置颜色当前节点为空 currentNode = "+currentNode);
        return;
    }
    currentNode.setPosition(position);
};

// 切换场景
var onCreateScene = function onCreateScene(_sceneName, _callback) {
    // var curControl = Global.gameManager.GetGameSceneControl();
    // if(curControl != null && curControl.node != null){
    //     var action = cc.sequence(cc.fadeOut(.3),cc.callFunc(
    //         function () {
    //             loadScene(_sceneName,_callback);
    //         }
    //     ));
    //     curControl.node.runAction(action);
    // }else{
    //     loadScene(_sceneName,_callback);
    // }
    loadScene(_sceneName, _callback);
};

var loadScene = function loadScene(_sceneName, _callback) {
    if (Global.loadingSceneName != "" && Global.loadingSceneName == _sceneName) return;
    if (Global.resourceManager.loadedScene == undefined || Global.resourceManager.loadedScene.hasOwnProperty(_sceneName) == false) {
        Global.loadingSceneName = _sceneName;
        cc.director.preloadScene(_sceneName, function () {
            Global.loadingSceneName = "";
            Global.gameManager.onClearAllData();

            cc.director.loadScene(_sceneName, _callback);
            Global.resourceManager.loadedScene[_sceneName] = true;
        });
    } else {
        Global.gameManager.onClearAllData();
        if (_callback == null) {
            Global.gameManager.clearGameData();
            Global.musicManager.onStopMusic(); //停止背景音乐
        } else {
            _callback();
        }
        cc.director.loadScene(_sceneName, function () {});
    }
};

// 显示网络连接面板
var UIShowNetWorkPanel = function UIShowNetWorkPanel(currentNode) {
    if (null == currentNode) {
        //console.error("currentNode 为空== ");
    }
    var prefab = onCreateOpenPanel(currentNode, 'Prefabs/Component/NetworkContentPanel');
    onSetNodePosition(prefab, cc.p(0, 0));
    var prefabJS = prefab.getComponent("NetworkContentPanel");
    prefabJS.onInit();
    return prefabJS;
};

/**
 * transform the nums to short moden what show by sys's font
 * @param num
 * @returns {*}
 */
var onNumTransfer = function onNumTransfer(num) {
    var result = onNumTransfer2(num);
    result = result.replace("w", "万");
    result = result.replace("y", "亿");
    result = result.replace("wy", "万亿");

    return result;
};

/**
 * transform the nums to short moden what show by art's font
 * @param num
 * @returns {*}
 */
var onNumTransfer2 = function onNumTransfer2(num) {
    var curStr = "";
    num = Math.abs(num);
    if (num < 10000) {
        curStr = num.toString();
        return curStr;
    }

    var sUnit = "";
    if (num >= 10000 && num < 100000000) {
        //万
        curStr = num * 0.0001;
        sUnit = "w";
    } else if (num >= 100000000 && num < 1000000000000) {
        //亿
        curStr = num * 0.00000001;
        sUnit = "y";
    } else {
        //万亿
        curStr = num * 0.000000000001;
        sUnit = "wy";
    }

    // if (num >= 10000 && num < 100000000) {
    //     curStr = num * 0.0001;
    //     sUnit = "w";
    // }
    // else {
    //     curStr = num * 0.00000001;
    //     sUnit = "y";
    // }

    curStr = curStr.toString();
    var strAry = curStr.split(".");
    curStr = strAry[0];
    var decimals = "";
    if (strAry.length > 1) {
        decimals = strAry[1].slice(0, 2);
        if (parseInt(decimals).toString() == decimals || decimals == "00") decimals = decimals.replace(/0/g, "");
    }
    curStr = decimals == "" ? curStr : curStr + "." + decimals;
    var sval = curStr + sUnit;

    return sval;
};

// 时间格式化  mtime(毫秒)
var onFormatDateTime = function onFormatDateTime(date) {
    var y = date.getFullYear();
    var m = date.getMonth() + 1;
    m = m < 10 ? '0' + m : m;
    var d = date.getDate();
    d = d < 10 ? '0' + d : d;
    var h = date.getHours();
    var minute = date.getMinutes();
    minute = minute < 10 ? '0' + minute : minute;
    return y + '年' + m + '月' + d + '日' + " " + ' ' + h + ':' + minute;
};

// 验证手机号格式是否正确, true 正确
var UICheckPhone = function UICheckPhone(PhoneNum) {
    return (/^1(3|4|5|7|8)\d{9}$/.test(PhoneNum)
    );
};

// 验证email 格式是否正确, true 正确
var UICheckEmail = function UICheckEmail(email) {
    var reg = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return reg.test(email);
};

//验证是否只有数字和字母
var UICheckCodeOnlyNumAndABC = function UICheckCodeOnlyNumAndABC(vCode) {
    var strExp = /^[A-Za-z0-9]+$/;
    return strExp.test(vCode);
};

//验证指定值是否有效 作者 王福岐
var UICheckValueIsValid = function UICheckValueIsValid(value, is_check_string_empty) {
    if (value == null || value == undefined) {
        return false;
    } else {
        if (is_check_string_empty) {
            var strExp = /^\s*$/;
            return !strExp.test(value);
        }
    }
    return true;
};
//验证指定字符串是否只有数字 0-9   作者 王福岐
var UICheckCodeOnlyNum = function UICheckCodeOnlyNum(vCode) {
    if (UICheckValueIsValid(vCode) && typeof vCode == "string") {
        var strExp = /^[0-9]+$/;
        return strExp.test(vCode);
    } else {
        return false;
    }
};
//验证指定字符串是否只有字母 a-z A-Z   作者 王福岐
var UICheckCodeOnlyABC = function UICheckCodeOnlyABC(vCode) {
    if (UICheckValueIsValid(vCode) && typeof vCode == "string") {
        var strExp = /^[a-zA-Z]+$/;
        return strExp.test(vCode);
    } else {
        return false;
    }
};
//设置节点的Zorder 作者 王福岐
var UISetNodeZIndex = function UISetNodeZIndex(ndoe, zIndex) {
    if (ndoe) {
        if (ndoe.node) {
            if (ndoe.node.setLocalZOrder) {
                ndoe.node.setLocalZOrder(zIndex);
            }
        } else {
            if (ndoe.setLocalZOrder) {
                ndoe.setLocalZOrder(zIndex);
            }
        }
    }
};
// sha1处理
var UIHexSha1 = function UIHexSha1(sInput) {
    if ('' == sInput) return sInput;
    return HexSha1JS.hex_sha1(sInput);
};
// 用于游戏本地存储的设置
var GameLocalStorage = {
    get: function get(key, vDefValue) {
        var val = cc.sys.localStorage.getItem(key);
        if (null == val) return vDefValue;
        return val;
    },
    set: function set(key, value) {
        cc.sys.localStorage.setItem(key, value);
    }
};
// 清理某个牌桌的自动操作删除
var GameRemoveLocalStorageItem = function GameRemoveLocalStorageItem(key) {
    cc.sys.localStorage.removeItem(key);
};

// 获取游戏表数据配置
var GetGameErrorCodeByID = function GetGameErrorCodeByID(key) {
    return errorCodeConfig[key];
};

// 判断对象是否有效
var IsRealObj = function IsRealObj(vObj) {
    return vObj != null && vObj != undefined;
};

//
// 位移操作[位标记判断]
//
// 增加标记: vflags = SetBitFlag(vflags, vAdd);
var SetBitFlag = function SetBitFlag(vflags, vAdd) {
    vflags |= vAdd;
    return vflags;
};

// 删除标记: vflags = RemoveBitFlag(vflags, vRemove);
var RemoveBitFlag = function RemoveBitFlag(vflags, vRemove) {
    vflags &= ~vRemove;
    return vflags;
};

// 是否有标记: var bHas = HasBitFlag(vflags, vRemove);
var HasBitFlag = function HasBitFlag(vflags, vTest) {
    return (vflags & vTest) > 0;
};

var getRoomName = function getRoomName(_tableData) {
    var cofData = _tableData.configInfo;
    var str;
    var curType;
    if (cofData) {
        curType = cofData.roomId;
    } else {
        if (!!_tableData.matchId) {
            cofData = ChampConfig[_tableData.pid];
        } else {
            cofData = TableConfig[_tableData.pid];
        }
        curType = cofData.roomId;
    }
    if (curType >= Config.BtnIndexConfig.BTN_CHAMP_PROFESSIONAL) {
        if (!!_tableData.matchId) {
            var champCof = Global.champDataManager.getChampInfoByMID(_tableData.matchId).configInfo;
            if (champCof) str = champCof.title;else cc.log("没有找到对应的配置 matchID " + _tableData.matchId);
        } else if (!!_tableData.matchPid) {
            var champCof = ChampConfig[_tableData.matchPid];
            if (champCof) str = champCof.title;else cc.log("没有找到对应的配置 matchPid " + _tableData.matchPid);
        }
    } else if (curType == Config.BtnIndexConfig.BTN_JY_ROOM) {
        str = "精英房 ";
    } else if (curType == Config.BtnIndexConfig.BTN_GB_ROOM) {
        str = "贵宾房 ";
    } else if (curType == Config.BtnIndexConfig.BTN_JS_ROOM) {
        str = "极速房 ";
    } else if (curType == Config.BtnIndexConfig.BTN_ANTE_ROOM) {
        str = "ANTE房 ";
    }
    return str;
};

// 游戏内通用文本提示框
var GamePublicTipsLabel = function GamePublicTipsLabel(sMsg) {
    var tipsManager = Global.gameManager.onGetGameLabelTipsLayerCtrl();
    if (tipsManager) tipsManager.onSetData(sMsg);else console.error("没有找到文本提示框控制器 ", sMsg);
};

var checkCreateNameLength = function checkCreateNameLength(str) {
    if (typeof str == "string") {
        var singleCharArr = str.match(/[\u0000-\u0100]/g) || [];
        var doubleCharArr = str.match(/[^\u0000-\u0100]/g) || [];
        var len = singleCharArr.length + doubleCharArr.length * 2;
        return len;
    }
    return 0;
};

var hideKeyboard = function hideKeyboard() {
    switch (cc.sys.os) {
        case cc.sys.OS_ANDROID:
            jsb.reflection.callStaticMethod("org/cocos2dx/javascript/GameTools", "hideSoftKeyboard", "()V");
            break;
        case cc.sys.OS_IOS:
            jsb.reflection.callStaticMethod("GameTools", "hideKeyboard");
            break;
        case cc.sys.OS_WINDOWS:

            break;
    }
};

module.exports = {
    onSetUILabelString: onSetUILabelString, //设置label内容
    onSetNodeColor: onSetNodeColor, //设置节点颜色
    onSetNodePosition: onSetNodePosition, //设置节点位置
    SetSpriteImg: SetSpriteImg, // 根据文件设置纹理
    onCreateScene: onCreateScene, //切换场景
    onCloneInstantiate: onCloneInstantiate,
    onSetNodeVisible: onSetNodeVisible, //设置节点的显示隐藏
    onGetNodeCompontent: onGetNodeCompontent, //获取节点上的组建
    onNumTransfer: onNumTransfer, //数字转万亿
    onNumTransfer2: onNumTransfer2,
    UIShowNetWorkPanel: UIShowNetWorkPanel, //显示网络连接面板
    UICheckPhone: UICheckPhone, // 验证手机号格式是否正确, true 正确
    UICheckEmail: UICheckEmail, // 验证email 格式是否正确, true 正确
    UICheckCodeOnlyNumAndABC: UICheckCodeOnlyNumAndABC, //验证是否只有数字和字母
    UICheckValueIsValid: UICheckValueIsValid, //验证指定值是否有效
    UICheckCodeOnlyNum: UICheckCodeOnlyNum, //验证指定字符串是否只有数字
    UICheckCodeOnlyABC: UICheckCodeOnlyABC, //验证指定字符串是否只有字母
    UISetNodeZIndex: UISetNodeZIndex, //设置节点的ZIndex
    GameLocalStorage: GameLocalStorage, //用于游戏本地存储的设置
    UIHexSha1: UIHexSha1, // sha1处理
    GetGameErrorCodeByID: GetGameErrorCodeByID,
    onFormatDateTime: onFormatDateTime, //时间格式

    IsRealObj: IsRealObj, // 判断对象是否有效

    // 位移操作[位标记判断]
    SetBitFlag: SetBitFlag, // 增加标记
    RemoveBitFlag: RemoveBitFlag, // 删除标记
    HasBitFlag: HasBitFlag, // 是否有标记

    getRoomName: getRoomName, //获取房价名字

    GamePublicTipsLabel: GamePublicTipsLabel, //通用文本提示框

    local2local: local2local,

    showLog: showLog, // log统一接口

    checkCreateNameLength: checkCreateNameLength,

    hideKeyboard: hideKeyboard
};

cc._RF.pop();
},{"Champ":"Champ","Config":"Config","ErrorCode":"ErrorCode","HexSha1JS":"HexSha1JS","Table":"Table"}],"Vip":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'f72fafj2LBBZ66cnWgSn8mU', 'Vip');
// Scripts/GameData/config/Vip.js

"use strict";

var data = [];
data["1905"] = {
		PID: "1905",
		Day: "30"
};
data["11905"] = {
		PID: "11905",
		Day: "30"
};
module.exports = data;

cc._RF.pop();
},{}],"preLoadConfig":[function(require,module,exports){
"use strict";
cc._RF.push(module, '6afa49IkCBIdawhNBwp9Ia2', 'preLoadConfig');
// Scripts/GameData/config/preLoadConfig.js

"use strict";

var data = [];
data[0] = { url: "Prefabs/Component/MessageBox", type: "prefab" };
data[1] = { url: "Prefabs/Component/NetworkContentPanel", type: "prefab" };
data[2] = { url: "Prefabs/Component/TipsLabelContent", type: "prefab" };
data[3] = { url: "Prefabs/ChampList/ChampResult", type: "prefab" };
data[4] = { url: "Prefabs/MainList/MainList", type: "prefab" };
data[5] = { url: "Prefabs/Component/TipsArtFontlContent", type: "prefab" };
data[6] = { url: "Textures/Num/NumAtlas", type: "spriteAtlas" };
data[7] = { url: "Prefabs/GameFightRoom/matchScene", type: "prefab" };
data[8] = { url: "Prefabs/Component/CommonBgPanel", type: "prefab" };
data[9] = { url: "Prefabs/MainList/MainMenuPanel", type: "prefab" };
data[10] = { url: "Prefabs/GameFightRoom/DownListPanel", type: "prefab" };
data[11] = { url: "animations/gongxihuode/donghua-gongxihuode0", type: "prefab" };
data[12] = { url: "animations/dating/bisaichang/bisaichangdonghua_0", type: "prefab" };
data[13] = { url: "animations/dating/xiaoyouxi/xiaoyouxidonghua_0", type: "prefab" };
data[14] = { url: "animations/dating/xunlianchang/xunlianchangdonghua_0", type: "prefab" };

module.exports = data;

cc._RF.pop();
},{}],"shieldName":[function(require,module,exports){
"use strict";
cc._RF.push(module, '11c205LX4pKHZm0W40iX4fp', 'shieldName');
// Scripts/GameData/config/shieldName.js

"use strict";

var data = ["name", "焦国标", "丁子霖", "梓霖", "刘晓竹", "丁加班", "何加栋", "鲍彤", "柴玲", "吾尔开希", "小泉", "拉登", "李洪志", "李宏志", "李红志", "萨达姆", "希特勒", "墨索里尼", "山本五十六", "东条英机", "江泽民", "江贼民", "江择民", "胡锦涛", "胡紧掏", "胡紧套", "朱镕基", "朱容基", "朱容鸡", "猪容基", "李鹏", "李岚清", "温家宝", "乔石", "黄菊", "曾庆红", "贾庆林", "王宝森", "董建华", "董贱华", "何候华", "布什", "焦国标", "丁子霖", "梓霖", "刘晓竹", "丁加班", "何加栋", "鲍彤", "柴玲", "吾尔开希", "小泉", "拉登", "李洪志", "李宏志", "李红志", "萨达姆", "希特勒", "墨索里尼", "山本五十六", "东条英机", "江泽民", "江贼民", "江择民", "胡锦涛", "胡紧掏", "胡紧套", "朱容基", "朱容鸡", "猪容基", "李鹏", "李岚清", "温家宝", "乔石", "黄菊", "曾庆红", "贾庆林", "王宝森", "董建华", "董贱华", "何候华", "强卫", "罗干", "骡干", "毛泽东", "邓小平", "周恩来", "林彪", "江青", "布什", "普京", "本拉登", "安南", "李登辉", "陈水扁", "宋平", "胡温", "霍英东", "法轮", "三去车仑", "刘少奇", "朱德", "彭德怀", "林彪", "热比娅", "刘伯承", "陈毅", "贺龙", "聂荣臻", "罗荣桓", "徐向前", "叶剑英", "李大钊", "陈独秀", "孙中山", "孙逸仙", "陈云", "李瑞环", "尉健行", "李岚清", "吴邦国", "曾庆红", "贾庆林", "黄菊", "吴官正", "回良玉", "吴仪", "李长春", "曾培炎", "周永康", "曹刚川", "唐家璇", "华建敏", "陈至立", "陈良宇", "张德江", "张立昌", "俞正声", "王乐泉", "刘云山", "王兆国", "刘淇", "贺国强", "郭伯雄", "胡耀邦", "连战", "宋楚瑜", "吕秀莲", "郁慕明", "蒋介石", "蒋中正", "蒋经国", "马英九", "纯一郎", "萨马兰奇", "阿拉法特", "默克尔", "克林顿", "里根", "尼克松", "林肯", "杜鲁门", "赫鲁晓夫", "列宁", "斯大林", "马克思", "恩格斯", "金正日", "金日成", "胡志明", "西哈努克", "希拉克", "撒切尔", "阿罗约", "曼德拉", "卡斯特罗", "富兰克林", "华盛顿", "艾森豪威尔", "拉姆斯菲尔德", "鲍威尔", "奥马尔", "达赖喇嘛", "江青", "张春桥", "姚文元", "王洪文", "冈村秀树", "冈村宁次", "高丽朴", "赵紫阳", "王丹", "沃尔开西", "李大师", "马加爵", "班禅", "额尔德尼", "阿扁", "哥白尼", "斯蒂芬霍金", "赖昌星", "奥巴马", "习近平", "王岐山", "刘延东", "李克强", "李源潮", "张高丽", "徐才厚", "薄熙来", "乌云其木格", "韩启德", "周铁农", "李建国", "司马义铁力瓦尔地", "蒋树声", "陈昌智", "严隽琪", "桑国卫", "廖晖", "杜青林", "阿沛阿旺晋美", "帕巴拉格列朗杰", "马万祺", "白立忱", "陈奎元", "阿不来提阿不都热西提", "李兆焯", "黄孟复", "董建华", "张梅颖", "张榕明", "钱运录", "孙家正", "李金华", "郑万通", "邓朴方", "万钢", "林文漪", "厉无畏", "罗富和", "陈宗兴", "王志珍", "梁光烈", "马凯", "孟建柱", "戴秉国", "张平", "周济", "李毅中", "杨晶", "耿惠昌", "马馼", "李学举", "吴爱英", "谢旭人", "尹蔚民", "徐绍史", "姜伟新", "刘志军", "李盛霖", "陈雷", "孙政才", "周生贤", "陈德铭", "蔡武", "陈竺", "李斌", "周小川", "刘家义", "杨洁篪", "王胜俊", "曹建明", "薄一波", "布雷尔", "蔡和森", "蔡启芳", "蔡庆林", "蔡英文", "曹庆泽", "陈伯达", "陈博志", "陈定南", "陈建铭", "陈菊", "陈慕华", "陈丕显", "陈唐山", "陈希同", "陈锡联", "陈永贵", "成克杰", "迟浩田", "川岛芳子", "达赖", "邓发", "邓力群", "邓颖超", "鄧小平", "丁关根", "董必武", "董文华", "杜正胜", "穆罕默德", "傅杰", "傅全有", "傅作义", "高岗", "高治联", "耿飚", "韩光", "韩天石", "韩杼滨", "郝伯村", "郝建秀", "何勇", "胡启立", "胡乔木", "华国锋", "黄克诚", "黄永生", "黄仲生", "李长", "李德生", "李登柱", "李贵鲜", "李继耐", "李俊毅", "李立三", "李铁映", "李维汉", "李先念", "李雪峰", "李至伦", "李作鹏", "万里", "汪东兴", "王从吾", "王汉斌", "王鹤寿", "王稼祥", "王金平", "王克", "王震", "韦国清", "乌兰夫", "吴德", "吴桂贤", "伍世文", "习仲勋", "夏赞忠", "向忠发", "小泉纯一郎", "谢长廷", "谢非", "谢深山", "许财利", "许世友", "颜庆章", "杨白冰", "杨得志", "杨尚昆", "杨勇", "姚依林", "叶菊兰", "叶群", "于永波", "余秋里", "袁纯清", "曾志郎", "渣波波", "扎卡维", "田弘茂", "田纪云", "宋庆龄", "宋任穷", "苏兆征", "苏贞昌", "苏振华", "素人", "孙文", "谭绍文", "谭震林", "谭政", "塞福昂", "艾则孜", "全国人大", "瘸腿帮", "人民大会堂", "邱会作", "邱太三", "任弼时", "任建新", "秦基伟", "乔冠华", "钱其琛", "祁培文", "彭冲", "彭佩云", "彭真", "倪志福", "毛澤東", "刘华清", "刘澜涛", "刘丽英", "刘文雄", "马国瑞", "林伯渠", "林佳龙", "林信义", "林益世", "林祖涵", "卢福坦", "陆定一", "连惠心", "连胜文", "廖承志", "廖锡龙", "凯丰", "康生", "瞿秋白", "江core", "江泽明", "江澤民", "姜春云", "纪登奎", "谷牧", "顾顺章", "张博雅", "扎卡维是英雄", "张廷发", "张万年", "张闻天", "张震", "章孝严", "章孝勇", "赵洪祝", "郑宝清", "周子玉", "朱立伦", "卓伯源", "邹家华", "王子杰", "林永青", "林果", "白鸟敏夫", "板垣征四郎", "法高", "法轮", "法轮功", "法西斯", "佛教", "佛祖", "广田宏毅", "寇晓伟", "李富春", "梁咏伦", "梁泳伦", "马晓轶", "梅津美治郎", "木村兵太郎", "平沼骐一郎", "屈江涛", "松冈洋右", "松井石根", "陶铸", "土肥原贤二", "王迁唐", "吴俊青", "武藤章", "希拉里", "萧汉华", "小矶国昭", "杨京", "袁宝", "朱金容基", "朱容基", "黄菊", "宋书元", "张伟国", "张伯笠", "张健", "张宏堡", "张志清", "张昭富", "张林", "张钢", "弹劾", "彭云", "徐匡迪", "徐水良", "徐邦秦", "方励之", "方毅", "方舟子", "曹长青", "曼施坦因", "朱基", "朱可夫元帅", "朱嘉明", "朱林", "朱毛", "朱溶剂", "朱琳", "朱胜文", "李兰菊", "李宏旨", "李小朋", "李小鹏", "李少民", "李弘旨", "李录", "李志绥", "李总理", "李总统", "李文斌", "李旺阳", "李昌", "李月月鸟", "李洪宽", "李淑娴", "李禄", "李红痔", "李老师", "杜智富", "杨周", "杨巍", "杨建利", "杨怀安", "杨月清", "杨燕姬", "林保华", "林慎立", "林樵清", "林长盛", "柯庆施", "梁擎墩", "江民", "江ze民", "江八点", "江则民", "江戏子", "江折民", "江泽慧", "江流氓", "江独裁", "江猪", "江猪媳", "江绵恒", "江罗", "江贼", "江贼民", "汤光中", "洪传", "洪吟", "洪哲胜", "洪志", "王军涛", "王冶坪", "王力雄", "王宝森", "王希哲", "王永生将军", "王沪宁", "王润生", "王涵万", "王炳章", "王瑞林", "王秀丽", "王策", "王若望", "王超华", "王辅臣", "白立朴", "盛华仁", "盛雪", "李远哲", "尉健行", "李岚清", "黄丽满", "于幼军", "宋祖英", "曹长青", "曹刚川", "柴玲", "常劲", "陈炳基", "陈军", "陈蒙", "陈破空", "陈希同", "陈小同", "陈宣良", "陈一谘", "陈总统", "程凯", "程铁军", "程真", "迟浩田", "斐得勒", "费良勇", "封从德", "冯东海", "冯素英", "付申奇", "傅申奇", "傅志寰", "戈扬", "郭伯雄", "郭罗基", "郭平", "郭岩华", "韩东方", "韩联潮", "廖锡龙", "林保华", "林长盛", "林樵清", "林慎立", "凌锋", "刘宾深", "刘宾雁", "刘刚", "刘国凯", "刘华清", "刘俊国", "刘凯中", "刘千石", "刘青", "刘山青", "刘士贤", "刘文胜", "刘晓波", "刘晓竹", "刘永川", "邓薇", "陈永进", "李克强", "习近平", "周永康", "贺国强", "李源潮", "许永跃", "徐才厚", "梁光烈", "李继耐", "曾培炎", "回良玉", "李德洙", "李至伦", "张福森", "王旭东", "李金华", "肖扬", "贾春旺", "炮打中宣部", "六四", "天安门事件", "北京之春", "八九风波", "八九事件", "八九运动", "八九学潮", "冰点周刊", "天安门", "共产党", "gongchandang", "帐号", "法轮", "法轮功", "日本", "ROC", "ROC", "SARS", "非典", "七三一", "大法", "三去", "法轮大法", "圆满", "自焚", "政治", "国民党", "天皇", "立法委员", "民国", "青天白日", "三民主义", "台湾", "中央人民共和国", "国务院", "党中央", "中央军委", "主义", "封建", "靖国", "神社", "法西斯", "纳粹", "盖世太保", "集中营", "恐怖", "贪污", "腐败", "杀人", "抢劫", "吸毒", "毒品", "犯罪", "gc365", "官逼民反", "一党专制", "共匪", "中共", "警匪一家", "三个代婊", "万税", "卖国", "六月四日", "六四", "天安门档案", "FLG", "FLG", "大法弟子", "多维新闻", "大FA弟子", "李宏旨", "李弘旨", "梅花网", "动乱", "暴乱", "八九", "六四", "liusi", "真相", "一个事实", "游行", "民主", "民主潮", "摩门教", "南华早报", "南蛮", "起义", "亲民党", "瘸腿帮", "打倒共产党", "台独万岁", "圣战", "示威", "台独分子", "台联", "台湾民国", "太子党", "屠杀", "新党", "疆独", "藏独", "学潮", "学运", "一党专政", "一贯道", "圆满", "造反", "政治反对派", "政治犯", "中国民主党", "中国之春", "共党", "苏家屯", "塔利班", "高治联", "高自联", "大参考", "小参考", "国内动态清样", "道教", "多维", "佛教", "佛祖", "释迦牟尼", "如来", "阿弥陀佛", "观世音", "普贤", "文殊", "地藏", "河殇", "穆罕默德", "升天", "圣母", "耶和华", "耶稣", "真主安拉", "白莲教", "天主教", "基督教", "东正教", "真理教", "走向圆满", "黄大仙", "风水", "跳大神", "大卫教", "阎王", "黑白无常", "牛头马面", "高丽棒子", "回回", "蒙古鞑子", "老毛子", "谋杀", "贩毒", "赌博", "拐卖", "走私", "卖淫", "监狱", "先奸后杀", "卖淫啊", "押大", "押小", "抽头", "坐庄", "赌马", "赌球", "老虎机", "筹码", "轮盘赌", "安非他命", "大麻", "可卡因", "海洛因", "冰毒", "摇头丸", "杜冷丁", "鸦片", "罂粟", "迷幻药", "白粉", "嗑药", "雪山狮子旗", "藏青会", "藏妇会", "台湾岛国", "台湾分裂", "西藏分裂", "新疆分裂", "铀", "回民吃猪肉", "16大", "64事件", "64运动", "89事件", "fa伦", "Fag", "falco", "falungong", "Fa伦", "ferry", "阿扁", "阿扁万岁", "阿拉", "挨球", "艾滋病", "安拉", "八嘎", "八路", "保卫台湾", "暴动", "暴行", "常委", "超英赶美", "朝鲜", "陈总统", "赤匪", "打倒中国", "打倒中国共产党", "打倒中华人民共和国", "大东亚", "大东亚共荣圈", "大陆", "大神", "大烟", "大跃进", "大字报", "戴维教", "党主席", "倒台", "盗窃犯", "低治联", "抵制日货", "地富反坏右", "帝国主义", "钓鱼岛", "东升", "东突暴动", "东突独立", "独裁", "度冷丁", "发伦", "法x", "法高", "反党", "反共", "反人民", "反动派", "分泌", "真善忍", "浮夸风", "复辟", "膏药旗", "革命", "根正苗红", "公安局", "公务员", "共产", "共产主义", "共军", "共荣圈", "龟儿子", "龟毛", "龟孙子", "龟头", "国共合作", "国家主席", "国军", "国民党万岁", "国民政府", "海边的卡夫卡", "含捻", "和平演变", "黑社会", "黑手党", "黑五类", "洪兴", "回族人吃猪肉", "基督", "集会", "监督", "检日", "明慧网", "人民报", "教官", "戒急用忍", "届中央政治局委", "警察", "靖国神社", "开房", "垮台", "懒叫", "懒教", "力宝广场", "两国论", "六四事件", "六四学潮", "妈祖", "吗啡", "毛贼", "毛主席", "没有人权", "美国", "美国佬", "蒙古达子", "米田共", "密传", "棉条", "民國", "牛鬼蛇神", "批林批孔", "强奸", "轮奸", "青天白日旗", "日本帝国", "日本鬼子", "三反五反", "上山下乡", "社会主义", "十六大", "十三点", "四清", "台湾党", "台湾帝国", "台湾公投", "台湾共产党", "台湾共和国", "台湾国", "台湾总统", "太监", "太神", "文革", "文化大革命", "武力统一", "西藏喇嘛", "鲜族", "小日本", "新华社", "新思", "新闻出版总署", "新义安", "言论自由", "一边一国", "一起看中文", "罂栗", "真世界", "政府", "政府无能", "政协", "政治避难", "政治打击", "政治封锁", "政治局", "政治压迫", "指导员", "中共中央", "中共中央政治局", "中国共产党", "中国人民解放军", "中国人民志愿军", "中華民國", "中南海", "中宣部", "中央电视台", "中央政治局", "主席", "资本主义", "紫阳", "总理", "总书记", "走资帮", "作弊", "藏独会", "藏独分子", "藏独分裂", "藏独势力", "抢夺圣火", "历时的沉思", "我们忏悔", "天安门时报", "追查国际", "新闻管制", "舆论钳制", "动态网", "自由之门", "大纪元", "博讯新闻", "燕玲论坛", "希望之声", "新唐人", "宗教迫害", "全球公审", "法輪", "轮子功", "洗脑班", "610办公室", "法轮", "李洪", "轮功", "輪功", "共產黨", "國民黨", "臺獨", "恐怖主义", "打倒", "推翻", "压迫", "爆炸", "分裂", "迫害", "独立", "陆肆", "领导", "统治", "万岁", "明慧", "RMB", "艾滋", "达子", "东突暴动和独立", "东乡茂德", "毒贩", "官方", "回回", "回良玉", "监察", "检查", "检察", "鉴定", "蒙古", "民进党", "强奸犯", "人民币", "萨斯", "杀人犯", "省长", "市长", "首长", "向导", "销售", "巡查", "中国", "拉登", "人弹", "人民", "人民日报", "人民银行", "K粉", "K他命", "人事部", "人体炸弹", "安理会", "安眠酮", "安南", "安全部", "安全监管", "安全理事会", "罢工", "版署", "办公厅", "证监会", "质检局", "致幻剂", "中科院", "中央", "中医药局", "CCTV", "测绘局", "保钓", "保监会", "保密局", "暴徒", "公安", "参事室", "三陪", "三去车仑", "三唑仑", "外交部", "外专局", "国安局", "安全局", "自治机关", "宗教", "总局", "产权局", "催情药", "文物局", "倭国", "代表大会", "档案局", "地震局", "新闻办", "新闻出版", "二乙基酰胺", "发改委", "发展研究中心", "法院", "法制办", "反恐委员会", "反日", "废物", "港澳办", "工程院", "工商局", "公安部", "国防部", "国防科工委", "邮政局", "商务部", "社保基金会", "社科院", "审计署", "联大", "联合国", "联合国大会", "粮食局", "税务总局", "司法部", "经济社会理事会", "经社理事会", "朱总理", "静坐", "军事委员会", "军委", "抗日", "人代会", "台办", "客户服务人员", "恐怖分子", "美利坚", "秘书长", "民航局", "人大代表", "托管理事会", "体育总局", "铁道部", "统计局", "劳动保障局", "江八", "计生委", "监察部", "人大", "温总理", "文化部", "江核心", "江主席", "吗啡碱", "吗啡片", "麦角酸", "国管局", "国际法院", "国家民委", "国家主要部委", "国土资源部", "监管局", "检察院", "建设部", "信访局", "信息产业部", "兴奋剂", "鸦片液", "鸦片渣", "环保总局", "大师", "英雄纪念碑", "一国两制", "一夜情", "伊拉克", "伊朗", "抑制剂", "南联盟", "南蛮子", "农业部", "国研室", "国资委", "海关总署", "海洋局", "可卡叶", "恐怖组织", "西藏国", "雪山狮子国", "鸡巴", "肉缝", "肉棒", "淫水", "肉壁", "肉棍", "fuck", "同性恋", "变态", "娼妓", "妓女", "淫", "你妈", "强奸", "傻逼", "牛逼", "乳头", "火棒", "肉棍子", "阴户", "湿透的内裤", "两腿之间", "欲火焚身", "插深些", "硬挺", "阳精", "口交", "肛交", "阴唇", "小肉粒", "阴毛", "阴核", "干你", "操比", "操逼", "后庭", "双峰微颤", "贝肉", "玉杵", "密洞", "抽插", "乳波臀浪", "淫语连连", "小穴", "圣女峰", "乳交", "打飞机", "想上你", "狗日", "操你妈", "鸡奸", "妈逼", "日你妈", "性交", "性爱", "做爱", "轮奸", "淫荡", "荡妇", "奸夫淫妇", "波霸", "大波波", "乳房", "奶头", "奶子", "鸡鸡", "肉洞", "阴茎", "性虐待", "2逼", "你大爷", "你二大爷", "抽你丫的", "你姥姥的", "你爷爷的", "你妈的", "手淫", "三陪", "三陪女", "坐台的", "淫欲", "操你八辈祖宗", "贱人", "淫贱", "推油", "淫叫", "肛门", "屁眼", "肉穴", "生孩子没屁眼", "弓虽女干", "睾丸", "月经不调", "受虐狂", "射精", "吃屎", "吃大便", "逼毛", "比毛", "叫鸡", "叫小姐", "性欲", "SM", "TNND", "TMD", "NND", "SB", "BC", "SHIT", "SUCK", "DICK", "ASS", "PUSSY", "FUCKYOU", "AIDS", "penis", "sex", "屙", "爱滋", "淋病", "梅毒", "爱液", "屄", "逼", "臭机八", "臭鸡巴", "吹喇叭", "吹箫", "催情药", "屌", "龟头", "黄色", "机八", "机巴", "鸡八", "机掰", "鸡叭", "鸡掰", "奸", "茎", "精液", "精子", "尻", "滥交", "乱交", "卖淫", "嫖娼", "强奸犯", "情色", "乳峰", "乳晕", "色情", "威而钢", "威而柔", "伟哥", "性高潮", "性虐", "颜射", "阳物", "一夜情", "阴部", "阴道", "阴蒂", "阴门", "淫秽", "淫乱", "淫娃", "淫液", "淫汁", "淫穴", "淫洞", "援交妹", "梦遗", "阳痿", "早泄", "奸淫", "Bitch", "bt", "cao", "kao", "NMD", "ri", "K他命", "白痴", "笨蛋", "婊子", "操她妈", "操妳妈", "操你", "操他妈", "草你", "肏", "册那", "侧那", "测拿", "插", "蠢猪", "发骚", "废物", "干她妈", "干妳", "干妳娘", "干你妈", "干你娘", "干他妈", "狗娘养的", "贱货", "烂人", "老母", "老土", "妈比", "妈的", "马的", "妳老母的", "妳娘的", "你妈逼", "破鞋", "仆街", "去她妈", "去妳的", "去妳妈", "去你的", "去你妈", "去死", "去他妈", "日你", "赛她娘", "赛妳娘", "赛你娘", "赛他娘", "骚货", "傻B", "傻比", "傻子", "上妳", "上你", "神经病", "屎", "屎你娘", "屎妳娘", "他妈的", "王八蛋", "我操", "我日", "乡巴佬", "猪猡", "尿", "掯", "骑你", "湿了", "操他", "操她", "骑他", "骑她", "欠骑", "欠人骑", "来爽我", "来插我", "干他", "干她", "干死", "干爆", "干机", "机叭", "臭鸡", "臭机", "览叫", "阳具", "肉壶", "摸咪咪", "干鸡", "干入", "插你", "爽你", "干干", "干X", "他干", "干它", "干牠", "干您", "干汝", "干林", "操林", "干尼", "操尼", "我咧干", "干勒", "干我", "干啦", "干爽", "欠干", "我干", "来干", "轮干", "干一干", "轮流干", "援交", "奸暴", "再奸", "我奸", "奸你", "奸他", "奸她", "奸一奸", "淫湿", "鸡歪", "臭西", "吊", "遗精", "烂逼", "大血比", "叼你妈", "靠你妈", "戳你", "逼你老母", "挨球", "我日你", "草拟妈", "卖逼", "狗操卖逼", "日死", "奶娘", "他娘", "她娘", "你妈了妹", "插你妈", "叼你", "渣波波", "嫩b", "烂鸟", "干到", "狗干", "骚B", "性奴", "13点", "3P", "apesoft", "apex", "apexon", "Apexsoft", "asshole", "BLOW", "commander", "damn", "diu", "E04", "gay", "HAPPYDIGI", "HAPPYGM", "HAPPYTEST", "JOB", "Media", "ONS", "shattered", "shint", "stupid", "sucker", "tactical", "TANTRA", "testkick", "膀胱", "包皮", "鲍鱼", "笨屄", "笨逼", "笨比", "笨七", "笨柒", "屄毛", "比的", "避孕", "变性", "婊子养的", "别他妈的装", "别以为你是太监我就怕你", "瘪三", "宾周", "不举", "菜逼", "操蛋", "操妳", "操妳老妈", "操妳老母", "操妳娘", "操妳祖宗", "操你大爷", "操你老妈", "操你老母", "操你妈个B", "操你妈个屄", "操你娘", "操你全家", "操你祖宗", "操拟妈", "操行", "娼", "臭化", "臭化西", "臭街", "臭傻", "出台", "处女", "处女膜", "传染性病", "吹牛逼", "打炮", "大花B", "大鸡巴", "大卵泡", "大卵子", "大麻", "大咪咪", "大血B", "呆卵", "屌7", "屌鸠", "屌毛", "屌妳", "屌你", "屌七", "屌西", "二百五", "二屄", "二逼", "发廊", "分泌", "干干干", "干拎娘", "干妳老妈", "干妳老母", "干妳妈", "干你老妈", "干你老母", "干七八", "干死你", "赶你娘", "刚瘪三", "肛", "高潮", "睾", "狗操", "狗卵", "狗日的", "狗养", "瓜批", "瓜婆娘", "瓜娃子", "换妻", "鸡芭", "激情图片", "激情写真", "贱B", "贱逼", "贱种", "叫床", "她妈", "她妈的", "她妈地", "她马的", "精神病", "鸠", "鸠屎", "巨乳", "靠你娘", "靠腰", "狂操", "狂操你全家", "垃圾", "拉客", "烂B", "烂屄", "烂袋", "烂屌", "老毛子", "老骚比", "老骚货", "老味臭化西", "老鸭", "例假", "卵", "卵子", "乱伦", "裸", "裸体写真", "裸照", "妈", "妈个比", "妈卖妈屁", "卖比", "奶奶的", "妳妈的", "妳马的", "南蛮子", "能样", "你老咪", "你老母", "你姥", "你马的", "你娘", "你丫", "你丫的鸡巴长歪了吧", "你呀的鸡巴长歪了吧", "你以为你装屄就能骗我", "你以为你装逼就能骗我", "捻", "娘的", "娘个比", "娘狗", "女马", "女千", "女优", "虐待", "排泄", "脬", "屁股", "嫖", "泼妇", "欠操", "欠日", "情夫", "穷逼", "群交", "人妻", "人妖", "日你老母", "日你老娘", "日你妈啦屄", "日你妈啦逼", "日你娘", "日批", "日批", "日爽", "塞你爸", "塞你公", "塞你老母", "塞你老师", "塞你母", "塞你娘", "骚逼", "骚比", "杀人犯", "傻x", "傻屄", "傻吊", "傻卵", "煞笔", "上床", "生殖器", "牲口", "十八代", "食捻屎", "食屎", "驶你爸", "驶你公", "驶你老母", "驶你老师", "驶你母", "驶你娘", "屎忽鬼", "兽交", "熟女", "爽到家", "死全家", "他爹", "他妈", "他妈地", "他马的", "他祖宗", "它妈的", "它妈地", "套子", "痛经", "歪逼", "外阴", "完蛋操", "王八", "卫生巾", "慰安妇", "我靠", "我妳老爸", "下贱", "陷家", "陷家铲", "小瘪三", "小鸡巴", "小鸡鸡", "小卵泡", "小卵子", "小咪咪", "小皮条", "小骚比", "小骚货", "歇逼", "胸垫", "胸罩", "畜牲", "丫头养的", "阉狗", "妖你", "爷爷的", "一丝不挂", "一陀屎", "意淫", "阴", "淫妇", "淫棍", "淫毛", "幼齿", "月经", "杂种", "侏儒", "猪倌", "装屄呢", "装逼", "装逼呢", "子宫", "自慰", "祖宗", "作爱", "坐台", "bitch", "falundafa", "J8", "nnd", "snkni8net", "扒光", "白癡", "白烂", "逼样", "操78", "操机掰", "操妳全家", "操你奶奶", "懆您妈", "懆您娘", "插死你", "爹娘", "放荡", "肥西", "干娘", "干机掰", "干妳马", "干你良", "干您娘", "干死CS", "干死GM", "干死客服", "幹", "赣您娘", "灨你娘", "狗狼养的", "狗屁", "龟儿子", "机机歪歪", "鸡8", "鸡吧", "雞巴", "几八", "几巴", "几叭", "几芭", "妓", "妓院", "姦", "賤", "交配", "姣西", "她奶奶的", "军妓", "靠爸", "靠北", "靠背", "靠母", "口肯", "懒8", "懒八", "懒叫", "懒教", "烂货", "爛", "浪叫", "老二", "老味", "妈B", "妈的B", "妈个B", "妈妈的", "媽", "卖B", "妳她妈的", "你她马的", "你娘卡好", "你娘咧", "你全家", "你是鸡", "你是鸭", "你他马的", "你它妈的", "你它马的", "嫖客", "姘头", "仆", "强奸你", "日他娘", "撒尿", "赛妳阿母", "赛你老母", "三级片", "骚", "射你", "他妈ㄉ王八蛋", "他奶奶", "他奶奶的", "他奶娘的", "外挂", "下三烂", "性无能", "阳萎", "野鸡", "淫西", "招妓", "插妳", "春药", "呆比", "爹", "老卵", "奶", "娘", "女干", "禽兽", "日GT", "我考", "畜生", "永野修身", "装屄", "大便", "吹萧", "阴小撕大", "弟大物勃", "以茎至洞", "死GM", "死GD", "含捻", "舔西", "太监", "江core", "董文华", "懂文华", "马卖马屁", "不得不内", "ㄙㄞ你妈", "蔓ぺ", "暗稲", "ㄇㄞ", "他ㄇㄞ", "他ㄇ的", "丫的", "乳尖", "行房", "自慰", "色狼", "胸罩", "内裤", "底裤", "私处", "爽死", "变态", "妹疼", "妹痛", "弟疼", "弟痛", "姐疼", "姐痛", "哥疼", "哥痛", "同房", "打炮", "造爱", "性交", "性爱", "作爱", "做爱", "操你", "日你", "日批", "日逼", "鸡巴", "我操", "操死", "乳房", "阴茎", "阳具", "开苞", "肛门", "阴道", "阴蒂", "肉棍", "肉棒", "肉洞", "荡妇", "阴囊", "睾丸", "捅你", "捅我", "插我", "插你", "插她", "插他", "干你", "干她", "干他", "妓女", "射精", "口交", "手淫", "口淫", "屁眼", "阴户", "阴门", "下体", "龟头", "阴毛", "避孕套", "你妈逼", "大鸡巴", "性高潮", "性虐待", "性高潮", "GM", "系统", "管理员", "系统邮件", "GM邮件", "外挂", "提示", "外挂", "com", "net", "org", "int", "edu", "gov", "mil", "arpa", "biz", "info", "name", "pro", "coop", "aero", "museum", "av", "bi", "bs", "bt", "fk", "gm", "GM", "hk", "ml", "ML", "np", "sb", "SB", "sm", "SM", "tt", "tw", "告示", "工作人员", "公告", "好消息", "客服", "客户服务", "消息", "中奖", "礼品", "赠品", "派送", "发送", "发奖", "奖品", "送出", "派发", "抽奖", "gamemaster", "系統消息", "系统提示", "系統提示", "温馨提示", "系統信息", "系統", "信息", "获奖", "颁奖", "客户", "送礼", "派放", "温馨", "shenzhou", "ShenZhou", "WYC", "GM", "Gm", "gm", "Gamemaster", "gamemaster", "系统消息", "管理员", "系统", "公告", "Admin", "admin", "Administrator", "administrator", "北京微创弈科技有限公司", "北京微创弈公司", "北京微创弈", "微创弈", "黑建鑫", "苗葳", "韩天石", "韩杼滨", "郝伯村", "郝建秀", "何勇", "ace", "a c e", "ACE", "A C E", "Ace", "A c e", "ACe", "aCe", "acE", "赌", "平台", "内部", "内部人员", "ACE官方", "操", "草", "艹", "肏", "靠", "靠", "干", "插", "逗逼", "逗比", "逗笔", "菜逼", "菜B", "狗B", "狗养的", "狗娘养的", "傻", "脑残", "AcE", "微创弈公司", "微创弈平台", "屌丝", "运营团队", "运营人员", "智障", "草泥马", "NMB", "草你妈", "天天德州", "德州扑克之夜", "之夜", "CNM", "cnm", "nmb", "大菠萝运营团队", "大菠萝运营人员", "超级大菠萝", "超级玻璃", "大菠萝十三张", "十三张", "欢乐大菠萝", "欢乐菠萝", "天天大菠萝扑克", "天天菠萝", "天天扑克", "超级大菠萝", "超级菠萝", "掌上德州扑克", "掌上德扑", "十三张", "东方大菠萝", "东方菠萝", "明牌十三水", "明牌十", "豆子十三张", "豆子十", "一起德州", "战鱼德州圈", "战鱼", "福建十三水", "福建十", "SuperFunOFC", "风暴德州扑克", "风暴德州", "风暴德扑", "风暴扑克", "老虎·德州扑克", "老虎·", "老虎德州", "老虎德扑", "老虎扑克", "德州俱乐部", "金牌.德州大奖赛", "金牌.", "金牌德州", "金牌大奖赛", "真人德州扑克", "真人德扑", "真人扑克", "皇家德州扑克", "皇家德州", "皇家德扑", "皇家扑克", "火爆·德州扑克", "火爆·", "火爆德州", "德州扑克OL", "德州OL", "德扑OL", "扑克OL", "德州扑克俱乐部", "德州俱乐部", "德扑俱乐部", "博雅·德州扑克", "博雅", "全民德州扑克", "全民德州", "全民德扑", "全民扑克", "德州扑克闲来版", "闲来版", "口袋德州扑克", "口袋德州", "口袋德扑", "口袋扑克", "欢乐德州扑克", "欢乐德州", "欢乐德扑", "欢乐扑克", "途游德州扑克", "途游", "联众德州扑克", "联众", "德州扑克大师", "德州大师", "德扑大师", "牵手德州扑克", "牵手德州", "牵手德扑", "牵手扑克", "德州扑克大奖赛", "德州大奖赛", "德扑大奖赛", "扑克王", "菠菜德州扑克", "菠菜德州", "菠菜德扑", "菠菜扑克", "赌神德州扑克", "赌神德州", "赌神德扑", "赌神扑克", "凡跃·德州扑克", "凡跃", "壕德州扑克", "壕德州", "壕德扑", "壕扑克", "515德州扑克", "515", "WSOP德州扑克", "万人德州扑克", "万人", "土豪·德州扑克", "土豪·", "土豪德州", "云顶德州扑克", "云顶", "爽玩德州", "爽玩", "豪门·德州扑克", "豪门", "大头德州", "大头德扑", "疯狂·德州扑克", "疯狂·", "疯狂德州", "疯狂德扑", "激情德州", "激情德扑", "激情扑克", "KK德州扑克", "映花主播德州", "映花", "神来也德州扑克", "神来也", "天天玩德州", "天天玩", "全民德州", "老K德州扑克", "老K", "老K德州", "五一五德州扑克", "五一五", "欢乐德州扑克", "欢乐德州", "欢乐德扑", "德州扑克大富豪版", "大富豪版", "德州扑克游戏", "皇冠德州扑克", "皇冠德州", "皇冠德扑", "TT·德州扑克", "TT", "德州扑克%", "扑鱼", "德州扑克-幸运德州", "幸运德州", "Zynga Poker", "土豪德州扑克之夜", "土豪德州", "土豪德扑", "大亨德州扑克", "大亨德州", "大亨德扑", "一花·德州扑克", "一花", "德州扑克-online", "云顶德州扑克HD", "明星德州扑克", "百灵游戏大厅", "百灵", "美女主播德州扑克", "美女主播德州", "遇悦德州扑克", "遇悦", "富豪德州扑克", "富豪德州", "富豪德扑", "中游超级德州", "中游超级", "德州扑克比赛版", "精品王", "JJ斗地主", "JJ德州", "JJ大菠萝", "开心棋牌", "新欢乐德州", "火拼·德州扑克", "火拼·", "火拼德州", "火拼德扑", "澳门德州扑克", "牛牛德州扑克", "牛牛", "疯狂德州扑克", "疯狂德州", "YY德州扑克", "YY德州", "好牌", "德扑圈", "Fcku", "fcku", "nc", "NC", "卖币", "台独", "港独", "支那", "死逼", "狗东西", "傻帽", "狗鸡巴", "野种", "尼玛", "贱比", "借钱", "博彩", "操你", "支付宝", "Q.Q", "法lun功", "狗b", "西藏独立", "风骚", "骚妇", "骚蹄子", "爱液横流", "南海仲裁", "藏独", "成人片", "成人文", "成人小说", "成人网站", "黄片", "黄文", "黄色小说", "黄色网站", "出售金币", "出售筹码", "出售游戏币", "独立台湾", "独立香港", "独立西藏", "法伦功", "卖挂", "卖G", "卖g", "买G", "卖g", "官商勾结", "官匪一家", "兼职上门", "姐包夜", "姐服务", "姐兼职", "姐上门", "收购金币", "收购筹码", "收购游戏币", "习进平", "习晋平", "现金投注", "现金", "JB", "jb", "QNMB", "qnmb", "caonima", "rinima", "gaonima", "nimabi", "干你爹", "干你老母亲", "干你老娘", "操你仙人", "日你仙人", "干你全家", "干你祖宗", "日你祖宗", "日你全家", "你妈死了", "我是你爹", "操你祖宗", "操你全家", "蠢B", "蠢逼", "中华民国", "IS", "is", "插你娘", "插你老母", "怂逼", "赌钱", "交易游戏币", "交易筹码", "出币", "收币", "买币", "垃圾游戏", "坑爹游戏", "骗钱游戏", "傻逼大菠萝", "坑爹大菠萝", "垃圾大菠萝", "骗钱大菠萝", "傻逼大菠萝", "fa轮功", "法轮gong", "法仑功", "法轮工", "法仑工", "fa轮工", "fa仑功", "fa仑工", "台湾独立", "香港独立", "占中", "zhan中", "ZHAN中", "占zhong", "占ZHONG", "汉奸", "反屏蔽", "代刷", "代练", "投注", "微信交易", "支付宝交易", "QQ交易", "大奶子", "大肉棒", "春水横溢", "洞小口紧", "江贼民", "精子射在", "彭丽媛", "彭莉媛", "彭俪媛", "彭郦媛", "乱奸", "妹按摩", "上门按摩", "女技师", "女上门", "嫖鸡", "大保健", "骚浪", "骚穴", "骚嘴", "圣战不息", "售假币", "售军用", "瘟加饱", "瘟家宝", "瘟加宝", "瘟家饱", "瘟假饱", "温加饱", "温加宝", "温家饱", "温假饱", "席晋平", "席近平", "席进平", "江蛤蛤", "3P炮图", "55sss", "55sss偷拍区", "62ai成人网", "69式", "77bbb", "91美女", "97XXOO", "97ai", "97gan", "97sese", "97干", "999日本妹", "99BBS", "99bb", "99mmm.com", "9mimi", "9nnnn", "中华人民正邪", "自拍偷拍", "自拍美穴", "自插小穴", "政府软弱", "政治反对派", "政治犯", "中共独枭", "中共恶霸", "中共迫害", "中共小丑", "偷渡", "偷窥", "统独", "舔菊花", "舔奶", "舔屁眼", "舔穴", "舔阴", "舔足", "跳蛋", "吞精", "援交自拍", "援助交易", "网络色情网址大全", "网络视频妹", "小嫩逼", "小嫩鸡", "小肉缝", "小野谷美穗", "小泽菜穗", "小泽玛利亚", "小泽奈美", "小泽圆", "B样", "b样", "CN夫妻交友", "Gir15女性贴图网", "H动漫", "H漫画", "H片", "MM屄", "SM美图", "SM女王", "SM舔穴", "SM援交", "SexInSex", "Slut", "Tokyo", "UltraSurf", "U香阁", "X夜激情", "a4u", "a4y", "adult", "amateur", "gay", "g点", "g片", "藏？独", "藏旗", "操黑", "操烂", "操母狗", "操嫩穴", "操妻", "操射", "操爽", "操我", "操穴", "草榴", "成人A片", "成人BT", "成人bt", "成人电影", "成人漫画", "成人社区", "成人书库", "成人图片", "成人文学", "成人午夜场", "黑屄", "黑毛屄", "黑木香", "胡锦滔", "胡锦淘", "胡景涛", "胡温政府", "护士诱惑", "互舔淫穴", "互淫", "现代色情小说", "吸精", "吸鸟", "中共走狗", "中共专制", "中共黑匣子", "制服诱惑", "制服美妇", "艳情小说", "艳乳", "艳舞", "泻火尤物", "新法轮", "戳B", "戳逼", "戳比", "戳那吗B", "戳那吗逼", "戳那吗比", "大b", "大j8", "东亚病夫", "東亞病夫", "独裁政治", "法抡功", "法*功", "法~伦", "法~沦", "法~纶", "法~轮", "法~论", "法倫", "法輪", "反封锁", "反封锁技术", "反攻", "反共", "反人类", "反社会", "反和谐", "干比", "干bi", "干你老比", "共狗", "狗卵子", "狗杂种", "龟公", "龟投", "胡錦濤", "奸污", "疆獨", "酱猪媳", "金枪不倒", "茎候佳阴", "精童欲女", "精童", "砍死你", "拉皮条", "滥B", "滥逼", "滥比", "滥货", "滥交", "两个中国", "一中一台", "六四运动", "台湾国", "新疆暴乱", "新疆独立", "新疆国", "操狗", "操鸡", "操那吗B", "操那吗逼", "操那吗比", "操你吗b", "操你吗逼", "操你吗比", "操他吗B", "操他吗逼", "操他吗比", "操她吗B", "操她吗逼", "操她吗B", "操你爷爷", "插b", "插逼", "插比", "插那吗B", "插那吗逼", "插那吗比", "插你吗b", "插你吗逼", "插你吗比", "插他吗B", "插他吗逼", "插他吗比", "插她吗B", "插她吗逼", "插她吗B", "插你爷爷", "插你爸", "插你奶奶", "插你全家", "插你祖宗", "车仑女干", "达賴", "达癞", "達赖", "達賴", "东北独立", "国贼", "红灯区", "皇军", "僵贼", "僵贼民", "叫春", "民主不能等待", "递进民主", "空中民主墙", "西藏国家民主党", "小妖", "兜兜", "9327449", "97982727", "632697947", "8209257", "小 妖", "兜 兜", "跃", "袄", "沃", "妖", "祅", "秗", "岙", "岆", "矨", "訞", "穾", "扷", "宎", "仸", "芺", "枖", "饫", "镺", "932749", "9327499", "9237449", "9237499", "篼", "蔸", "饫", "atv", "ATV", "ACETV", "acetv", "日", "你麻痹"];
module.exports = data;

cc._RF.pop();
},{}]},{},["TableData","TableHisJoin","TableHisObjJS","TablePlayerData","Activity","Ante210","Ante220","Ante221","Ante222","Ante223","Ante230","Ante250","Betpokerrecord","Champ","DynaScheme1","ErrorCode","Icons","ImgRes","IntetActItems","Item","Name","Pay","QuickTalk","Settings","Share1","Share108","Share117","Share12","Share126","Share135","Share144","Share15","Share153","Share18","Share2","Share200","Share201","Share202","Share203","Share21","Share24","Share27","Share3","Share36","Share4","Share45","Share5","Share54","Share6","Share63","Share72","Share81","Share9","Share90","Share99","Sheet200","Sheet201","SignIn","StoreItem","Table","TeachCards","TeachTest","Thedealer","Tips","Vip","preLoadConfig","shieldName","MainSceneCtrl","AnimationManager","HistoryPlayCardsManager","MessageManager","MusicManager","PlayerInfoCacheManager","PreloadManager","ResourceManager","TipsLabelContentManager","UIManager","AnimationPlayControl","BtnResetState","FoldCrdsAnimaJS","JettonCreateControl","LabelResetProperty","LogHelper","NodeScale","PlayerInfo","ResLabJs","SpecialButton","CardTypeSelectJS","Config","Globals","HexSha1JS","IconDataJs","ImgNumJS","Moment","PokerJS","UITools","BaseUIPanel","ButtonTouchEffect","Calculator","ConfirmPanel","LimitClick","LimitLabel","MessageBoxJS","NetworkContentPanel","CardItemControl","CardTypePanel","JettonItem","MoneyPollControl","HistoryPlayerCtrlJS","PlayHistoryFightCardPanelJS","SimulateFightManager","ProgressBarCtrl","RollLabelItem","TipsLabelContent"]);
